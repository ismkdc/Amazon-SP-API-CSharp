/*
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using static FikaAmazonAPI.Utils.Constants;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductFees
{
    /// <summary>
    ///     An item identifier, marketplace, time of request, and other details that identify an estimate.
    /// </summary>
    [DataContract]
    public class FeesEstimateIdentifier : IEquatable<FeesEstimateIdentifier>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FeesEstimateIdentifier" /> class.
        /// </summary>
        /// <param name="MarketplaceId">A marketplace identifier..</param>
        /// <param name="SellerId">The seller identifier..</param>
        /// <param name="IdType">The type of item identifier specified..</param>
        /// <param name="IdValue">The item identifier..</param>
        /// <param name="IsAmazonFulfilled">When true, the offer is fulfilled by Amazon..</param>
        /// <param name="PriceToEstimateFees">The item price on which the fee estimate is based..</param>
        /// <param name="SellerInputIdentifier">A unique identifier provided by the caller to track this request..</param>
        public FeesEstimateIdentifier(string MarketplaceId = default, string SellerId = default,
            string IdType = default, string IdValue = default, bool? IsAmazonFulfilled = default,
            PriceToEstimateFees PriceToEstimateFees = default, string SellerInputIdentifier = default)
        {
            this.MarketplaceId = MarketplaceId;
            this.SellerId = SellerId;
            this.IdType = IdType;
            this.IdValue = IdValue;
            this.IsAmazonFulfilled = IsAmazonFulfilled;
            this.PriceToEstimateFees = PriceToEstimateFees;
            this.SellerInputIdentifier = SellerInputIdentifier;
        }

        /// <summary>
        ///     A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     The seller identifier.
        /// </summary>
        /// <value>The seller identifier.</value>
        [DataMember(Name = "SellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        ///     The type of item identifier specified.
        /// </summary>
        /// <value>The type of item identifier specified.</value>
        [DataMember(Name = "IdType", EmitDefaultValue = false)]
        public string IdType { get; set; }

        /// <summary>
        ///     The item identifier.
        /// </summary>
        /// <value>The item identifier.</value>
        [DataMember(Name = "IdValue", EmitDefaultValue = false)]
        public string IdValue { get; set; }

        /// <summary>
        ///     When true, the offer is fulfilled by Amazon.
        /// </summary>
        /// <value>When true, the offer is fulfilled by Amazon.</value>
        [DataMember(Name = "IsAmazonFulfilled", EmitDefaultValue = false)]
        public bool? IsAmazonFulfilled { get; set; }

        /// <summary>
        ///     The item price on which the fee estimate is based.
        /// </summary>
        /// <value>The item price on which the fee estimate is based.</value>
        [DataMember(Name = "PriceToEstimateFees", EmitDefaultValue = false)]
        public PriceToEstimateFees PriceToEstimateFees { get; set; }

        /// <summary>
        ///     A unique identifier provided by the caller to track this request.
        /// </summary>
        /// <value>A unique identifier provided by the caller to track this request.</value>
        [DataMember(Name = "SellerInputIdentifier", EmitDefaultValue = false)]
        public string SellerInputIdentifier { get; set; }


        /// <summary>
        ///     An optional enrollment program to return the estimated fees when the offer is fulfilled by Amazon
        ///     (IsAmazonFulfilled is set to true).
        /// </summary>
        [DataMember(Name = "OptionalFulfillmentProgram", EmitDefaultValue = false)]
        public OptionalFulfillmentProgram? OptionalFulfillmentProgram { get; set; }

        /// <summary>
        ///     Returns true if FeesEstimateIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesEstimateIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesEstimateIdentifier input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    SellerId == input.SellerId ||
                    (SellerId != null &&
                     SellerId.Equals(input.SellerId))
                ) &&
                (
                    IdType == input.IdType ||
                    (IdType != null &&
                     IdType.Equals(input.IdType))
                ) &&
                (
                    IdValue == input.IdValue ||
                    (IdValue != null &&
                     IdValue.Equals(input.IdValue))
                ) &&
                (
                    IsAmazonFulfilled == input.IsAmazonFulfilled ||
                    (IsAmazonFulfilled != null &&
                     IsAmazonFulfilled.Equals(input.IsAmazonFulfilled))
                ) &&
                (
                    PriceToEstimateFees == input.PriceToEstimateFees ||
                    (PriceToEstimateFees != null &&
                     PriceToEstimateFees.Equals(input.PriceToEstimateFees))
                ) &&
                (
                    SellerInputIdentifier == input.SellerInputIdentifier ||
                    (SellerInputIdentifier != null &&
                     SellerInputIdentifier.Equals(input.SellerInputIdentifier))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesEstimateIdentifier {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdValue: ").Append(IdValue).Append("\n");
            sb.Append("  IsAmazonFulfilled: ").Append(IsAmazonFulfilled).Append("\n");
            sb.Append("  PriceToEstimateFees: ").Append(PriceToEstimateFees).Append("\n");
            sb.Append("  SellerInputIdentifier: ").Append(SellerInputIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FeesEstimateIdentifier);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (SellerId != null)
                    hashCode = hashCode * 59 + SellerId.GetHashCode();
                if (IdType != null)
                    hashCode = hashCode * 59 + IdType.GetHashCode();
                if (IdValue != null)
                    hashCode = hashCode * 59 + IdValue.GetHashCode();
                if (IsAmazonFulfilled != null)
                    hashCode = hashCode * 59 + IsAmazonFulfilled.GetHashCode();
                if (PriceToEstimateFees != null)
                    hashCode = hashCode * 59 + PriceToEstimateFees.GetHashCode();
                if (SellerInputIdentifier != null)
                    hashCode = hashCode * 59 + SellerInputIdentifier.GetHashCode();
                return hashCode;
            }
        }
    }
}