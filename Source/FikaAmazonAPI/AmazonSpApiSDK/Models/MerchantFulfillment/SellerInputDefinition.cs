/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     Specifies characteristics that apply to a seller input.
    /// </summary>
    [DataContract]
    public class SellerInputDefinition : IEquatable<SellerInputDefinition>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SellerInputDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SellerInputDefinition()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SellerInputDefinition" /> class.
        /// </summary>
        /// <param name="isRequired">When true, the additional input field is required. (required).</param>
        /// <param name="dataType">The data type of the additional input field. (required).</param>
        /// <param name="constraints">constraints (required).</param>
        /// <param name="inputDisplayText">The display text for the additional input field. (required).</param>
        /// <param name="inputTarget">Whether the seller input applies to the item or the shipment..</param>
        /// <param name="storedValue">storedValue (required).</param>
        /// <param name="restrictedSetValues">restrictedSetValues.</param>
        public SellerInputDefinition(bool? isRequired = default, string dataType = default,
            Constraints constraints = default, string inputDisplayText = default,
            InputTargetType? inputTarget = default, AdditionalSellerInput storedValue = default,
            RestrictedSetValues restrictedSetValues = default)
        {
            // to ensure "isRequired" is required (not null)
            if (isRequired == null)
                throw new InvalidDataException(
                    "isRequired is a required property for SellerInputDefinition and cannot be null");
            IsRequired = isRequired;
            // to ensure "dataType" is required (not null)
            if (dataType == null)
                throw new InvalidDataException(
                    "dataType is a required property for SellerInputDefinition and cannot be null");
            DataType = dataType;
            // to ensure "constraints" is required (not null)
            if (constraints == null)
                throw new InvalidDataException(
                    "constraints is a required property for SellerInputDefinition and cannot be null");
            Constraints = constraints;
            // to ensure "inputDisplayText" is required (not null)
            if (inputDisplayText == null)
                throw new InvalidDataException(
                    "inputDisplayText is a required property for SellerInputDefinition and cannot be null");
            InputDisplayText = inputDisplayText;
            // to ensure "storedValue" is required (not null)
            if (storedValue == null)
                throw new InvalidDataException(
                    "storedValue is a required property for SellerInputDefinition and cannot be null");
            StoredValue = storedValue;
            InputTarget = inputTarget;
            RestrictedSetValues = restrictedSetValues;
        }

        /// <summary>
        ///     Whether the seller input applies to the item or the shipment.
        /// </summary>
        /// <value>Whether the seller input applies to the item or the shipment.</value>
        [DataMember(Name = "InputTarget", EmitDefaultValue = false)]
        public InputTargetType? InputTarget { get; set; }

        /// <summary>
        ///     When true, the additional input field is required.
        /// </summary>
        /// <value>When true, the additional input field is required.</value>
        [DataMember(Name = "IsRequired", EmitDefaultValue = false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        ///     The data type of the additional input field.
        /// </summary>
        /// <value>The data type of the additional input field.</value>
        [DataMember(Name = "DataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        ///     Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "Constraints", EmitDefaultValue = false)]
        public Constraints Constraints { get; set; }

        /// <summary>
        ///     The display text for the additional input field.
        /// </summary>
        /// <value>The display text for the additional input field.</value>
        [DataMember(Name = "InputDisplayText", EmitDefaultValue = false)]
        public string InputDisplayText { get; set; }


        /// <summary>
        ///     Gets or Sets StoredValue
        /// </summary>
        [DataMember(Name = "StoredValue", EmitDefaultValue = false)]
        public AdditionalSellerInput StoredValue { get; set; }

        /// <summary>
        ///     Gets or Sets RestrictedSetValues
        /// </summary>
        [DataMember(Name = "RestrictedSetValues", EmitDefaultValue = false)]
        public RestrictedSetValues RestrictedSetValues { get; set; }

        /// <summary>
        ///     Returns true if SellerInputDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of SellerInputDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellerInputDefinition input)
        {
            if (input == null)
                return false;

            return
                (
                    IsRequired == input.IsRequired ||
                    (IsRequired != null &&
                     IsRequired.Equals(input.IsRequired))
                ) &&
                (
                    DataType == input.DataType ||
                    (DataType != null &&
                     DataType.Equals(input.DataType))
                ) &&
                (
                    Constraints == input.Constraints ||
                    (Constraints != null &&
                     Constraints.Equals(input.Constraints))
                ) &&
                (
                    InputDisplayText == input.InputDisplayText ||
                    (InputDisplayText != null &&
                     InputDisplayText.Equals(input.InputDisplayText))
                ) &&
                (
                    InputTarget == input.InputTarget ||
                    (InputTarget != null &&
                     InputTarget.Equals(input.InputTarget))
                ) &&
                (
                    StoredValue == input.StoredValue ||
                    (StoredValue != null &&
                     StoredValue.Equals(input.StoredValue))
                ) &&
                (
                    RestrictedSetValues == input.RestrictedSetValues ||
                    (RestrictedSetValues != null &&
                     RestrictedSetValues.Equals(input.RestrictedSetValues))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellerInputDefinition {\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  InputDisplayText: ").Append(InputDisplayText).Append("\n");
            sb.Append("  InputTarget: ").Append(InputTarget).Append("\n");
            sb.Append("  StoredValue: ").Append(StoredValue).Append("\n");
            sb.Append("  RestrictedSetValues: ").Append(RestrictedSetValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SellerInputDefinition);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (IsRequired != null)
                    hashCode = hashCode * 59 + IsRequired.GetHashCode();
                if (DataType != null)
                    hashCode = hashCode * 59 + DataType.GetHashCode();
                if (Constraints != null)
                    hashCode = hashCode * 59 + Constraints.GetHashCode();
                if (InputDisplayText != null)
                    hashCode = hashCode * 59 + InputDisplayText.GetHashCode();
                if (InputTarget != null)
                    hashCode = hashCode * 59 + InputTarget.GetHashCode();
                if (StoredValue != null)
                    hashCode = hashCode * 59 + StoredValue.GetHashCode();
                if (RestrictedSetValues != null)
                    hashCode = hashCode * 59 + RestrictedSetValues.GetHashCode();
                return hashCode;
            }
        }
    }
}