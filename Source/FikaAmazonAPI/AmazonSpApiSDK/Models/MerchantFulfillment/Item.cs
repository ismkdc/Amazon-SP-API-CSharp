/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     An Amazon order item identifier and a quantity.
    /// </summary>
    [DataContract]
    public class Item : IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Item()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="orderItemId">orderItemId (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="itemWeight">itemWeight.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="transparencyCodeList">transparencyCodeList.</param>
        /// <param name="itemLevelSellerInputsList">
        ///     A list of additional seller inputs required to ship this item using the chosen
        ///     shipping service..
        /// </param>
        public Item(string orderItemId = default, int? quantity = default, Weight itemWeight = default,
            string itemDescription = default, TransparencyCodeList transparencyCodeList = default,
            AdditionalSellerInputsList itemLevelSellerInputsList = default)
        {
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
                throw new InvalidDataException("orderItemId is a required property for Item and cannot be null");
            OrderItemId = orderItemId;
            // to ensure "quantity" is required (not null)
            if (quantity == null)
                throw new InvalidDataException("quantity is a required property for Item and cannot be null");
            Quantity = quantity;
            ItemWeight = itemWeight;
            ItemDescription = itemDescription;
            TransparencyCodeList = transparencyCodeList;
            ItemLevelSellerInputsList = itemLevelSellerInputsList;
        }

        /// <summary>
        ///     Gets or Sets OrderItemId
        /// </summary>
        [DataMember(Name = "OrderItemId", EmitDefaultValue = false)]
        public string OrderItemId { get; set; }

        /// <summary>
        ///     Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     Gets or Sets ItemWeight
        /// </summary>
        [DataMember(Name = "ItemWeight", EmitDefaultValue = false)]
        public Weight ItemWeight { get; set; }

        /// <summary>
        ///     Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name = "ItemDescription", EmitDefaultValue = false)]
        public string ItemDescription { get; set; }

        /// <summary>
        ///     Gets or Sets TransparencyCodeList
        /// </summary>
        [DataMember(Name = "TransparencyCodeList", EmitDefaultValue = false)]
        public TransparencyCodeList TransparencyCodeList { get; set; }

        /// <summary>
        ///     A list of additional seller inputs required to ship this item using the chosen shipping service.
        /// </summary>
        /// <value>A list of additional seller inputs required to ship this item using the chosen shipping service.</value>
        [DataMember(Name = "ItemLevelSellerInputsList", EmitDefaultValue = false)]
        public AdditionalSellerInputsList ItemLevelSellerInputsList { get; set; }

        /// <summary>
        ///     Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return
                (
                    OrderItemId == input.OrderItemId ||
                    (OrderItemId != null &&
                     OrderItemId.Equals(input.OrderItemId))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    ItemWeight == input.ItemWeight ||
                    (ItemWeight != null &&
                     ItemWeight.Equals(input.ItemWeight))
                ) &&
                (
                    ItemDescription == input.ItemDescription ||
                    (ItemDescription != null &&
                     ItemDescription.Equals(input.ItemDescription))
                ) &&
                (
                    TransparencyCodeList == input.TransparencyCodeList ||
                    (TransparencyCodeList != null &&
                     TransparencyCodeList.Equals(input.TransparencyCodeList))
                ) &&
                (
                    ItemLevelSellerInputsList == input.ItemLevelSellerInputsList ||
                    (ItemLevelSellerInputsList != null &&
                     ItemLevelSellerInputsList.Equals(input.ItemLevelSellerInputsList))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemWeight: ").Append(ItemWeight).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  TransparencyCodeList: ").Append(TransparencyCodeList).Append("\n");
            sb.Append("  ItemLevelSellerInputsList: ").Append(ItemLevelSellerInputsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Item);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (OrderItemId != null)
                    hashCode = hashCode * 59 + OrderItemId.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (ItemWeight != null)
                    hashCode = hashCode * 59 + ItemWeight.GetHashCode();
                if (ItemDescription != null)
                    hashCode = hashCode * 59 + ItemDescription.GetHashCode();
                if (TransparencyCodeList != null)
                    hashCode = hashCode * 59 + TransparencyCodeList.GetHashCode();
                if (ItemLevelSellerInputsList != null)
                    hashCode = hashCode * 59 + ItemLevelSellerInputsList.GetHashCode();
                return hashCode;
            }
        }
    }
}