/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     Information about a rejected shipping service
    /// </summary>
    [DataContract]
    public class RejectedShippingService : IEquatable<RejectedShippingService>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="RejectedShippingService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public RejectedShippingService()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RejectedShippingService" /> class.
        /// </summary>
        /// <param name="carrierName">The rejected shipping carrier name. e.g. USPS (required).</param>
        /// <param name="shippingServiceName">
        ///     The rejected shipping service localized name. e.g. FedEx Standard Overnight
        ///     (required).
        /// </param>
        /// <param name="shippingServiceId">The rejected shipping service identifier. e.g. FEDEX_PTP_STANDARD_OVERNIGHT (required).</param>
        /// <param name="rejectionReasonCode">
        ///     A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX
        ///     (required).
        /// </param>
        /// <param name="rejectionReasonMessage">A localized human readable description of the rejected reason..</param>
        public RejectedShippingService(string carrierName = default, string shippingServiceName = default,
            string shippingServiceId = default, string rejectionReasonCode = default,
            string rejectionReasonMessage = default)
        {
            // to ensure "carrierName" is required (not null)
            if (carrierName == null)
                throw new InvalidDataException(
                    "carrierName is a required property for RejectedShippingService and cannot be null");
            CarrierName = carrierName;
            // to ensure "shippingServiceName" is required (not null)
            if (shippingServiceName == null)
                throw new InvalidDataException(
                    "shippingServiceName is a required property for RejectedShippingService and cannot be null");
            ShippingServiceName = shippingServiceName;
            // to ensure "shippingServiceId" is required (not null)
            if (shippingServiceId == null)
                throw new InvalidDataException(
                    "shippingServiceId is a required property for RejectedShippingService and cannot be null");
            ShippingServiceId = shippingServiceId;
            // to ensure "rejectionReasonCode" is required (not null)
            if (rejectionReasonCode == null)
                throw new InvalidDataException(
                    "rejectionReasonCode is a required property for RejectedShippingService and cannot be null");
            RejectionReasonCode = rejectionReasonCode;
            RejectionReasonMessage = rejectionReasonMessage;
        }

        /// <summary>
        ///     The rejected shipping carrier name. e.g. USPS
        /// </summary>
        /// <value>The rejected shipping carrier name. e.g. USPS</value>
        [DataMember(Name = "CarrierName", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        ///     The rejected shipping service localized name. e.g. FedEx Standard Overnight
        /// </summary>
        /// <value>The rejected shipping service localized name. e.g. FedEx Standard Overnight</value>
        [DataMember(Name = "ShippingServiceName", EmitDefaultValue = false)]
        public string ShippingServiceName { get; set; }

        /// <summary>
        ///     The rejected shipping service identifier. e.g. FEDEX_PTP_STANDARD_OVERNIGHT
        /// </summary>
        /// <value>The rejected shipping service identifier. e.g. FEDEX_PTP_STANDARD_OVERNIGHT</value>
        [DataMember(Name = "ShippingServiceId", EmitDefaultValue = false)]
        public string ShippingServiceId { get; set; }

        /// <summary>
        ///     A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX
        /// </summary>
        /// <value>A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX</value>
        [DataMember(Name = "RejectionReasonCode", EmitDefaultValue = false)]
        public string RejectionReasonCode { get; set; }

        /// <summary>
        ///     A localized human readable description of the rejected reason.
        /// </summary>
        /// <value>A localized human readable description of the rejected reason.</value>
        [DataMember(Name = "RejectionReasonMessage", EmitDefaultValue = false)]
        public string RejectionReasonMessage { get; set; }

        /// <summary>
        ///     Returns true if RejectedShippingService instances are equal
        /// </summary>
        /// <param name="input">Instance of RejectedShippingService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RejectedShippingService input)
        {
            if (input == null)
                return false;

            return
                (
                    CarrierName == input.CarrierName ||
                    (CarrierName != null &&
                     CarrierName.Equals(input.CarrierName))
                ) &&
                (
                    ShippingServiceName == input.ShippingServiceName ||
                    (ShippingServiceName != null &&
                     ShippingServiceName.Equals(input.ShippingServiceName))
                ) &&
                (
                    ShippingServiceId == input.ShippingServiceId ||
                    (ShippingServiceId != null &&
                     ShippingServiceId.Equals(input.ShippingServiceId))
                ) &&
                (
                    RejectionReasonCode == input.RejectionReasonCode ||
                    (RejectionReasonCode != null &&
                     RejectionReasonCode.Equals(input.RejectionReasonCode))
                ) &&
                (
                    RejectionReasonMessage == input.RejectionReasonMessage ||
                    (RejectionReasonMessage != null &&
                     RejectionReasonMessage.Equals(input.RejectionReasonMessage))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RejectedShippingService {\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  ShippingServiceName: ").Append(ShippingServiceName).Append("\n");
            sb.Append("  ShippingServiceId: ").Append(ShippingServiceId).Append("\n");
            sb.Append("  RejectionReasonCode: ").Append(RejectionReasonCode).Append("\n");
            sb.Append("  RejectionReasonMessage: ").Append(RejectionReasonMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RejectedShippingService);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CarrierName != null)
                    hashCode = hashCode * 59 + CarrierName.GetHashCode();
                if (ShippingServiceName != null)
                    hashCode = hashCode * 59 + ShippingServiceName.GetHashCode();
                if (ShippingServiceId != null)
                    hashCode = hashCode * 59 + ShippingServiceId.GetHashCode();
                if (RejectionReasonCode != null)
                    hashCode = hashCode * 59 + RejectionReasonCode.GetHashCode();
                if (RejectionReasonMessage != null)
                    hashCode = hashCode * 59 + RejectionReasonMessage.GetHashCode();
                return hashCode;
            }
        }
    }
}