/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     The details of a shipment, including the shipment status.
    /// </summary>
    [DataContract]
    public class Shipment : IEquatable<Shipment>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Shipment()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="shipmentId">shipmentId (required).</param>
        /// <param name="amazonOrderId">amazonOrderId (required).</param>
        /// <param name="sellerOrderId">sellerOrderId.</param>
        /// <param name="itemList">itemList (required).</param>
        /// <param name="shipFromAddress">The address of the sender. (required).</param>
        /// <param name="shipToAddress">The destination address for the shipment. (required).</param>
        /// <param name="packageDimensions">packageDimensions (required).</param>
        /// <param name="weight">The package weight. (required).</param>
        /// <param name="insurance">
        ///     If DeclaredValue was specified in a previous call to the createShipment operation, then
        ///     Insurance indicates the amount that the carrier will use to insure the shipment. If DeclaredValue was not specified
        ///     with a previous call to the createShipment operation, then the shipment will be insured for the carrier&#39;s
        ///     minimum insurance amount, or the combined sale prices that the items are listed for in the shipment, whichever is
        ///     less. (required).
        /// </param>
        /// <param name="shippingService">shippingService (required).</param>
        /// <param name="label">
        ///     Data for creating a shipping label and dimensions for printing the label. If the shipment is
        ///     canceled, an empty Label is returned. (required).
        /// </param>
        /// <param name="status">The shipment status. (required).</param>
        /// <param name="trackingId">trackingId.</param>
        /// <param name="createdDate">The date and time the shipment was created. (required).</param>
        /// <param name="lastUpdatedDate">The date and time of the last update..</param>
        public Shipment(string shipmentId = default, string amazonOrderId = default, string sellerOrderId = default,
            ItemList itemList = default, Address shipFromAddress = default, Address shipToAddress = default,
            PackageDimensions packageDimensions = default, Weight weight = default, CurrencyAmount insurance = default,
            ShippingService shippingService = default, Label label = default, ShipmentStatus status = default,
            string trackingId = default, DateTime? createdDate = default, DateTime? lastUpdatedDate = default)
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
                throw new InvalidDataException("shipmentId is a required property for Shipment and cannot be null");
            ShipmentId = shipmentId;
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
                throw new InvalidDataException("amazonOrderId is a required property for Shipment and cannot be null");
            AmazonOrderId = amazonOrderId;
            // to ensure "itemList" is required (not null)
            if (itemList == null)
                throw new InvalidDataException("itemList is a required property for Shipment and cannot be null");
            ItemList = itemList;
            // to ensure "shipFromAddress" is required (not null)
            if (shipFromAddress == null)
                throw new InvalidDataException(
                    "shipFromAddress is a required property for Shipment and cannot be null");
            ShipFromAddress = shipFromAddress;
            // to ensure "shipToAddress" is required (not null)
            if (shipToAddress == null)
                throw new InvalidDataException("shipToAddress is a required property for Shipment and cannot be null");
            ShipToAddress = shipToAddress;
            // to ensure "packageDimensions" is required (not null)
            if (packageDimensions == null)
                throw new InvalidDataException(
                    "packageDimensions is a required property for Shipment and cannot be null");
            PackageDimensions = packageDimensions;
            // to ensure "weight" is required (not null)
            if (weight == null)
                throw new InvalidDataException("weight is a required property for Shipment and cannot be null");
            Weight = weight;
            // to ensure "insurance" is required (not null)
            if (insurance == null)
                throw new InvalidDataException("insurance is a required property for Shipment and cannot be null");
            Insurance = insurance;
            // to ensure "shippingService" is required (not null)
            if (shippingService == null)
                throw new InvalidDataException(
                    "shippingService is a required property for Shipment and cannot be null");
            ShippingService = shippingService;
            // to ensure "label" is required (not null)
            if (label == null)
                throw new InvalidDataException("label is a required property for Shipment and cannot be null");
            Label = label;
            // to ensure "status" is required (not null)
            if (status == null)
                throw new InvalidDataException("status is a required property for Shipment and cannot be null");
            Status = status;
            // to ensure "createdDate" is required (not null)
            if (createdDate == null)
                throw new InvalidDataException("createdDate is a required property for Shipment and cannot be null");
            CreatedDate = createdDate;
            SellerOrderId = sellerOrderId;
            TrackingId = trackingId;
            LastUpdatedDate = lastUpdatedDate;
        }

        /// <summary>
        ///     The shipment status.
        /// </summary>
        /// <value>The shipment status.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public ShipmentStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "ShipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        ///     Gets or Sets AmazonOrderId
        /// </summary>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        ///     Gets or Sets SellerOrderId
        /// </summary>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public string SellerOrderId { get; set; }

        /// <summary>
        ///     Gets or Sets ItemList
        /// </summary>
        [DataMember(Name = "ItemList", EmitDefaultValue = false)]
        public ItemList ItemList { get; set; }

        /// <summary>
        ///     The address of the sender.
        /// </summary>
        /// <value>The address of the sender.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        ///     The destination address for the shipment.
        /// </summary>
        /// <value>The destination address for the shipment.</value>
        [DataMember(Name = "ShipToAddress", EmitDefaultValue = false)]
        public Address ShipToAddress { get; set; }

        /// <summary>
        ///     Gets or Sets PackageDimensions
        /// </summary>
        [DataMember(Name = "PackageDimensions", EmitDefaultValue = false)]
        public PackageDimensions PackageDimensions { get; set; }

        /// <summary>
        ///     The package weight.
        /// </summary>
        /// <value>The package weight.</value>
        [DataMember(Name = "Weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        ///     If DeclaredValue was specified in a previous call to the createShipment operation, then Insurance indicates the
        ///     amount that the carrier will use to insure the shipment. If DeclaredValue was not specified with a previous call to
        ///     the createShipment operation, then the shipment will be insured for the carrier&#39;s minimum insurance amount, or
        ///     the combined sale prices that the items are listed for in the shipment, whichever is less.
        /// </summary>
        /// <value>
        ///     If DeclaredValue was specified in a previous call to the createShipment operation, then Insurance indicates the
        ///     amount that the carrier will use to insure the shipment. If DeclaredValue was not specified with a previous call to
        ///     the createShipment operation, then the shipment will be insured for the carrier&#39;s minimum insurance amount, or
        ///     the combined sale prices that the items are listed for in the shipment, whichever is less.
        /// </value>
        [DataMember(Name = "Insurance", EmitDefaultValue = false)]
        public CurrencyAmount Insurance { get; set; }

        /// <summary>
        ///     Gets or Sets ShippingService
        /// </summary>
        [DataMember(Name = "ShippingService", EmitDefaultValue = false)]
        public ShippingService ShippingService { get; set; }

        /// <summary>
        ///     Data for creating a shipping label and dimensions for printing the label. If the shipment is canceled, an empty
        ///     Label is returned.
        /// </summary>
        /// <value>
        ///     Data for creating a shipping label and dimensions for printing the label. If the shipment is canceled, an empty
        ///     Label is returned.
        /// </value>
        [DataMember(Name = "Label", EmitDefaultValue = false)]
        public Label Label { get; set; }


        /// <summary>
        ///     Gets or Sets TrackingId
        /// </summary>
        [DataMember(Name = "TrackingId", EmitDefaultValue = false)]
        public string TrackingId { get; set; }

        /// <summary>
        ///     The date and time the shipment was created.
        /// </summary>
        /// <value>The date and time the shipment was created.</value>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        ///     The date and time of the last update.
        /// </summary>
        /// <value>The date and time of the last update.</value>
        [DataMember(Name = "LastUpdatedDate", EmitDefaultValue = false)]
        public DateTime? LastUpdatedDate { get; set; }

        /// <summary>
        ///     Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment input)
        {
            if (input == null)
                return false;

            return
                (
                    ShipmentId == input.ShipmentId ||
                    (ShipmentId != null &&
                     ShipmentId.Equals(input.ShipmentId))
                ) &&
                (
                    AmazonOrderId == input.AmazonOrderId ||
                    (AmazonOrderId != null &&
                     AmazonOrderId.Equals(input.AmazonOrderId))
                ) &&
                (
                    SellerOrderId == input.SellerOrderId ||
                    (SellerOrderId != null &&
                     SellerOrderId.Equals(input.SellerOrderId))
                ) &&
                (
                    ItemList == input.ItemList ||
                    (ItemList != null &&
                     ItemList.Equals(input.ItemList))
                ) &&
                (
                    ShipFromAddress == input.ShipFromAddress ||
                    (ShipFromAddress != null &&
                     ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    ShipToAddress == input.ShipToAddress ||
                    (ShipToAddress != null &&
                     ShipToAddress.Equals(input.ShipToAddress))
                ) &&
                (
                    PackageDimensions == input.PackageDimensions ||
                    (PackageDimensions != null &&
                     PackageDimensions.Equals(input.PackageDimensions))
                ) &&
                (
                    Weight == input.Weight ||
                    (Weight != null &&
                     Weight.Equals(input.Weight))
                ) &&
                (
                    Insurance == input.Insurance ||
                    (Insurance != null &&
                     Insurance.Equals(input.Insurance))
                ) &&
                (
                    ShippingService == input.ShippingService ||
                    (ShippingService != null &&
                     ShippingService.Equals(input.ShippingService))
                ) &&
                (
                    Label == input.Label ||
                    (Label != null &&
                     Label.Equals(input.Label))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    TrackingId == input.TrackingId ||
                    (TrackingId != null &&
                     TrackingId.Equals(input.TrackingId))
                ) &&
                (
                    CreatedDate == input.CreatedDate ||
                    (CreatedDate != null &&
                     CreatedDate.Equals(input.CreatedDate))
                ) &&
                (
                    LastUpdatedDate == input.LastUpdatedDate ||
                    (LastUpdatedDate != null &&
                     LastUpdatedDate.Equals(input.LastUpdatedDate))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  ItemList: ").Append(ItemList).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  ShipToAddress: ").Append(ShipToAddress).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  ShippingService: ").Append(ShippingService).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Shipment);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ShipmentId != null)
                    hashCode = hashCode * 59 + ShipmentId.GetHashCode();
                if (AmazonOrderId != null)
                    hashCode = hashCode * 59 + AmazonOrderId.GetHashCode();
                if (SellerOrderId != null)
                    hashCode = hashCode * 59 + SellerOrderId.GetHashCode();
                if (ItemList != null)
                    hashCode = hashCode * 59 + ItemList.GetHashCode();
                if (ShipFromAddress != null)
                    hashCode = hashCode * 59 + ShipFromAddress.GetHashCode();
                if (ShipToAddress != null)
                    hashCode = hashCode * 59 + ShipToAddress.GetHashCode();
                if (PackageDimensions != null)
                    hashCode = hashCode * 59 + PackageDimensions.GetHashCode();
                if (Weight != null)
                    hashCode = hashCode * 59 + Weight.GetHashCode();
                if (Insurance != null)
                    hashCode = hashCode * 59 + Insurance.GetHashCode();
                if (ShippingService != null)
                    hashCode = hashCode * 59 + ShippingService.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (TrackingId != null)
                    hashCode = hashCode * 59 + TrackingId.GetHashCode();
                if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                if (LastUpdatedDate != null)
                    hashCode = hashCode * 59 + LastUpdatedDate.GetHashCode();
                return hashCode;
            }
        }
    }
}