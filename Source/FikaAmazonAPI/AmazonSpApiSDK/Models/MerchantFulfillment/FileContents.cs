/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     The document data and checksum.
    /// </summary>
    [DataContract]
    public class FileContents : IEquatable<FileContents>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FileContents" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FileContents()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FileContents" /> class.
        /// </summary>
        /// <param name="contents">Data for printing labels, in the form of a Base64-encoded, GZip-compressed string. (required).</param>
        /// <param name="fileType">fileType (required).</param>
        /// <param name="checksum">
        ///     An MD5 hash to validate the PDF document data, in the form of a Base64-encoded string.
        ///     (required).
        /// </param>
        public FileContents(string contents = default, FileType fileType = default, string checksum = default)
        {
            // to ensure "contents" is required (not null)
            if (contents == null)
                throw new InvalidDataException("contents is a required property for FileContents and cannot be null");
            Contents = contents;
            // to ensure "fileType" is required (not null)
            if (fileType == null)
                throw new InvalidDataException("fileType is a required property for FileContents and cannot be null");
            FileType = fileType;
            // to ensure "checksum" is required (not null)
            if (checksum == null)
                throw new InvalidDataException("checksum is a required property for FileContents and cannot be null");
            Checksum = checksum;
        }

        /// <summary>
        ///     Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "FileType", EmitDefaultValue = false)]
        public FileType? FileType { get; set; }

        /// <summary>
        ///     Data for printing labels, in the form of a Base64-encoded, GZip-compressed string.
        /// </summary>
        /// <value>Data for printing labels, in the form of a Base64-encoded, GZip-compressed string.</value>
        [DataMember(Name = "Contents", EmitDefaultValue = false)]
        public string Contents { get; set; }


        /// <summary>
        ///     An MD5 hash to validate the PDF document data, in the form of a Base64-encoded string.
        /// </summary>
        /// <value>An MD5 hash to validate the PDF document data, in the form of a Base64-encoded string.</value>
        [DataMember(Name = "Checksum", EmitDefaultValue = false)]
        public string Checksum { get; set; }

        /// <summary>
        ///     Returns true if FileContents instances are equal
        /// </summary>
        /// <param name="input">Instance of FileContents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileContents input)
        {
            if (input == null)
                return false;

            return
                (
                    Contents == input.Contents ||
                    (Contents != null &&
                     Contents.Equals(input.Contents))
                ) &&
                (
                    FileType == input.FileType ||
                    (FileType != null &&
                     FileType.Equals(input.FileType))
                ) &&
                (
                    Checksum == input.Checksum ||
                    (Checksum != null &&
                     Checksum.Equals(input.Checksum))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileContents {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FileContents);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Contents != null)
                    hashCode = hashCode * 59 + Contents.GetHashCode();
                if (FileType != null)
                    hashCode = hashCode * 59 + FileType.GetHashCode();
                if (Checksum != null)
                    hashCode = hashCode * 59 + Checksum.GetHashCode();
                return hashCode;
            }
        }
    }
}