/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     The payload for the getEligibleShipmentServices operation.
    /// </summary>
    [DataContract]
    public class GetEligibleShipmentServicesResult : IEquatable<GetEligibleShipmentServicesResult>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="GetEligibleShipmentServicesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetEligibleShipmentServicesResult()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GetEligibleShipmentServicesResult" /> class.
        /// </summary>
        /// <param name="shippingServiceList">A list of shipping services offers. (required).</param>
        /// <param name="rejectedShippingServiceList">rejectedShippingServiceList.</param>
        /// <param name="temporarilyUnavailableCarrierList">temporarilyUnavailableCarrierList.</param>
        /// <param name="termsAndConditionsNotAcceptedCarrierList">termsAndConditionsNotAcceptedCarrierList.</param>
        public GetEligibleShipmentServicesResult(ShippingServiceList shippingServiceList = default,
            RejectedShippingServiceList rejectedShippingServiceList = default,
            TemporarilyUnavailableCarrierList temporarilyUnavailableCarrierList = default,
            TermsAndConditionsNotAcceptedCarrierList termsAndConditionsNotAcceptedCarrierList = default)
        {
            // to ensure "shippingServiceList" is required (not null)
            if (shippingServiceList == null)
                throw new InvalidDataException(
                    "shippingServiceList is a required property for GetEligibleShipmentServicesResult and cannot be null");
            ShippingServiceList = shippingServiceList;
            RejectedShippingServiceList = rejectedShippingServiceList;
            TemporarilyUnavailableCarrierList = temporarilyUnavailableCarrierList;
            TermsAndConditionsNotAcceptedCarrierList = termsAndConditionsNotAcceptedCarrierList;
        }

        /// <summary>
        ///     A list of shipping services offers.
        /// </summary>
        /// <value>A list of shipping services offers.</value>
        [DataMember(Name = "ShippingServiceList", EmitDefaultValue = false)]
        public ShippingServiceList ShippingServiceList { get; set; }

        /// <summary>
        ///     Gets or Sets RejectedShippingServiceList
        /// </summary>
        [DataMember(Name = "RejectedShippingServiceList", EmitDefaultValue = false)]
        public RejectedShippingServiceList RejectedShippingServiceList { get; set; }

        /// <summary>
        ///     Gets or Sets TemporarilyUnavailableCarrierList
        /// </summary>
        [DataMember(Name = "TemporarilyUnavailableCarrierList", EmitDefaultValue = false)]
        public TemporarilyUnavailableCarrierList TemporarilyUnavailableCarrierList { get; set; }

        /// <summary>
        ///     Gets or Sets TermsAndConditionsNotAcceptedCarrierList
        /// </summary>
        [DataMember(Name = "TermsAndConditionsNotAcceptedCarrierList", EmitDefaultValue = false)]
        public TermsAndConditionsNotAcceptedCarrierList TermsAndConditionsNotAcceptedCarrierList { get; set; }

        /// <summary>
        ///     Returns true if GetEligibleShipmentServicesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetEligibleShipmentServicesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetEligibleShipmentServicesResult input)
        {
            if (input == null)
                return false;

            return
                (
                    ShippingServiceList == input.ShippingServiceList ||
                    (ShippingServiceList != null &&
                     ShippingServiceList.Equals(input.ShippingServiceList))
                ) &&
                (
                    RejectedShippingServiceList == input.RejectedShippingServiceList ||
                    (RejectedShippingServiceList != null &&
                     RejectedShippingServiceList.Equals(input.RejectedShippingServiceList))
                ) &&
                (
                    TemporarilyUnavailableCarrierList == input.TemporarilyUnavailableCarrierList ||
                    (TemporarilyUnavailableCarrierList != null &&
                     TemporarilyUnavailableCarrierList.Equals(input.TemporarilyUnavailableCarrierList))
                ) &&
                (
                    TermsAndConditionsNotAcceptedCarrierList == input.TermsAndConditionsNotAcceptedCarrierList ||
                    (TermsAndConditionsNotAcceptedCarrierList != null &&
                     TermsAndConditionsNotAcceptedCarrierList.Equals(input.TermsAndConditionsNotAcceptedCarrierList))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetEligibleShipmentServicesResult {\n");
            sb.Append("  ShippingServiceList: ").Append(ShippingServiceList).Append("\n");
            sb.Append("  RejectedShippingServiceList: ").Append(RejectedShippingServiceList).Append("\n");
            sb.Append("  TemporarilyUnavailableCarrierList: ").Append(TemporarilyUnavailableCarrierList).Append("\n");
            sb.Append("  TermsAndConditionsNotAcceptedCarrierList: ").Append(TermsAndConditionsNotAcceptedCarrierList)
                .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GetEligibleShipmentServicesResult);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ShippingServiceList != null)
                    hashCode = hashCode * 59 + ShippingServiceList.GetHashCode();
                if (RejectedShippingServiceList != null)
                    hashCode = hashCode * 59 + RejectedShippingServiceList.GetHashCode();
                if (TemporarilyUnavailableCarrierList != null)
                    hashCode = hashCode * 59 + TemporarilyUnavailableCarrierList.GetHashCode();
                if (TermsAndConditionsNotAcceptedCarrierList != null)
                    hashCode = hashCode * 59 + TermsAndConditionsNotAcceptedCarrierList.GetHashCode();
                return hashCode;
            }
        }
    }
}