/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     Data for creating a shipping label and dimensions for printing the label.
    /// </summary>
    [DataContract]
    public class Label : IEquatable<Label>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Label()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        /// <param name="customTextForLabel">customTextForLabel.</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="fileContents">fileContents (required).</param>
        /// <param name="labelFormat">labelFormat.</param>
        /// <param name="standardIdForLabel">standardIdForLabel.</param>
        public Label(string customTextForLabel = default, LabelDimensions dimensions = default,
            FileContents fileContents = default, LabelFormat? labelFormat = default,
            StandardIdForLabel? standardIdForLabel = default)
        {
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
                throw new InvalidDataException("dimensions is a required property for Label and cannot be null");
            Dimensions = dimensions;
            // to ensure "fileContents" is required (not null)
            if (fileContents == null)
                throw new InvalidDataException("fileContents is a required property for Label and cannot be null");
            FileContents = fileContents;
            CustomTextForLabel = customTextForLabel;
            LabelFormat = labelFormat;
            StandardIdForLabel = standardIdForLabel;
        }

        /// <summary>
        ///     Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "LabelFormat", EmitDefaultValue = false)]
        public LabelFormat? LabelFormat { get; set; }

        /// <summary>
        ///     Gets or Sets StandardIdForLabel
        /// </summary>
        [DataMember(Name = "StandardIdForLabel", EmitDefaultValue = false)]
        public StandardIdForLabel? StandardIdForLabel { get; set; }

        /// <summary>
        ///     Gets or Sets CustomTextForLabel
        /// </summary>
        [DataMember(Name = "CustomTextForLabel", EmitDefaultValue = false)]
        public string CustomTextForLabel { get; set; }

        /// <summary>
        ///     Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "Dimensions", EmitDefaultValue = false)]
        public LabelDimensions Dimensions { get; set; }

        /// <summary>
        ///     Gets or Sets FileContents
        /// </summary>
        [DataMember(Name = "FileContents", EmitDefaultValue = false)]
        public FileContents FileContents { get; set; }

        /// <summary>
        ///     Returns true if Label instances are equal
        /// </summary>
        /// <param name="input">Instance of Label to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Label input)
        {
            if (input == null)
                return false;

            return
                (
                    CustomTextForLabel == input.CustomTextForLabel ||
                    (CustomTextForLabel != null &&
                     CustomTextForLabel.Equals(input.CustomTextForLabel))
                ) &&
                (
                    Dimensions == input.Dimensions ||
                    (Dimensions != null &&
                     Dimensions.Equals(input.Dimensions))
                ) &&
                (
                    FileContents == input.FileContents ||
                    (FileContents != null &&
                     FileContents.Equals(input.FileContents))
                ) &&
                (
                    LabelFormat == input.LabelFormat ||
                    (LabelFormat != null &&
                     LabelFormat.Equals(input.LabelFormat))
                ) &&
                (
                    StandardIdForLabel == input.StandardIdForLabel ||
                    (StandardIdForLabel != null &&
                     StandardIdForLabel.Equals(input.StandardIdForLabel))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Label {\n");
            sb.Append("  CustomTextForLabel: ").Append(CustomTextForLabel).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  FileContents: ").Append(FileContents).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  StandardIdForLabel: ").Append(StandardIdForLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Label);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CustomTextForLabel != null)
                    hashCode = hashCode * 59 + CustomTextForLabel.GetHashCode();
                if (Dimensions != null)
                    hashCode = hashCode * 59 + Dimensions.GetHashCode();
                if (FileContents != null)
                    hashCode = hashCode * 59 + FileContents.GetHashCode();
                if (LabelFormat != null)
                    hashCode = hashCode * 59 + LabelFormat.GetHashCode();
                if (StandardIdForLabel != null)
                    hashCode = hashCode * 59 + StandardIdForLabel.GetHashCode();
                return hashCode;
            }
        }
    }
}