/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     The postal address information.
    /// </summary>
    [DataContract]
    public class Address : IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Address()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="addressLine1">addressLine1 (required).</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressLine3">addressLine3.</param>
        /// <param name="districtOrCounty">districtOrCounty.</param>
        /// <param name="email">email (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="stateOrProvinceCode">stateOrProvinceCode.</param>
        /// <param name="postalCode">postalCode (required).</param>
        /// <param name="countryCode">countryCode (required).</param>
        /// <param name="phone">phone (required).</param>
        public Address(string name = default, string addressLine1 = default, string addressLine2 = default,
            string addressLine3 = default, string districtOrCounty = default, string email = default,
            string city = default, string stateOrProvinceCode = default, string postalCode = default,
            string countryCode = default, string phone = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
                throw new InvalidDataException("name is a required property for Address and cannot be null");
            Name = name;
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
                throw new InvalidDataException("addressLine1 is a required property for Address and cannot be null");
            AddressLine1 = addressLine1;
            // to ensure "email" is required (not null)
            if (email == null)
                throw new InvalidDataException("email is a required property for Address and cannot be null");
            Email = email;
            // to ensure "city" is required (not null)
            if (city == null)
                throw new InvalidDataException("city is a required property for Address and cannot be null");
            City = city;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
                throw new InvalidDataException("postalCode is a required property for Address and cannot be null");
            PostalCode = postalCode;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
                throw new InvalidDataException("countryCode is a required property for Address and cannot be null");
            CountryCode = countryCode;
            // to ensure "phone" is required (not null)
            if (phone == null)
                throw new InvalidDataException("phone is a required property for Address and cannot be null");
            Phone = phone;
            AddressLine2 = addressLine2;
            AddressLine3 = addressLine3;
            DistrictOrCounty = districtOrCounty;
            StateOrProvinceCode = stateOrProvinceCode;
        }

        /// <summary>
        ///     Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "AddressLine1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        ///     Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "AddressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        ///     Gets or Sets AddressLine3
        /// </summary>
        [DataMember(Name = "AddressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        ///     Gets or Sets DistrictOrCounty
        /// </summary>
        [DataMember(Name = "DistrictOrCounty", EmitDefaultValue = false)]
        public string DistrictOrCounty { get; set; }

        /// <summary>
        ///     Gets or Sets Email
        /// </summary>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        ///     Gets or Sets City
        /// </summary>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        ///     Gets or Sets StateOrProvinceCode
        /// </summary>
        [DataMember(Name = "StateOrProvinceCode", EmitDefaultValue = false)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        ///     Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "PostalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        ///     Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "CountryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        ///     Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "Phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        ///     Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    AddressLine1 == input.AddressLine1 ||
                    (AddressLine1 != null &&
                     AddressLine1.Equals(input.AddressLine1))
                ) &&
                (
                    AddressLine2 == input.AddressLine2 ||
                    (AddressLine2 != null &&
                     AddressLine2.Equals(input.AddressLine2))
                ) &&
                (
                    AddressLine3 == input.AddressLine3 ||
                    (AddressLine3 != null &&
                     AddressLine3.Equals(input.AddressLine3))
                ) &&
                (
                    DistrictOrCounty == input.DistrictOrCounty ||
                    (DistrictOrCounty != null &&
                     DistrictOrCounty.Equals(input.DistrictOrCounty))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    StateOrProvinceCode == input.StateOrProvinceCode ||
                    (StateOrProvinceCode != null &&
                     StateOrProvinceCode.Equals(input.StateOrProvinceCode))
                ) &&
                (
                    PostalCode == input.PostalCode ||
                    (PostalCode != null &&
                     PostalCode.Equals(input.PostalCode))
                ) &&
                (
                    CountryCode == input.CountryCode ||
                    (CountryCode != null &&
                     CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    Phone == input.Phone ||
                    (Phone != null &&
                     Phone.Equals(input.Phone))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  DistrictOrCounty: ").Append(DistrictOrCounty).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateOrProvinceCode: ").Append(StateOrProvinceCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Address);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (AddressLine1 != null)
                    hashCode = hashCode * 59 + AddressLine1.GetHashCode();
                if (AddressLine2 != null)
                    hashCode = hashCode * 59 + AddressLine2.GetHashCode();
                if (AddressLine3 != null)
                    hashCode = hashCode * 59 + AddressLine3.GetHashCode();
                if (DistrictOrCounty != null)
                    hashCode = hashCode * 59 + DistrictOrCounty.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (StateOrProvinceCode != null)
                    hashCode = hashCode * 59 + StateOrProvinceCode.GetHashCode();
                if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                return hashCode;
            }
        }
    }
}