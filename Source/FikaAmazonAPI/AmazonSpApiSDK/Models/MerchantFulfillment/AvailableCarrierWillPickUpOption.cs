/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     Indicates whether the carrier will pick up the package, and what fee is charged, if any.
    /// </summary>
    [DataContract]
    public class AvailableCarrierWillPickUpOption : IEquatable<AvailableCarrierWillPickUpOption>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="AvailableCarrierWillPickUpOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AvailableCarrierWillPickUpOption()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="AvailableCarrierWillPickUpOption" /> class.
        /// </summary>
        /// <param name="carrierWillPickUpOption">carrierWillPickUpOption (required).</param>
        /// <param name="charge">The fee charged. (required).</param>
        public AvailableCarrierWillPickUpOption(CarrierWillPickUpOption carrierWillPickUpOption = default,
            CurrencyAmount charge = default)
        {
            // to ensure "carrierWillPickUpOption" is required (not null)
            if (carrierWillPickUpOption == null)
                throw new InvalidDataException(
                    "carrierWillPickUpOption is a required property for AvailableCarrierWillPickUpOption and cannot be null");
            CarrierWillPickUpOption = carrierWillPickUpOption;
            // to ensure "charge" is required (not null)
            if (charge == null)
                throw new InvalidDataException(
                    "charge is a required property for AvailableCarrierWillPickUpOption and cannot be null");
            Charge = charge;
        }

        /// <summary>
        ///     Gets or Sets CarrierWillPickUpOption
        /// </summary>
        [DataMember(Name = "CarrierWillPickUpOption", EmitDefaultValue = false)]
        public CarrierWillPickUpOption CarrierWillPickUpOption { get; set; }


        /// <summary>
        ///     The fee charged.
        /// </summary>
        /// <value>The fee charged.</value>
        [DataMember(Name = "Charge", EmitDefaultValue = false)]
        public CurrencyAmount Charge { get; set; }

        /// <summary>
        ///     Returns true if AvailableCarrierWillPickUpOption instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableCarrierWillPickUpOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableCarrierWillPickUpOption input)
        {
            if (input == null)
                return false;

            return
                (
                    CarrierWillPickUpOption == input.CarrierWillPickUpOption ||
                    (CarrierWillPickUpOption != null &&
                     CarrierWillPickUpOption.Equals(input.CarrierWillPickUpOption))
                ) &&
                (
                    Charge == input.Charge ||
                    (Charge != null &&
                     Charge.Equals(input.Charge))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableCarrierWillPickUpOption {\n");
            sb.Append("  CarrierWillPickUpOption: ").Append(CarrierWillPickUpOption).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AvailableCarrierWillPickUpOption);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CarrierWillPickUpOption != null)
                    hashCode = hashCode * 59 + CarrierWillPickUpOption.GetHashCode();
                if (Charge != null)
                    hashCode = hashCode * 59 + Charge.GetHashCode();
                return hashCode;
            }
        }
    }
}