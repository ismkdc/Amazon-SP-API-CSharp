/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     The available shipping service options.
    /// </summary>
    [DataContract]
    public class AvailableShippingServiceOptions : IEquatable<AvailableShippingServiceOptions>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="AvailableShippingServiceOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AvailableShippingServiceOptions()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="AvailableShippingServiceOptions" /> class.
        /// </summary>
        /// <param name="availableCarrierWillPickUpOptions">availableCarrierWillPickUpOptions (required).</param>
        /// <param name="availableDeliveryExperienceOptions">availableDeliveryExperienceOptions (required).</param>
        public AvailableShippingServiceOptions(
            AvailableCarrierWillPickUpOptionsList availableCarrierWillPickUpOptions = default,
            AvailableDeliveryExperienceOptionsList availableDeliveryExperienceOptions = default)
        {
            // to ensure "availableCarrierWillPickUpOptions" is required (not null)
            if (availableCarrierWillPickUpOptions == null)
                throw new InvalidDataException(
                    "availableCarrierWillPickUpOptions is a required property for AvailableShippingServiceOptions and cannot be null");
            AvailableCarrierWillPickUpOptions = availableCarrierWillPickUpOptions;
            // to ensure "availableDeliveryExperienceOptions" is required (not null)
            if (availableDeliveryExperienceOptions == null)
                throw new InvalidDataException(
                    "availableDeliveryExperienceOptions is a required property for AvailableShippingServiceOptions and cannot be null");
            AvailableDeliveryExperienceOptions = availableDeliveryExperienceOptions;
        }

        /// <summary>
        ///     Gets or Sets AvailableCarrierWillPickUpOptions
        /// </summary>
        [DataMember(Name = "AvailableCarrierWillPickUpOptions", EmitDefaultValue = false)]
        public AvailableCarrierWillPickUpOptionsList AvailableCarrierWillPickUpOptions { get; set; }

        /// <summary>
        ///     Gets or Sets AvailableDeliveryExperienceOptions
        /// </summary>
        [DataMember(Name = "AvailableDeliveryExperienceOptions", EmitDefaultValue = false)]
        public AvailableDeliveryExperienceOptionsList AvailableDeliveryExperienceOptions { get; set; }

        /// <summary>
        ///     Returns true if AvailableShippingServiceOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableShippingServiceOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableShippingServiceOptions input)
        {
            if (input == null)
                return false;

            return
                (
                    AvailableCarrierWillPickUpOptions == input.AvailableCarrierWillPickUpOptions ||
                    (AvailableCarrierWillPickUpOptions != null &&
                     AvailableCarrierWillPickUpOptions.Equals(input.AvailableCarrierWillPickUpOptions))
                ) &&
                (
                    AvailableDeliveryExperienceOptions == input.AvailableDeliveryExperienceOptions ||
                    (AvailableDeliveryExperienceOptions != null &&
                     AvailableDeliveryExperienceOptions.Equals(input.AvailableDeliveryExperienceOptions))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableShippingServiceOptions {\n");
            sb.Append("  AvailableCarrierWillPickUpOptions: ").Append(AvailableCarrierWillPickUpOptions).Append("\n");
            sb.Append("  AvailableDeliveryExperienceOptions: ").Append(AvailableDeliveryExperienceOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AvailableShippingServiceOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (AvailableCarrierWillPickUpOptions != null)
                    hashCode = hashCode * 59 + AvailableCarrierWillPickUpOptions.GetHashCode();
                if (AvailableDeliveryExperienceOptions != null)
                    hashCode = hashCode * 59 + AvailableDeliveryExperienceOptions.GetHashCode();
                return hashCode;
            }
        }
    }
}