/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    ///     Currency type and amount.
    /// </summary>
    [DataContract]
    public class CurrencyAmount : IEquatable<CurrencyAmount>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CurrencyAmount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CurrencyAmount()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CurrencyAmount" /> class.
        /// </summary>
        /// <param name="currencyCode">Three-digit currency code in ISO 4217 format. (required).</param>
        /// <param name="amount">The currency amount. (required).</param>
        public CurrencyAmount(string currencyCode = default, double? amount = default)
        {
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
                throw new InvalidDataException(
                    "currencyCode is a required property for CurrencyAmount and cannot be null");
            CurrencyCode = currencyCode;
            // to ensure "amount" is required (not null)
            if (amount == null)
                throw new InvalidDataException("amount is a required property for CurrencyAmount and cannot be null");
            Amount = amount;
        }

        /// <summary>
        ///     Three-digit currency code in ISO 4217 format.
        /// </summary>
        /// <value>Three-digit currency code in ISO 4217 format.</value>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        ///     The currency amount.
        /// </summary>
        /// <value>The currency amount.</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double? Amount { get; set; }

        /// <summary>
        ///     Returns true if CurrencyAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyAmount input)
        {
            if (input == null)
                return false;

            return
                (
                    CurrencyCode == input.CurrencyCode ||
                    (CurrencyCode != null &&
                     CurrencyCode.Equals(input.CurrencyCode))
                ) &&
                (
                    Amount == input.Amount ||
                    (Amount != null &&
                     Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) maxLength
            if (CurrencyCode != null && CurrencyCode.Length > 3)
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be less than 3.",
                    new[] { "CurrencyCode" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyAmount {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CurrencyAmount);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CurrencyCode != null)
                    hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
                if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                return hashCode;
            }
        }
    }
}