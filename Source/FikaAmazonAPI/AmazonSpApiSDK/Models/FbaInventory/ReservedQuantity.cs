/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaInventory
{
    /// <summary>
    ///     The quantity of reserved inventory.
    /// </summary>
    [DataContract]
    public class ReservedQuantity : IEquatable<ReservedQuantity>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ReservedQuantity" /> class.
        /// </summary>
        /// <param name="TotalReservedQuantity">
        ///     The total number of units in Amazon&#39;s fulfillment network that are currently
        ///     being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes..
        /// </param>
        /// <param name="PendingCustomerOrderQuantity">The number of units reserved for customer orders..</param>
        /// <param name="PendingTransshipmentQuantity">
        ///     The number of units being transferred from one fulfillment center to
        ///     another..
        /// </param>
        /// <param name="FcProcessingQuantity">
        ///     The number of units that have been sidelined at the fulfillment center for
        ///     additional processing..
        /// </param>
        public ReservedQuantity(int? TotalReservedQuantity = default, int? PendingCustomerOrderQuantity = default,
            int? PendingTransshipmentQuantity = default, int? FcProcessingQuantity = default)
        {
            this.TotalReservedQuantity = TotalReservedQuantity;
            this.PendingCustomerOrderQuantity = PendingCustomerOrderQuantity;
            this.PendingTransshipmentQuantity = PendingTransshipmentQuantity;
            this.FcProcessingQuantity = FcProcessingQuantity;
        }

        /// <summary>
        ///     The total number of units in Amazon&#39;s fulfillment network that are currently being picked, packed, and shipped;
        ///     or are sidelined for measurement, sampling, or other internal processes.
        /// </summary>
        /// <value>
        ///     The total number of units in Amazon&#39;s fulfillment network that are currently being picked, packed, and
        ///     shipped; or are sidelined for measurement, sampling, or other internal processes.
        /// </value>
        [DataMember(Name = "totalReservedQuantity", EmitDefaultValue = false)]
        public int? TotalReservedQuantity { get; set; }

        /// <summary>
        ///     The number of units reserved for customer orders.
        /// </summary>
        /// <value>The number of units reserved for customer orders.</value>
        [DataMember(Name = "pendingCustomerOrderQuantity", EmitDefaultValue = false)]
        public int? PendingCustomerOrderQuantity { get; set; }

        /// <summary>
        ///     The number of units being transferred from one fulfillment center to another.
        /// </summary>
        /// <value>The number of units being transferred from one fulfillment center to another.</value>
        [DataMember(Name = "pendingTransshipmentQuantity", EmitDefaultValue = false)]
        public int? PendingTransshipmentQuantity { get; set; }

        /// <summary>
        ///     The number of units that have been sidelined at the fulfillment center for additional processing.
        /// </summary>
        /// <value>The number of units that have been sidelined at the fulfillment center for additional processing.</value>
        [DataMember(Name = "fcProcessingQuantity", EmitDefaultValue = false)]
        public int? FcProcessingQuantity { get; set; }

        /// <summary>
        ///     Returns true if ReservedQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of ReservedQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReservedQuantity input)
        {
            if (input == null)
                return false;

            return
                (
                    TotalReservedQuantity == input.TotalReservedQuantity ||
                    (TotalReservedQuantity != null &&
                     TotalReservedQuantity.Equals(input.TotalReservedQuantity))
                ) &&
                (
                    PendingCustomerOrderQuantity == input.PendingCustomerOrderQuantity ||
                    (PendingCustomerOrderQuantity != null &&
                     PendingCustomerOrderQuantity.Equals(input.PendingCustomerOrderQuantity))
                ) &&
                (
                    PendingTransshipmentQuantity == input.PendingTransshipmentQuantity ||
                    (PendingTransshipmentQuantity != null &&
                     PendingTransshipmentQuantity.Equals(input.PendingTransshipmentQuantity))
                ) &&
                (
                    FcProcessingQuantity == input.FcProcessingQuantity ||
                    (FcProcessingQuantity != null &&
                     FcProcessingQuantity.Equals(input.FcProcessingQuantity))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReservedQuantity {\n");
            sb.Append("  TotalReservedQuantity: ").Append(TotalReservedQuantity).Append("\n");
            sb.Append("  PendingCustomerOrderQuantity: ").Append(PendingCustomerOrderQuantity).Append("\n");
            sb.Append("  PendingTransshipmentQuantity: ").Append(PendingTransshipmentQuantity).Append("\n");
            sb.Append("  FcProcessingQuantity: ").Append(FcProcessingQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReservedQuantity);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (TotalReservedQuantity != null)
                    hashCode = hashCode * 59 + TotalReservedQuantity.GetHashCode();
                if (PendingCustomerOrderQuantity != null)
                    hashCode = hashCode * 59 + PendingCustomerOrderQuantity.GetHashCode();
                if (PendingTransshipmentQuantity != null)
                    hashCode = hashCode * 59 + PendingTransshipmentQuantity.GetHashCode();
                if (FcProcessingQuantity != null)
                    hashCode = hashCode * 59 + FcProcessingQuantity.GetHashCode();
                return hashCode;
            }
        }
    }
}