/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaInventory
{
    /// <summary>
    ///     The quantity of unfulfillable inventory.
    /// </summary>
    [DataContract]
    public class UnfulfillableQuantity : IEquatable<UnfulfillableQuantity>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="UnfulfillableQuantity" /> class.
        /// </summary>
        /// <param name="TotalUnfulfillableQuantity">
        ///     The total number of units in Amazon&#39;s fulfillment network in unsellable
        ///     condition..
        /// </param>
        /// <param name="CustomerDamagedQuantity">The number of units in customer damaged disposition..</param>
        /// <param name="WarehouseDamagedQuantity">The number of units in warehouse damaged disposition..</param>
        /// <param name="DistributorDamagedQuantity">The number of units in distributor damaged disposition..</param>
        /// <param name="CarrierDamagedQuantity">The number of units in carrier damaged disposition..</param>
        /// <param name="DefectiveQuantity">The number of units in defective disposition..</param>
        /// <param name="ExpiredQuantity">The number of units in expired disposition..</param>
        public UnfulfillableQuantity(int? TotalUnfulfillableQuantity = default, int? CustomerDamagedQuantity = default,
            int? WarehouseDamagedQuantity = default, int? DistributorDamagedQuantity = default,
            int? CarrierDamagedQuantity = default, int? DefectiveQuantity = default, int? ExpiredQuantity = default)
        {
            this.TotalUnfulfillableQuantity = TotalUnfulfillableQuantity;
            this.CustomerDamagedQuantity = CustomerDamagedQuantity;
            this.WarehouseDamagedQuantity = WarehouseDamagedQuantity;
            this.DistributorDamagedQuantity = DistributorDamagedQuantity;
            this.CarrierDamagedQuantity = CarrierDamagedQuantity;
            this.DefectiveQuantity = DefectiveQuantity;
            this.ExpiredQuantity = ExpiredQuantity;
        }

        /// <summary>
        ///     The total number of units in Amazon&#39;s fulfillment network in unsellable condition.
        /// </summary>
        /// <value>The total number of units in Amazon&#39;s fulfillment network in unsellable condition.</value>
        [DataMember(Name = "totalUnfulfillableQuantity", EmitDefaultValue = false)]
        public int? TotalUnfulfillableQuantity { get; set; }

        /// <summary>
        ///     The number of units in customer damaged disposition.
        /// </summary>
        /// <value>The number of units in customer damaged disposition.</value>
        [DataMember(Name = "customerDamagedQuantity", EmitDefaultValue = false)]
        public int? CustomerDamagedQuantity { get; set; }

        /// <summary>
        ///     The number of units in warehouse damaged disposition.
        /// </summary>
        /// <value>The number of units in warehouse damaged disposition.</value>
        [DataMember(Name = "warehouseDamagedQuantity", EmitDefaultValue = false)]
        public int? WarehouseDamagedQuantity { get; set; }

        /// <summary>
        ///     The number of units in distributor damaged disposition.
        /// </summary>
        /// <value>The number of units in distributor damaged disposition.</value>
        [DataMember(Name = "distributorDamagedQuantity", EmitDefaultValue = false)]
        public int? DistributorDamagedQuantity { get; set; }

        /// <summary>
        ///     The number of units in carrier damaged disposition.
        /// </summary>
        /// <value>The number of units in carrier damaged disposition.</value>
        [DataMember(Name = "carrierDamagedQuantity", EmitDefaultValue = false)]
        public int? CarrierDamagedQuantity { get; set; }

        /// <summary>
        ///     The number of units in defective disposition.
        /// </summary>
        /// <value>The number of units in defective disposition.</value>
        [DataMember(Name = "defectiveQuantity", EmitDefaultValue = false)]
        public int? DefectiveQuantity { get; set; }

        /// <summary>
        ///     The number of units in expired disposition.
        /// </summary>
        /// <value>The number of units in expired disposition.</value>
        [DataMember(Name = "expiredQuantity", EmitDefaultValue = false)]
        public int? ExpiredQuantity { get; set; }

        /// <summary>
        ///     Returns true if UnfulfillableQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of UnfulfillableQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnfulfillableQuantity input)
        {
            if (input == null)
                return false;

            return
                (
                    TotalUnfulfillableQuantity == input.TotalUnfulfillableQuantity ||
                    (TotalUnfulfillableQuantity != null &&
                     TotalUnfulfillableQuantity.Equals(input.TotalUnfulfillableQuantity))
                ) &&
                (
                    CustomerDamagedQuantity == input.CustomerDamagedQuantity ||
                    (CustomerDamagedQuantity != null &&
                     CustomerDamagedQuantity.Equals(input.CustomerDamagedQuantity))
                ) &&
                (
                    WarehouseDamagedQuantity == input.WarehouseDamagedQuantity ||
                    (WarehouseDamagedQuantity != null &&
                     WarehouseDamagedQuantity.Equals(input.WarehouseDamagedQuantity))
                ) &&
                (
                    DistributorDamagedQuantity == input.DistributorDamagedQuantity ||
                    (DistributorDamagedQuantity != null &&
                     DistributorDamagedQuantity.Equals(input.DistributorDamagedQuantity))
                ) &&
                (
                    CarrierDamagedQuantity == input.CarrierDamagedQuantity ||
                    (CarrierDamagedQuantity != null &&
                     CarrierDamagedQuantity.Equals(input.CarrierDamagedQuantity))
                ) &&
                (
                    DefectiveQuantity == input.DefectiveQuantity ||
                    (DefectiveQuantity != null &&
                     DefectiveQuantity.Equals(input.DefectiveQuantity))
                ) &&
                (
                    ExpiredQuantity == input.ExpiredQuantity ||
                    (ExpiredQuantity != null &&
                     ExpiredQuantity.Equals(input.ExpiredQuantity))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnfulfillableQuantity {\n");
            sb.Append("  TotalUnfulfillableQuantity: ").Append(TotalUnfulfillableQuantity).Append("\n");
            sb.Append("  CustomerDamagedQuantity: ").Append(CustomerDamagedQuantity).Append("\n");
            sb.Append("  WarehouseDamagedQuantity: ").Append(WarehouseDamagedQuantity).Append("\n");
            sb.Append("  DistributorDamagedQuantity: ").Append(DistributorDamagedQuantity).Append("\n");
            sb.Append("  CarrierDamagedQuantity: ").Append(CarrierDamagedQuantity).Append("\n");
            sb.Append("  DefectiveQuantity: ").Append(DefectiveQuantity).Append("\n");
            sb.Append("  ExpiredQuantity: ").Append(ExpiredQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UnfulfillableQuantity);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (TotalUnfulfillableQuantity != null)
                    hashCode = hashCode * 59 + TotalUnfulfillableQuantity.GetHashCode();
                if (CustomerDamagedQuantity != null)
                    hashCode = hashCode * 59 + CustomerDamagedQuantity.GetHashCode();
                if (WarehouseDamagedQuantity != null)
                    hashCode = hashCode * 59 + WarehouseDamagedQuantity.GetHashCode();
                if (DistributorDamagedQuantity != null)
                    hashCode = hashCode * 59 + DistributorDamagedQuantity.GetHashCode();
                if (CarrierDamagedQuantity != null)
                    hashCode = hashCode * 59 + CarrierDamagedQuantity.GetHashCode();
                if (DefectiveQuantity != null)
                    hashCode = hashCode * 59 + DefectiveQuantity.GetHashCode();
                if (ExpiredQuantity != null)
                    hashCode = hashCode * 59 + ExpiredQuantity.GetHashCode();
                return hashCode;
            }
        }
    }
}