/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaInventory
{
    /// <summary>
    ///     Summarized inventory details. This object will not appear if the details parameter in the request is false.
    /// </summary>
    [DataContract]
    public class InventoryDetails : IEquatable<InventoryDetails>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InventoryDetails" /> class.
        /// </summary>
        /// <param name="FulfillableQuantity">The item quantity that can be picked, packed, and shipped..</param>
        /// <param name="InboundWorkingQuantity">The number of units in an inbound shipment for which you have notified Amazon..</param>
        /// <param name="InboundShippedQuantity">
        ///     The number of units in an inbound shipment that you have notified Amazon about and
        ///     have provided a tracking number..
        /// </param>
        /// <param name="InboundReceivingQuantity">
        ///     The number of units that have not yet been received at an Amazon fulfillment
        ///     center for processing, but are part of an inbound shipment with some units that have already been received and
        ///     processed..
        /// </param>
        /// <param name="ReservedQuantity">ReservedQuantity.</param>
        /// <param name="ResearchingQuantity">ResearchingQuantity.</param>
        /// <param name="UnfulfillableQuantity">UnfulfillableQuantity.</param>
        /// <param name="FutureSupplyQuantity">FutureSupplyQuantity.</param>
        public InventoryDetails(int? FulfillableQuantity = default, int? InboundWorkingQuantity = default,
            int? InboundShippedQuantity = default, int? InboundReceivingQuantity = default,
            ReservedQuantity ReservedQuantity = default, ResearchingQuantity ResearchingQuantity = default,
            UnfulfillableQuantity UnfulfillableQuantity = default, FutureSupplyQuantity FutureSupplyQuantity = default)
        {
            this.FulfillableQuantity = FulfillableQuantity;
            this.InboundWorkingQuantity = InboundWorkingQuantity;
            this.InboundShippedQuantity = InboundShippedQuantity;
            this.InboundReceivingQuantity = InboundReceivingQuantity;
            this.ReservedQuantity = ReservedQuantity;
            this.ResearchingQuantity = ResearchingQuantity;
            this.UnfulfillableQuantity = UnfulfillableQuantity;
            this.FutureSupplyQuantity = FutureSupplyQuantity;
        }

        /// <summary>
        ///     The item quantity that can be picked, packed, and shipped.
        /// </summary>
        /// <value>The item quantity that can be picked, packed, and shipped.</value>
        [DataMember(Name = "fulfillableQuantity", EmitDefaultValue = false)]
        public int? FulfillableQuantity { get; set; }

        /// <summary>
        ///     The number of units in an inbound shipment for which you have notified Amazon.
        /// </summary>
        /// <value>The number of units in an inbound shipment for which you have notified Amazon.</value>
        [DataMember(Name = "inboundWorkingQuantity", EmitDefaultValue = false)]
        public int? InboundWorkingQuantity { get; set; }

        /// <summary>
        ///     The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.
        /// </summary>
        /// <value>
        ///     The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking
        ///     number.
        /// </value>
        [DataMember(Name = "inboundShippedQuantity", EmitDefaultValue = false)]
        public int? InboundShippedQuantity { get; set; }

        /// <summary>
        ///     The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of
        ///     an inbound shipment with some units that have already been received and processed.
        /// </summary>
        /// <value>
        ///     The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part
        ///     of an inbound shipment with some units that have already been received and processed.
        /// </value>
        [DataMember(Name = "inboundReceivingQuantity", EmitDefaultValue = false)]
        public int? InboundReceivingQuantity { get; set; }

        /// <summary>
        ///     Gets or Sets ReservedQuantity
        /// </summary>
        [DataMember(Name = "reservedQuantity", EmitDefaultValue = false)]
        public ReservedQuantity ReservedQuantity { get; set; }

        /// <summary>
        ///     Gets or Sets ResearchingQuantity
        /// </summary>
        [DataMember(Name = "researchingQuantity", EmitDefaultValue = false)]
        public ResearchingQuantity ResearchingQuantity { get; set; }

        /// <summary>
        ///     Gets or Sets UnfulfillableQuantity
        /// </summary>
        [DataMember(Name = "unfulfillableQuantity", EmitDefaultValue = false)]
        public UnfulfillableQuantity UnfulfillableQuantity { get; set; }

        /// <summary>
        ///     Gets or Sets FutureSupplyQuantity
        /// </summary>
        [DataMember(Name = "futureSupplyQuantity", EmitDefaultValue = false)]
        public FutureSupplyQuantity FutureSupplyQuantity { get; set; }

        /// <summary>
        ///     Returns true if InventoryDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    FulfillableQuantity == input.FulfillableQuantity ||
                    (FulfillableQuantity != null &&
                     FulfillableQuantity.Equals(input.FulfillableQuantity))
                ) &&
                (
                    InboundWorkingQuantity == input.InboundWorkingQuantity ||
                    (InboundWorkingQuantity != null &&
                     InboundWorkingQuantity.Equals(input.InboundWorkingQuantity))
                ) &&
                (
                    InboundShippedQuantity == input.InboundShippedQuantity ||
                    (InboundShippedQuantity != null &&
                     InboundShippedQuantity.Equals(input.InboundShippedQuantity))
                ) &&
                (
                    InboundReceivingQuantity == input.InboundReceivingQuantity ||
                    (InboundReceivingQuantity != null &&
                     InboundReceivingQuantity.Equals(input.InboundReceivingQuantity))
                ) &&
                (
                    ReservedQuantity == input.ReservedQuantity ||
                    (ReservedQuantity != null &&
                     ReservedQuantity.Equals(input.ReservedQuantity))
                ) &&
                (
                    ResearchingQuantity == input.ResearchingQuantity ||
                    (ResearchingQuantity != null &&
                     ResearchingQuantity.Equals(input.ResearchingQuantity))
                ) &&
                (
                    UnfulfillableQuantity == input.UnfulfillableQuantity ||
                    (UnfulfillableQuantity != null &&
                     UnfulfillableQuantity.Equals(input.UnfulfillableQuantity))
                ) &&
                (
                    FutureSupplyQuantity == input.FutureSupplyQuantity ||
                    (FutureSupplyQuantity != null &&
                     FutureSupplyQuantity.Equals(input.FutureSupplyQuantity))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryDetails {\n");
            sb.Append("  FulfillableQuantity: ").Append(FulfillableQuantity).Append("\n");
            sb.Append("  InboundWorkingQuantity: ").Append(InboundWorkingQuantity).Append("\n");
            sb.Append("  InboundShippedQuantity: ").Append(InboundShippedQuantity).Append("\n");
            sb.Append("  InboundReceivingQuantity: ").Append(InboundReceivingQuantity).Append("\n");
            sb.Append("  ReservedQuantity: ").Append(ReservedQuantity).Append("\n");
            sb.Append("  ResearchingQuantity: ").Append(ResearchingQuantity).Append("\n");
            sb.Append("  UnfulfillableQuantity: ").Append(UnfulfillableQuantity).Append("\n");
            sb.Append("  FutureSupplyQuantity: ").Append(FutureSupplyQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InventoryDetails);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (FulfillableQuantity != null)
                    hashCode = hashCode * 59 + FulfillableQuantity.GetHashCode();
                if (InboundWorkingQuantity != null)
                    hashCode = hashCode * 59 + InboundWorkingQuantity.GetHashCode();
                if (InboundShippedQuantity != null)
                    hashCode = hashCode * 59 + InboundShippedQuantity.GetHashCode();
                if (InboundReceivingQuantity != null)
                    hashCode = hashCode * 59 + InboundReceivingQuantity.GetHashCode();
                if (ReservedQuantity != null)
                    hashCode = hashCode * 59 + ReservedQuantity.GetHashCode();
                if (ResearchingQuantity != null)
                    hashCode = hashCode * 59 + ResearchingQuantity.GetHashCode();
                if (UnfulfillableQuantity != null)
                    hashCode = hashCode * 59 + UnfulfillableQuantity.GetHashCode();
                if (FutureSupplyQuantity != null)
                    hashCode = hashCode * 59 + FutureSupplyQuantity.GetHashCode();
                return hashCode;
            }
        }
    }
}