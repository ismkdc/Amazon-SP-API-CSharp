/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaInventory
{
    /// <summary>
    ///     The misplaced or warehouse damaged inventory that is actively being confirmed at our fulfillment centers.
    /// </summary>
    [DataContract]
    public class ResearchingQuantityEntry : IEquatable<ResearchingQuantityEntry>, IValidatableObject
    {
        /// <summary>
        ///     The duration of the research.
        /// </summary>
        /// <value>The duration of the research.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            ///     Enum ResearchingQuantityInShortTerm for value: researchingQuantityInShortTerm
            /// </summary>
            [EnumMember(Value = "researchingQuantityInShortTerm")]
            ResearchingQuantityInShortTerm = 1,

            /// <summary>
            ///     Enum ResearchingQuantityInMidTerm for value: researchingQuantityInMidTerm
            /// </summary>
            [EnumMember(Value = "researchingQuantityInMidTerm")]
            ResearchingQuantityInMidTerm = 2,

            /// <summary>
            ///     Enum ResearchingQuantityInLongTerm for value: researchingQuantityInLongTerm
            /// </summary>
            [EnumMember(Value = "researchingQuantityInLongTerm")]
            ResearchingQuantityInLongTerm = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ResearchingQuantityEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ResearchingQuantityEntry()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ResearchingQuantityEntry" /> class.
        /// </summary>
        /// <param name="Name">The duration of the research. (required).</param>
        /// <param name="Quantity">The number of units. (required).</param>
        public ResearchingQuantityEntry(NameEnum Name = default, int? Quantity = default)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
                throw new InvalidDataException(
                    "Name is a required property for ResearchingQuantityEntry and cannot be null");
            this.Name = Name;
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
                throw new InvalidDataException(
                    "Quantity is a required property for ResearchingQuantityEntry and cannot be null");
            this.Quantity = Quantity;
        }

        /// <summary>
        ///     The duration of the research.
        /// </summary>
        /// <value>The duration of the research.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public NameEnum Name { get; set; }


        /// <summary>
        ///     The number of units.
        /// </summary>
        /// <value>The number of units.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     Returns true if ResearchingQuantityEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ResearchingQuantityEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResearchingQuantityEntry input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResearchingQuantityEntry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ResearchingQuantityEntry);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                return hashCode;
            }
        }
    }
}