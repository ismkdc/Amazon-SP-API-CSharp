/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaInventory
{
    /// <summary>
    ///     Describes a granularity at which inventory data can be aggregated. For example, if you use Marketplace granularity,
    ///     the fulfillable quantity will reflect inventory that could be fulfilled in the given marketplace.
    /// </summary>
    [DataContract]
    public class Granularity : IEquatable<Granularity>, IValidatableObject
    {
        /// <summary>
        ///     The granularity type for the inventory aggregation level.
        /// </summary>
        /// <value>The granularity type for the inventory aggregation level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GranularityTypeEnum
        {
            /// <summary>
            ///     Enum Marketplace for value: Marketplace
            /// </summary>
            [EnumMember(Value = "Marketplace")] Marketplace = 1
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Granularity" /> class.
        /// </summary>
        /// <param name="GranularityType">The granularity type for the inventory aggregation level..</param>
        /// <param name="GranularityId">
        ///     The granularity ID for the specified granularity type. When granularityType is Marketplace,
        ///     specify the marketplaceId..
        /// </param>
        public Granularity(GranularityTypeEnum? GranularityType = default, string GranularityId = default)
        {
            this.GranularityType = GranularityType;
            this.GranularityId = GranularityId;
        }

        /// <summary>
        ///     The granularity type for the inventory aggregation level.
        /// </summary>
        /// <value>The granularity type for the inventory aggregation level.</value>
        [DataMember(Name = "granularityType", EmitDefaultValue = false)]
        public GranularityTypeEnum? GranularityType { get; set; }


        /// <summary>
        ///     The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the
        ///     marketplaceId.
        /// </summary>
        /// <value>
        ///     The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the
        ///     marketplaceId.
        /// </value>
        [DataMember(Name = "granularityId", EmitDefaultValue = false)]
        public string GranularityId { get; set; }

        /// <summary>
        ///     Returns true if Granularity instances are equal
        /// </summary>
        /// <param name="input">Instance of Granularity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Granularity input)
        {
            if (input == null)
                return false;

            return
                (
                    GranularityType == input.GranularityType ||
                    (GranularityType != null &&
                     GranularityType.Equals(input.GranularityType))
                ) &&
                (
                    GranularityId == input.GranularityId ||
                    (GranularityId != null &&
                     GranularityId.Equals(input.GranularityId))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Granularity {\n");
            sb.Append("  GranularityType: ").Append(GranularityType).Append("\n");
            sb.Append("  GranularityId: ").Append(GranularityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Granularity);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (GranularityType != null)
                    hashCode = hashCode * 59 + GranularityType.GetHashCode();
                if (GranularityId != null)
                    hashCode = hashCode * 59 + GranularityId.GetHashCode();
                return hashCode;
            }
        }
    }
}