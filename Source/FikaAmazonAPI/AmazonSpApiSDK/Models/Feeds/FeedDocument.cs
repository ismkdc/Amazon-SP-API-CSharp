/*
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2020-09-04
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Feeds
{
    /// <summary>
    ///     FeedDocument
    /// </summary>
    [DataContract]
    public class FeedDocument : IEquatable<FeedDocument>, IValidatableObject
    {
        /// <summary>
        ///     If present, the feed document contents are compressed using the indicated algorithm.
        /// </summary>
        /// <value>If present, the feed document contents are compressed using the indicated algorithm.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompressionAlgorithmEnum
        {
            /// <summary>
            ///     Enum GZIP for value: GZIP
            /// </summary>
            [EnumMember(Value = "GZIP")] GZIP = 1
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FeedDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FeedDocument()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FeedDocument" /> class.
        /// </summary>
        /// <param name="FeedDocumentId">
        ///     The identifier for the feed document. This identifier is unique only in combination with a
        ///     seller ID. (required).
        /// </param>
        /// <param name="Url">A presigned URL for the feed document. This URL expires after 5 minutes. (required).</param>
        /// <param name="EncryptionDetails">EncryptionDetails (required).</param>
        /// <param name="CompressionAlgorithm">
        ///     If present, the feed document contents are compressed using the indicated
        ///     algorithm..
        /// </param>
        public FeedDocument(string FeedDocumentId = default, string Url = default,
            FeedDocumentEncryptionDetails EncryptionDetails = default,
            CompressionAlgorithmEnum? CompressionAlgorithm = default)
        {
            // to ensure "FeedDocumentId" is required (not null)
            if (FeedDocumentId == null)
                throw new InvalidDataException(
                    "FeedDocumentId is a required property for FeedDocument and cannot be null");
            this.FeedDocumentId = FeedDocumentId;
            // to ensure "Url" is required (not null)
            if (Url == null)
                throw new InvalidDataException("Url is a required property for FeedDocument and cannot be null");
            this.Url = Url;
            // to ensure "EncryptionDetails" is required (not null)
            if (EncryptionDetails == null)
                throw new InvalidDataException(
                    "EncryptionDetails is a required property for FeedDocument and cannot be null");
            this.EncryptionDetails = EncryptionDetails;
            this.CompressionAlgorithm = CompressionAlgorithm;
        }

        /// <summary>
        ///     If present, the feed document contents are compressed using the indicated algorithm.
        /// </summary>
        /// <value>If present, the feed document contents are compressed using the indicated algorithm.</value>
        [DataMember(Name = "compressionAlgorithm", EmitDefaultValue = false)]
        public CompressionAlgorithmEnum? CompressionAlgorithm { get; set; }

        /// <summary>
        ///     The identifier for the feed document. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed document. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "feedDocumentId", EmitDefaultValue = false)]
        public string FeedDocumentId { get; set; }

        /// <summary>
        ///     A presigned URL for the feed document. This URL expires after 5 minutes.
        /// </summary>
        /// <value>A presigned URL for the feed document. This URL expires after 5 minutes.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        ///     Gets or Sets EncryptionDetails
        /// </summary>
        [DataMember(Name = "encryptionDetails", EmitDefaultValue = false)]
        public FeedDocumentEncryptionDetails EncryptionDetails { get; set; }

        /// <summary>
        ///     Returns true if FeedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of FeedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedDocument input)
        {
            if (input == null)
                return false;

            return
                (
                    FeedDocumentId == input.FeedDocumentId ||
                    (FeedDocumentId != null &&
                     FeedDocumentId.Equals(input.FeedDocumentId))
                ) &&
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                ) &&
                (
                    EncryptionDetails == input.EncryptionDetails ||
                    (EncryptionDetails != null &&
                     EncryptionDetails.Equals(input.EncryptionDetails))
                ) &&
                (
                    CompressionAlgorithm == input.CompressionAlgorithm ||
                    (CompressionAlgorithm != null &&
                     CompressionAlgorithm.Equals(input.CompressionAlgorithm))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedDocument {\n");
            sb.Append("  FeedDocumentId: ").Append(FeedDocumentId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EncryptionDetails: ").Append(EncryptionDetails).Append("\n");
            sb.Append("  CompressionAlgorithm: ").Append(CompressionAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FeedDocument);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (FeedDocumentId != null)
                    hashCode = hashCode * 59 + FeedDocumentId.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (EncryptionDetails != null)
                    hashCode = hashCode * 59 + EncryptionDetails.GetHashCode();
                if (CompressionAlgorithm != null)
                    hashCode = hashCode * 59 + CompressionAlgorithm.GetHashCode();
                return hashCode;
            }
        }
    }
}