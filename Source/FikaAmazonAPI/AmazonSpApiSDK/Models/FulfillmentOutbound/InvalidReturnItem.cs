/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     An item that is invalid for return.
    /// </summary>
    [DataContract]
    public class InvalidReturnItem : IEquatable<InvalidReturnItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InvalidReturnItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InvalidReturnItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InvalidReturnItem" /> class.
        /// </summary>
        /// <param name="SellerReturnItemId">An identifier assigned by the seller to the return item. (required).</param>
        /// <param name="SellerFulfillmentOrderItemId">
        ///     The identifier assigned to the item by the seller when the fulfillment order
        ///     was created. (required).
        /// </param>
        /// <param name="InvalidItemReason">InvalidItemReason (required).</param>
        public InvalidReturnItem(string SellerReturnItemId = default, string SellerFulfillmentOrderItemId = default,
            InvalidItemReason InvalidItemReason = default)
        {
            // to ensure "SellerReturnItemId" is required (not null)
            if (SellerReturnItemId == null)
                throw new InvalidDataException(
                    "SellerReturnItemId is a required property for InvalidReturnItem and cannot be null");
            this.SellerReturnItemId = SellerReturnItemId;
            // to ensure "SellerFulfillmentOrderItemId" is required (not null)
            if (SellerFulfillmentOrderItemId == null)
                throw new InvalidDataException(
                    "SellerFulfillmentOrderItemId is a required property for InvalidReturnItem and cannot be null");
            this.SellerFulfillmentOrderItemId = SellerFulfillmentOrderItemId;
            // to ensure "InvalidItemReason" is required (not null)
            if (InvalidItemReason == null)
                throw new InvalidDataException(
                    "InvalidItemReason is a required property for InvalidReturnItem and cannot be null");
            this.InvalidItemReason = InvalidItemReason;
        }

        /// <summary>
        ///     An identifier assigned by the seller to the return item.
        /// </summary>
        /// <value>An identifier assigned by the seller to the return item.</value>
        [DataMember(Name = "SellerReturnItemId", EmitDefaultValue = false)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        ///     The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        /// <value>The identifier assigned to the item by the seller when the fulfillment order was created.</value>
        [DataMember(Name = "SellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        ///     Gets or Sets InvalidItemReason
        /// </summary>
        [DataMember(Name = "InvalidItemReason", EmitDefaultValue = false)]
        public InvalidItemReason InvalidItemReason { get; set; }

        /// <summary>
        ///     Returns true if InvalidReturnItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InvalidReturnItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvalidReturnItem input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerReturnItemId == input.SellerReturnItemId ||
                    (SellerReturnItemId != null &&
                     SellerReturnItemId.Equals(input.SellerReturnItemId))
                ) &&
                (
                    SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (SellerFulfillmentOrderItemId != null &&
                     SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    InvalidItemReason == input.InvalidItemReason ||
                    (InvalidItemReason != null &&
                     InvalidItemReason.Equals(input.InvalidItemReason))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvalidReturnItem {\n");
            sb.Append("  SellerReturnItemId: ").Append(SellerReturnItemId).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  InvalidItemReason: ").Append(InvalidItemReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InvalidReturnItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerReturnItemId != null)
                    hashCode = hashCode * 59 + SellerReturnItemId.GetHashCode();
                if (SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + SellerFulfillmentOrderItemId.GetHashCode();
                if (InvalidItemReason != null)
                    hashCode = hashCode * 59 + InvalidItemReason.GetHashCode();
                return hashCode;
            }
        }
    }
}