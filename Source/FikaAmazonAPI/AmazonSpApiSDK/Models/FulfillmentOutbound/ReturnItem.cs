/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     An item that Amazon accepted for return.
    /// </summary>
    [DataContract]
    public class ReturnItem : IEquatable<ReturnItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ReturnItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ReturnItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReturnItem" /> class.
        /// </summary>
        /// <param name="SellerReturnItemId">An identifier assigned by the seller to the return item. (required).</param>
        /// <param name="SellerFulfillmentOrderItemId">
        ///     The identifier assigned to the item by the seller when the fulfillment order
        ///     was created. (required).
        /// </param>
        /// <param name="AmazonShipmentId">The identifier for the shipment that is associated with the return item. (required).</param>
        /// <param name="SellerReturnReasonCode">The return reason code assigned to the return item by the seller. (required).</param>
        /// <param name="ReturnComment">An optional comment about the return item..</param>
        /// <param name="AmazonReturnReasonCode">
        ///     The return reason code that the Amazon fulfillment center assigned to the return
        ///     item..
        /// </param>
        /// <param name="Status">Indicates if the return item has been processed by an Amazon fulfillment center. (required).</param>
        /// <param name="StatusChangedDate">Indicates when the status last changed. (required).</param>
        /// <param name="ReturnAuthorizationId">
        ///     Identifies the return authorization used to return this item. See
        ///     ReturnAuthorization..
        /// </param>
        /// <param name="ReturnReceivedCondition">ReturnReceivedCondition.</param>
        /// <param name="FulfillmentCenterId">The identifier for the Amazon fulfillment center that processed the return item..</param>
        public ReturnItem(string SellerReturnItemId = default, string SellerFulfillmentOrderItemId = default,
            string AmazonShipmentId = default, string SellerReturnReasonCode = default, string ReturnComment = default,
            string AmazonReturnReasonCode = default, FulfillmentReturnItemStatus Status = default,
            DateTime StatusChangedDate = default, string ReturnAuthorizationId = default,
            ReturnItemDisposition? ReturnReceivedCondition = default, string FulfillmentCenterId = default)
        {
            // to ensure "SellerReturnItemId" is required (not null)
            if (SellerReturnItemId == null)
                throw new InvalidDataException(
                    "SellerReturnItemId is a required property for ReturnItem and cannot be null");
            this.SellerReturnItemId = SellerReturnItemId;
            // to ensure "SellerFulfillmentOrderItemId" is required (not null)
            if (SellerFulfillmentOrderItemId == null)
                throw new InvalidDataException(
                    "SellerFulfillmentOrderItemId is a required property for ReturnItem and cannot be null");
            this.SellerFulfillmentOrderItemId = SellerFulfillmentOrderItemId;
            // to ensure "AmazonShipmentId" is required (not null)
            if (AmazonShipmentId == null)
                throw new InvalidDataException(
                    "AmazonShipmentId is a required property for ReturnItem and cannot be null");
            this.AmazonShipmentId = AmazonShipmentId;
            // to ensure "SellerReturnReasonCode" is required (not null)
            if (SellerReturnReasonCode == null)
                throw new InvalidDataException(
                    "SellerReturnReasonCode is a required property for ReturnItem and cannot be null");
            this.SellerReturnReasonCode = SellerReturnReasonCode;
            // to ensure "Status" is required (not null)
            if (Status == null)
                throw new InvalidDataException("Status is a required property for ReturnItem and cannot be null");
            this.Status = Status;
            // to ensure "StatusChangedDate" is required (not null)
            if (StatusChangedDate == null)
                throw new InvalidDataException(
                    "StatusChangedDate is a required property for ReturnItem and cannot be null");
            this.StatusChangedDate = StatusChangedDate;
            this.ReturnComment = ReturnComment;
            this.AmazonReturnReasonCode = AmazonReturnReasonCode;
            this.ReturnAuthorizationId = ReturnAuthorizationId;
            this.ReturnReceivedCondition = ReturnReceivedCondition;
            this.FulfillmentCenterId = FulfillmentCenterId;
        }

        /// <summary>
        ///     Indicates if the return item has been processed by an Amazon fulfillment center.
        /// </summary>
        /// <value>Indicates if the return item has been processed by an Amazon fulfillment center.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public FulfillmentReturnItemStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets ReturnReceivedCondition
        /// </summary>
        [DataMember(Name = "ReturnReceivedCondition", EmitDefaultValue = false)]
        public ReturnItemDisposition? ReturnReceivedCondition { get; set; }

        /// <summary>
        ///     An identifier assigned by the seller to the return item.
        /// </summary>
        /// <value>An identifier assigned by the seller to the return item.</value>
        [DataMember(Name = "SellerReturnItemId", EmitDefaultValue = false)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        ///     The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        /// <value>The identifier assigned to the item by the seller when the fulfillment order was created.</value>
        [DataMember(Name = "SellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        ///     The identifier for the shipment that is associated with the return item.
        /// </summary>
        /// <value>The identifier for the shipment that is associated with the return item.</value>
        [DataMember(Name = "AmazonShipmentId", EmitDefaultValue = false)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        ///     The return reason code assigned to the return item by the seller.
        /// </summary>
        /// <value>The return reason code assigned to the return item by the seller.</value>
        [DataMember(Name = "SellerReturnReasonCode", EmitDefaultValue = false)]
        public string SellerReturnReasonCode { get; set; }

        /// <summary>
        ///     An optional comment about the return item.
        /// </summary>
        /// <value>An optional comment about the return item.</value>
        [DataMember(Name = "ReturnComment", EmitDefaultValue = false)]
        public string ReturnComment { get; set; }

        /// <summary>
        ///     The return reason code that the Amazon fulfillment center assigned to the return item.
        /// </summary>
        /// <value>The return reason code that the Amazon fulfillment center assigned to the return item.</value>
        [DataMember(Name = "AmazonReturnReasonCode", EmitDefaultValue = false)]
        public string AmazonReturnReasonCode { get; set; }


        /// <summary>
        ///     Indicates when the status last changed.
        /// </summary>
        /// <value>Indicates when the status last changed.</value>
        [DataMember(Name = "StatusChangedDate", EmitDefaultValue = false)]
        public DateTime StatusChangedDate { get; set; }

        /// <summary>
        ///     Identifies the return authorization used to return this item. See ReturnAuthorization.
        /// </summary>
        /// <value>Identifies the return authorization used to return this item. See ReturnAuthorization.</value>
        [DataMember(Name = "ReturnAuthorizationId", EmitDefaultValue = false)]
        public string ReturnAuthorizationId { get; set; }


        /// <summary>
        ///     The identifier for the Amazon fulfillment center that processed the return item.
        /// </summary>
        /// <value>The identifier for the Amazon fulfillment center that processed the return item.</value>
        [DataMember(Name = "FulfillmentCenterId", EmitDefaultValue = false)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        ///     Returns true if ReturnItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnItem input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerReturnItemId == input.SellerReturnItemId ||
                    (SellerReturnItemId != null &&
                     SellerReturnItemId.Equals(input.SellerReturnItemId))
                ) &&
                (
                    SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (SellerFulfillmentOrderItemId != null &&
                     SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    AmazonShipmentId == input.AmazonShipmentId ||
                    (AmazonShipmentId != null &&
                     AmazonShipmentId.Equals(input.AmazonShipmentId))
                ) &&
                (
                    SellerReturnReasonCode == input.SellerReturnReasonCode ||
                    (SellerReturnReasonCode != null &&
                     SellerReturnReasonCode.Equals(input.SellerReturnReasonCode))
                ) &&
                (
                    ReturnComment == input.ReturnComment ||
                    (ReturnComment != null &&
                     ReturnComment.Equals(input.ReturnComment))
                ) &&
                (
                    AmazonReturnReasonCode == input.AmazonReturnReasonCode ||
                    (AmazonReturnReasonCode != null &&
                     AmazonReturnReasonCode.Equals(input.AmazonReturnReasonCode))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    StatusChangedDate == input.StatusChangedDate ||
                    (StatusChangedDate != null &&
                     StatusChangedDate.Equals(input.StatusChangedDate))
                ) &&
                (
                    ReturnAuthorizationId == input.ReturnAuthorizationId ||
                    (ReturnAuthorizationId != null &&
                     ReturnAuthorizationId.Equals(input.ReturnAuthorizationId))
                ) &&
                (
                    ReturnReceivedCondition == input.ReturnReceivedCondition ||
                    (ReturnReceivedCondition != null &&
                     ReturnReceivedCondition.Equals(input.ReturnReceivedCondition))
                ) &&
                (
                    FulfillmentCenterId == input.FulfillmentCenterId ||
                    (FulfillmentCenterId != null &&
                     FulfillmentCenterId.Equals(input.FulfillmentCenterId))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnItem {\n");
            sb.Append("  SellerReturnItemId: ").Append(SellerReturnItemId).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  SellerReturnReasonCode: ").Append(SellerReturnReasonCode).Append("\n");
            sb.Append("  ReturnComment: ").Append(ReturnComment).Append("\n");
            sb.Append("  AmazonReturnReasonCode: ").Append(AmazonReturnReasonCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusChangedDate: ").Append(StatusChangedDate).Append("\n");
            sb.Append("  ReturnAuthorizationId: ").Append(ReturnAuthorizationId).Append("\n");
            sb.Append("  ReturnReceivedCondition: ").Append(ReturnReceivedCondition).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReturnItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerReturnItemId != null)
                    hashCode = hashCode * 59 + SellerReturnItemId.GetHashCode();
                if (SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + SellerFulfillmentOrderItemId.GetHashCode();
                if (AmazonShipmentId != null)
                    hashCode = hashCode * 59 + AmazonShipmentId.GetHashCode();
                if (SellerReturnReasonCode != null)
                    hashCode = hashCode * 59 + SellerReturnReasonCode.GetHashCode();
                if (ReturnComment != null)
                    hashCode = hashCode * 59 + ReturnComment.GetHashCode();
                if (AmazonReturnReasonCode != null)
                    hashCode = hashCode * 59 + AmazonReturnReasonCode.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (StatusChangedDate != null)
                    hashCode = hashCode * 59 + StatusChangedDate.GetHashCode();
                if (ReturnAuthorizationId != null)
                    hashCode = hashCode * 59 + ReturnAuthorizationId.GetHashCode();
                if (ReturnReceivedCondition != null)
                    hashCode = hashCode * 59 + ReturnReceivedCondition.GetHashCode();
                if (FulfillmentCenterId != null)
                    hashCode = hashCode * 59 + FulfillmentCenterId.GetHashCode();
                return hashCode;
            }
        }
    }
}