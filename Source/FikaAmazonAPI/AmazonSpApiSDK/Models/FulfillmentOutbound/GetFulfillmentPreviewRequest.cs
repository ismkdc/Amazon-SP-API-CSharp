/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     GetFulfillmentPreviewRequest
    /// </summary>
    [DataContract]
    public class GetFulfillmentPreviewRequest : IEquatable<GetFulfillmentPreviewRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="GetFulfillmentPreviewRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetFulfillmentPreviewRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GetFulfillmentPreviewRequest" /> class.
        /// </summary>
        /// <param name="MarketplaceId">The marketplace the fulfillment order is placed against..</param>
        /// <param name="Address">The destination address for the fulfillment order preview. (required).</param>
        /// <param name="Items">
        ///     Identifying information and quantity information for the items in the fulfillment order preview.
        ///     (required).
        /// </param>
        /// <param name="ShippingSpeedCategories">
        ///     A list of shipping methods used for creating fulfillment order previews. Note:
        ///     Shipping method service level agreements vary by marketplace. Sellers should see the Seller Central website in
        ///     their marketplace for shipping method service level agreements and fulfillment fees..
        /// </param>
        /// <param name="IncludeCODFulfillmentPreview">
        ///     Specifies whether to return fulfillment order previews that are for COD
        ///     (Cash On Delivery).  Possible values:  true - Returns all fulfillment order previews (both for COD and not for
        ///     COD).  false - Returns only fulfillment order previews that are not for COD..
        /// </param>
        /// <param name="IncludeDeliveryWindows">
        ///     Specifies whether to return the ScheduledDeliveryInfo response object, which
        ///     contains the available delivery windows for a Scheduled Delivery. The ScheduledDeliveryInfo response object can
        ///     only be returned for fulfillment order previews with ShippingSpeedCategories &#x3D; ScheduledDelivery..
        /// </param>
        public GetFulfillmentPreviewRequest(string MarketplaceId = default, Address Address = default,
            GetFulfillmentPreviewItemList Items = default, ShippingSpeedCategoryList ShippingSpeedCategories = default,
            bool? IncludeCODFulfillmentPreview = default, bool? IncludeDeliveryWindows = default)
        {
            // to ensure "Address" is required (not null)
            if (Address == null)
                throw new InvalidDataException(
                    "Address is a required property for GetFulfillmentPreviewRequest and cannot be null");
            this.Address = Address;
            // to ensure "Items" is required (not null)
            if (Items == null)
                throw new InvalidDataException(
                    "Items is a required property for GetFulfillmentPreviewRequest and cannot be null");
            this.Items = Items;
            this.MarketplaceId = MarketplaceId;
            this.ShippingSpeedCategories = ShippingSpeedCategories;
            this.IncludeCODFulfillmentPreview = IncludeCODFulfillmentPreview;
            this.IncludeDeliveryWindows = IncludeDeliveryWindows;
        }

        /// <summary>
        ///     The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     The destination address for the fulfillment order preview.
        /// </summary>
        /// <value>The destination address for the fulfillment order preview.</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        ///     Identifying information and quantity information for the items in the fulfillment order preview.
        /// </summary>
        /// <value>Identifying information and quantity information for the items in the fulfillment order preview.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public GetFulfillmentPreviewItemList Items { get; set; }

        /// <summary>
        ///     A list of shipping methods used for creating fulfillment order previews. Note: Shipping method service level
        ///     agreements vary by marketplace. Sellers should see the Seller Central website in their marketplace for shipping
        ///     method service level agreements and fulfillment fees.
        /// </summary>
        /// <value>
        ///     A list of shipping methods used for creating fulfillment order previews. Note: Shipping method service level
        ///     agreements vary by marketplace. Sellers should see the Seller Central website in their marketplace for shipping
        ///     method service level agreements and fulfillment fees.
        /// </value>
        [DataMember(Name = "shippingSpeedCategories", EmitDefaultValue = false)]
        public ShippingSpeedCategoryList ShippingSpeedCategories { get; set; }

        /// <summary>
        ///     Specifies whether to return fulfillment order previews that are for COD (Cash On Delivery).  Possible values:  true
        ///     - Returns all fulfillment order previews (both for COD and not for COD).  false - Returns only fulfillment order
        ///     previews that are not for COD.
        /// </summary>
        /// <value>
        ///     Specifies whether to return fulfillment order previews that are for COD (Cash On Delivery).  Possible values:
        ///     true - Returns all fulfillment order previews (both for COD and not for COD).  false - Returns only fulfillment
        ///     order previews that are not for COD.
        /// </value>
        [DataMember(Name = "includeCODFulfillmentPreview", EmitDefaultValue = false)]
        public bool? IncludeCODFulfillmentPreview { get; set; }

        /// <summary>
        ///     Specifies whether to return the ScheduledDeliveryInfo response object, which contains the available delivery
        ///     windows for a Scheduled Delivery. The ScheduledDeliveryInfo response object can only be returned for fulfillment
        ///     order previews with ShippingSpeedCategories &#x3D; ScheduledDelivery.
        /// </summary>
        /// <value>
        ///     Specifies whether to return the ScheduledDeliveryInfo response object, which contains the available delivery
        ///     windows for a Scheduled Delivery. The ScheduledDeliveryInfo response object can only be returned for fulfillment
        ///     order previews with ShippingSpeedCategories &#x3D; ScheduledDelivery.
        /// </value>
        [DataMember(Name = "includeDeliveryWindows", EmitDefaultValue = false)]
        public bool? IncludeDeliveryWindows { get; set; }

        /// <summary>
        ///     Returns true if GetFulfillmentPreviewRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFulfillmentPreviewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFulfillmentPreviewRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    Address == input.Address ||
                    (Address != null &&
                     Address.Equals(input.Address))
                ) &&
                (
                    Items == input.Items ||
                    (Items != null &&
                     Items.Equals(input.Items))
                ) &&
                (
                    ShippingSpeedCategories == input.ShippingSpeedCategories ||
                    (ShippingSpeedCategories != null &&
                     ShippingSpeedCategories.Equals(input.ShippingSpeedCategories))
                ) &&
                (
                    IncludeCODFulfillmentPreview == input.IncludeCODFulfillmentPreview ||
                    (IncludeCODFulfillmentPreview != null &&
                     IncludeCODFulfillmentPreview.Equals(input.IncludeCODFulfillmentPreview))
                ) &&
                (
                    IncludeDeliveryWindows == input.IncludeDeliveryWindows ||
                    (IncludeDeliveryWindows != null &&
                     IncludeDeliveryWindows.Equals(input.IncludeDeliveryWindows))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFulfillmentPreviewRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ShippingSpeedCategories: ").Append(ShippingSpeedCategories).Append("\n");
            sb.Append("  IncludeCODFulfillmentPreview: ").Append(IncludeCODFulfillmentPreview).Append("\n");
            sb.Append("  IncludeDeliveryWindows: ").Append(IncludeDeliveryWindows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GetFulfillmentPreviewRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                if (ShippingSpeedCategories != null)
                    hashCode = hashCode * 59 + ShippingSpeedCategories.GetHashCode();
                if (IncludeCODFulfillmentPreview != null)
                    hashCode = hashCode * 59 + IncludeCODFulfillmentPreview.GetHashCode();
                if (IncludeDeliveryWindows != null)
                    hashCode = hashCode * 59 + IncludeDeliveryWindows.GetHashCode();
                return hashCode;
            }
        }
    }
}