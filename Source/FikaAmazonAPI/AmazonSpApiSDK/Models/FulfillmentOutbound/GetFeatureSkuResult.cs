/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     The payload for the getFeatureSKU operation.
    /// </summary>
    [DataContract]
    public class GetFeatureSkuResult : IEquatable<GetFeatureSkuResult>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="GetFeatureSkuResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetFeatureSkuResult()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GetFeatureSkuResult" /> class.
        /// </summary>
        /// <param name="marketplaceId">The requested marketplace. (required).</param>
        /// <param name="featureName">The name of the feature. (required).</param>
        /// <param name="isEligible">When true, the seller SKU is eligible for the requested feature. (required).</param>
        /// <param name="ineligibleReasons">
        ///     A list of one or more reasons that the seller SKU is ineligibile for the feature.
        ///     Possible values: * MERCHANT_NOT_ENROLLED - The merchant isn&#39;t enrolled for the feature. * SKU_NOT_ELIGIBLE -
        ///     The SKU doesn&#39;t reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU
        ///     provided..
        /// </param>
        /// <param name="skuInfo">
        ///     Information about the SKU, including the count available, identifiers, and a list of overlapping
        ///     SKUs that share the same inventory pool..
        /// </param>
        public GetFeatureSkuResult(string marketplaceId = default, string featureName = default,
            bool? isEligible = default, List<string> ineligibleReasons = default, FeatureSku skuInfo = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
                throw new InvalidDataException(
                    "marketplaceId is a required property for GetFeatureSkuResult and cannot be null");
            MarketplaceId = marketplaceId;
            // to ensure "featureName" is required (not null)
            if (featureName == null)
                throw new InvalidDataException(
                    "featureName is a required property for GetFeatureSkuResult and cannot be null");
            FeatureName = featureName;
            // to ensure "isEligible" is required (not null)
            if (isEligible == null)
                throw new InvalidDataException(
                    "isEligible is a required property for GetFeatureSkuResult and cannot be null");
            IsEligible = isEligible;
            IneligibleReasons = ineligibleReasons;
            SkuInfo = skuInfo;
        }

        /// <summary>
        ///     The requested marketplace.
        /// </summary>
        /// <value>The requested marketplace.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     The name of the feature.
        /// </summary>
        /// <value>The name of the feature.</value>
        [DataMember(Name = "featureName", EmitDefaultValue = false)]
        public string FeatureName { get; set; }

        /// <summary>
        ///     When true, the seller SKU is eligible for the requested feature.
        /// </summary>
        /// <value>When true, the seller SKU is eligible for the requested feature.</value>
        [DataMember(Name = "isEligible", EmitDefaultValue = false)]
        public bool? IsEligible { get; set; }

        /// <summary>
        ///     A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: *
        ///     MERCHANT_NOT_ENROLLED - The merchant isn&#39;t enrolled for the feature. * SKU_NOT_ELIGIBLE - The SKU doesn&#39;t
        ///     reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU provided.
        /// </summary>
        /// <value>
        ///     A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: *
        ///     MERCHANT_NOT_ENROLLED - The merchant isn&#39;t enrolled for the feature. * SKU_NOT_ELIGIBLE - The SKU doesn&#39;t
        ///     reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU provided.
        /// </value>
        [DataMember(Name = "ineligibleReasons", EmitDefaultValue = false)]
        public List<string> IneligibleReasons { get; set; }

        /// <summary>
        ///     Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share
        ///     the same inventory pool.
        /// </summary>
        /// <value>
        ///     Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share
        ///     the same inventory pool.
        /// </value>
        [DataMember(Name = "skuInfo", EmitDefaultValue = false)]
        public FeatureSku SkuInfo { get; set; }

        /// <summary>
        ///     Returns true if GetFeatureSkuResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFeatureSkuResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFeatureSkuResult input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    FeatureName == input.FeatureName ||
                    (FeatureName != null &&
                     FeatureName.Equals(input.FeatureName))
                ) &&
                (
                    IsEligible == input.IsEligible ||
                    (IsEligible != null &&
                     IsEligible.Equals(input.IsEligible))
                ) &&
                (
                    IneligibleReasons == input.IneligibleReasons ||
                    (IneligibleReasons != null &&
                     IneligibleReasons.SequenceEqual(input.IneligibleReasons))
                ) &&
                (
                    SkuInfo == input.SkuInfo ||
                    (SkuInfo != null &&
                     SkuInfo.Equals(input.SkuInfo))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFeatureSkuResult {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  IsEligible: ").Append(IsEligible).Append("\n");
            sb.Append("  IneligibleReasons: ").Append(IneligibleReasons).Append("\n");
            sb.Append("  SkuInfo: ").Append(SkuInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GetFeatureSkuResult);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (FeatureName != null)
                    hashCode = hashCode * 59 + FeatureName.GetHashCode();
                if (IsEligible != null)
                    hashCode = hashCode * 59 + IsEligible.GetHashCode();
                if (IneligibleReasons != null)
                    hashCode = hashCode * 59 + IneligibleReasons.GetHashCode();
                if (SkuInfo != null)
                    hashCode = hashCode * 59 + SkuInfo.GetHashCode();
                return hashCode;
            }
        }
    }
}