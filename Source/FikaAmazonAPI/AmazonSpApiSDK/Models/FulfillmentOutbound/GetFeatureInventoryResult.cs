/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     The payload for the getEligibileInventory operation.
    /// </summary>
    [DataContract]
    public class GetFeatureInventoryResult : IEquatable<GetFeatureInventoryResult>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="GetFeatureInventoryResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetFeatureInventoryResult()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GetFeatureInventoryResult" /> class.
        /// </summary>
        /// <param name="marketplaceId">The requested marketplace. (required).</param>
        /// <param name="featureName">The name of the feature. (required).</param>
        /// <param name="nextToken">
        ///     When present and not empty, pass this string token in the next request to return the next
        ///     response page..
        /// </param>
        /// <param name="featureSkus">An array of SKUs eligible for this feature and the quantity available..</param>
        public GetFeatureInventoryResult(string marketplaceId = default, string featureName = default,
            string nextToken = default, List<FeatureSku> featureSkus = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
                throw new InvalidDataException(
                    "marketplaceId is a required property for GetFeatureInventoryResult and cannot be null");
            MarketplaceId = marketplaceId;
            // to ensure "featureName" is required (not null)
            if (featureName == null)
                throw new InvalidDataException(
                    "featureName is a required property for GetFeatureInventoryResult and cannot be null");
            FeatureName = featureName;
            NextToken = nextToken;
            FeatureSkus = featureSkus;
        }

        /// <summary>
        ///     The requested marketplace.
        /// </summary>
        /// <value>The requested marketplace.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     The name of the feature.
        /// </summary>
        /// <value>The name of the feature.</value>
        [DataMember(Name = "featureName", EmitDefaultValue = false)]
        public string FeatureName { get; set; }

        /// <summary>
        ///     When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        /// <value>When present and not empty, pass this string token in the next request to return the next response page.</value>
        [DataMember(Name = "nextToken", EmitDefaultValue = false)]
        public string NextToken { get; set; }

        /// <summary>
        ///     An array of SKUs eligible for this feature and the quantity available.
        /// </summary>
        /// <value>An array of SKUs eligible for this feature and the quantity available.</value>
        [DataMember(Name = "featureSkus", EmitDefaultValue = false)]
        public List<FeatureSku> FeatureSkus { get; set; }

        /// <summary>
        ///     Returns true if GetFeatureInventoryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFeatureInventoryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFeatureInventoryResult input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    FeatureName == input.FeatureName ||
                    (FeatureName != null &&
                     FeatureName.Equals(input.FeatureName))
                ) &&
                (
                    NextToken == input.NextToken ||
                    (NextToken != null &&
                     NextToken.Equals(input.NextToken))
                ) &&
                (
                    FeatureSkus == input.FeatureSkus ||
                    (FeatureSkus != null &&
                     FeatureSkus.SequenceEqual(input.FeatureSkus))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFeatureInventoryResult {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("  FeatureSkus: ").Append(FeatureSkus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GetFeatureInventoryResult);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (FeatureName != null)
                    hashCode = hashCode * 59 + FeatureName.GetHashCode();
                if (NextToken != null)
                    hashCode = hashCode * 59 + NextToken.GetHashCode();
                if (FeatureSkus != null)
                    hashCode = hashCode * 59 + FeatureSkus.GetHashCode();
                return hashCode;
            }
        }
    }
}