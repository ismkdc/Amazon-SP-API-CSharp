/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     Return authorization information for items accepted for return.
    /// </summary>
    [DataContract]
    public class ReturnAuthorization : IEquatable<ReturnAuthorization>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ReturnAuthorization" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ReturnAuthorization()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReturnAuthorization" /> class.
        /// </summary>
        /// <param name="ReturnAuthorizationId">
        ///     An identifier for the return authorization. This identifier associates return items
        ///     with the return authorization used to return them. (required).
        /// </param>
        /// <param name="FulfillmentCenterId">
        ///     An identifier for the Amazon fulfillment center that the return items should be sent
        ///     to. (required).
        /// </param>
        /// <param name="ReturnToAddress">
        ///     The address of the Amazon fulfillment center that the return items should be sent to.
        ///     (required).
        /// </param>
        /// <param name="AmazonRmaId">
        ///     The return merchandise authorization (RMA) that Amazon needs to process the return.
        ///     (required).
        /// </param>
        /// <param name="RmaPageURL">
        ///     A URL for a web page that contains the return authorization barcode and the mailing label.
        ///     This does not include pre-paid shipping. (required).
        /// </param>
        public ReturnAuthorization(string ReturnAuthorizationId = default, string FulfillmentCenterId = default,
            Address ReturnToAddress = default, string AmazonRmaId = default, string RmaPageURL = default)
        {
            // to ensure "ReturnAuthorizationId" is required (not null)
            if (ReturnAuthorizationId == null)
                throw new InvalidDataException(
                    "ReturnAuthorizationId is a required property for ReturnAuthorization and cannot be null");
            this.ReturnAuthorizationId = ReturnAuthorizationId;
            // to ensure "FulfillmentCenterId" is required (not null)
            if (FulfillmentCenterId == null)
                throw new InvalidDataException(
                    "FulfillmentCenterId is a required property for ReturnAuthorization and cannot be null");
            this.FulfillmentCenterId = FulfillmentCenterId;
            // to ensure "ReturnToAddress" is required (not null)
            if (ReturnToAddress == null)
                throw new InvalidDataException(
                    "ReturnToAddress is a required property for ReturnAuthorization and cannot be null");
            this.ReturnToAddress = ReturnToAddress;
            // to ensure "AmazonRmaId" is required (not null)
            if (AmazonRmaId == null)
                throw new InvalidDataException(
                    "AmazonRmaId is a required property for ReturnAuthorization and cannot be null");
            this.AmazonRmaId = AmazonRmaId;
            // to ensure "RmaPageURL" is required (not null)
            if (RmaPageURL == null)
                throw new InvalidDataException(
                    "RmaPageURL is a required property for ReturnAuthorization and cannot be null");
            this.RmaPageURL = RmaPageURL;
        }

        /// <summary>
        ///     An identifier for the return authorization. This identifier associates return items with the return authorization
        ///     used to return them.
        /// </summary>
        /// <value>
        ///     An identifier for the return authorization. This identifier associates return items with the return
        ///     authorization used to return them.
        /// </value>
        [DataMember(Name = "ReturnAuthorizationId", EmitDefaultValue = false)]
        public string ReturnAuthorizationId { get; set; }

        /// <summary>
        ///     An identifier for the Amazon fulfillment center that the return items should be sent to.
        /// </summary>
        /// <value>An identifier for the Amazon fulfillment center that the return items should be sent to.</value>
        [DataMember(Name = "FulfillmentCenterId", EmitDefaultValue = false)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        ///     The address of the Amazon fulfillment center that the return items should be sent to.
        /// </summary>
        /// <value>The address of the Amazon fulfillment center that the return items should be sent to.</value>
        [DataMember(Name = "ReturnToAddress", EmitDefaultValue = false)]
        public Address ReturnToAddress { get; set; }

        /// <summary>
        ///     The return merchandise authorization (RMA) that Amazon needs to process the return.
        /// </summary>
        /// <value>The return merchandise authorization (RMA) that Amazon needs to process the return.</value>
        [DataMember(Name = "AmazonRmaId", EmitDefaultValue = false)]
        public string AmazonRmaId { get; set; }

        /// <summary>
        ///     A URL for a web page that contains the return authorization barcode and the mailing label. This does not include
        ///     pre-paid shipping.
        /// </summary>
        /// <value>
        ///     A URL for a web page that contains the return authorization barcode and the mailing label. This does not include
        ///     pre-paid shipping.
        /// </value>
        [DataMember(Name = "RmaPageURL", EmitDefaultValue = false)]
        public string RmaPageURL { get; set; }

        /// <summary>
        ///     Returns true if ReturnAuthorization instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnAuthorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnAuthorization input)
        {
            if (input == null)
                return false;

            return
                (
                    ReturnAuthorizationId == input.ReturnAuthorizationId ||
                    (ReturnAuthorizationId != null &&
                     ReturnAuthorizationId.Equals(input.ReturnAuthorizationId))
                ) &&
                (
                    FulfillmentCenterId == input.FulfillmentCenterId ||
                    (FulfillmentCenterId != null &&
                     FulfillmentCenterId.Equals(input.FulfillmentCenterId))
                ) &&
                (
                    ReturnToAddress == input.ReturnToAddress ||
                    (ReturnToAddress != null &&
                     ReturnToAddress.Equals(input.ReturnToAddress))
                ) &&
                (
                    AmazonRmaId == input.AmazonRmaId ||
                    (AmazonRmaId != null &&
                     AmazonRmaId.Equals(input.AmazonRmaId))
                ) &&
                (
                    RmaPageURL == input.RmaPageURL ||
                    (RmaPageURL != null &&
                     RmaPageURL.Equals(input.RmaPageURL))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnAuthorization {\n");
            sb.Append("  ReturnAuthorizationId: ").Append(ReturnAuthorizationId).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("  ReturnToAddress: ").Append(ReturnToAddress).Append("\n");
            sb.Append("  AmazonRmaId: ").Append(AmazonRmaId).Append("\n");
            sb.Append("  RmaPageURL: ").Append(RmaPageURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReturnAuthorization);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ReturnAuthorizationId != null)
                    hashCode = hashCode * 59 + ReturnAuthorizationId.GetHashCode();
                if (FulfillmentCenterId != null)
                    hashCode = hashCode * 59 + FulfillmentCenterId.GetHashCode();
                if (ReturnToAddress != null)
                    hashCode = hashCode * 59 + ReturnToAddress.GetHashCode();
                if (AmazonRmaId != null)
                    hashCode = hashCode * 59 + AmazonRmaId.GetHashCode();
                if (RmaPageURL != null)
                    hashCode = hashCode * 59 + RmaPageURL.GetHashCode();
                return hashCode;
            }
        }
    }
}