/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     Information about unfulfillable items in a fulfillment order preview.
    /// </summary>
    [DataContract]
    public class UnfulfillablePreviewItem : IEquatable<UnfulfillablePreviewItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="UnfulfillablePreviewItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public UnfulfillablePreviewItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="UnfulfillablePreviewItem" /> class.
        /// </summary>
        /// <param name="SellerSKU">The seller SKU of the item. (required).</param>
        /// <param name="Quantity">Quantity (required).</param>
        /// <param name="SellerFulfillmentOrderItemId">
        ///     A fulfillment order item identifier created with a call to the
        ///     getFulfillmentPreview operation. (required).
        /// </param>
        /// <param name="ItemUnfulfillableReasons">
        ///     Error codes associated with the fulfillment order preview that indicate why the
        ///     item is unfulfillable..
        /// </param>
        public UnfulfillablePreviewItem(string SellerSKU = default, int Quantity = default,
            string SellerFulfillmentOrderItemId = default, StringList ItemUnfulfillableReasons = default)
        {
            // to ensure "SellerSKU" is required (not null)
            if (SellerSKU == null)
                throw new InvalidDataException(
                    "SellerSKU is a required property for UnfulfillablePreviewItem and cannot be null");
            this.SellerSKU = SellerSKU;
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
                throw new InvalidDataException(
                    "Quantity is a required property for UnfulfillablePreviewItem and cannot be null");
            this.Quantity = Quantity;
            // to ensure "SellerFulfillmentOrderItemId" is required (not null)
            if (SellerFulfillmentOrderItemId == null)
                throw new InvalidDataException(
                    "SellerFulfillmentOrderItemId is a required property for UnfulfillablePreviewItem and cannot be null");
            this.SellerFulfillmentOrderItemId = SellerFulfillmentOrderItemId;
            this.ItemUnfulfillableReasons = ItemUnfulfillableReasons;
        }

        /// <summary>
        ///     The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        ///     Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        ///     A fulfillment order item identifier created with a call to the getFulfillmentPreview operation.
        /// </summary>
        /// <value>A fulfillment order item identifier created with a call to the getFulfillmentPreview operation.</value>
        [DataMember(Name = "SellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        ///     Error codes associated with the fulfillment order preview that indicate why the item is unfulfillable.
        /// </summary>
        /// <value>Error codes associated with the fulfillment order preview that indicate why the item is unfulfillable.</value>
        [DataMember(Name = "ItemUnfulfillableReasons", EmitDefaultValue = false)]
        public StringList ItemUnfulfillableReasons { get; set; }

        /// <summary>
        ///     Returns true if UnfulfillablePreviewItem instances are equal
        /// </summary>
        /// <param name="input">Instance of UnfulfillablePreviewItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnfulfillablePreviewItem input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerSKU == input.SellerSKU ||
                    (SellerSKU != null &&
                     SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (SellerFulfillmentOrderItemId != null &&
                     SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    ItemUnfulfillableReasons == input.ItemUnfulfillableReasons ||
                    (ItemUnfulfillableReasons != null &&
                     ItemUnfulfillableReasons.Equals(input.ItemUnfulfillableReasons))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellerSKU (string) maxLength
            if (SellerSKU != null && SellerSKU.Length > 50)
                yield return new ValidationResult("Invalid value for SellerSKU, length must be less than 50.",
                    new[] { "SellerSKU" });

            // SellerFulfillmentOrderItemId (string) maxLength
            if (SellerFulfillmentOrderItemId != null && SellerFulfillmentOrderItemId.Length > 50)
                yield return new ValidationResult(
                    "Invalid value for SellerFulfillmentOrderItemId, length must be less than 50.",
                    new[] { "SellerFulfillmentOrderItemId" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnfulfillablePreviewItem {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  ItemUnfulfillableReasons: ").Append(ItemUnfulfillableReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UnfulfillablePreviewItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerSKU != null)
                    hashCode = hashCode * 59 + SellerSKU.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + SellerFulfillmentOrderItemId.GetHashCode();
                if (ItemUnfulfillableReasons != null)
                    hashCode = hashCode * 59 + ItemUnfulfillableReasons.GetHashCode();
                return hashCode;
            }
        }
    }
}