/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     Delivery and item information for a shipment in a fulfillment order preview.
    /// </summary>
    [DataContract]
    public class FulfillmentPreviewShipment : IEquatable<FulfillmentPreviewShipment>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FulfillmentPreviewShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FulfillmentPreviewShipment()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FulfillmentPreviewShipment" /> class.
        /// </summary>
        /// <param name="EarliestShipDate">
        ///     The earliest date that the shipment is expected to be sent from the fulfillment center,
        ///     in ISO 8601 date time format. (required).
        /// </param>
        /// <param name="LatestShipDate">
        ///     The latest date that the shipment is expected to be sent from the fulfillment center, in
        ///     ISO 8601 date time format. (required).
        /// </param>
        /// <param name="EarliestArrivalDate">
        ///     The earliest date that the shipment is expected to arrive at its destination.
        ///     (required).
        /// </param>
        /// <param name="LatestArrivalDate">
        ///     The latest date that the shipment is expected to arrive at its destination, in ISO 8601
        ///     date time format. (required).
        /// </param>
        /// <param name="FulfillmentPreviewItems">Information about the items in the shipment. (required).</param>
        public FulfillmentPreviewShipment(DateTime? EarliestShipDate = default, DateTime? LatestShipDate = default,
            DateTime? EarliestArrivalDate = default, DateTime? LatestArrivalDate = default,
            FulfillmentPreviewItemList FulfillmentPreviewItems = default)
        {
            // to ensure "EarliestShipDate" is required (not null)
            if (EarliestShipDate == null)
                throw new InvalidDataException(
                    "EarliestShipDate is a required property for FulfillmentPreviewShipment and cannot be null");
            EarliestShipDateTime = EarliestShipDate.Value;
            // to ensure "LatestShipDate" is required (not null)
            if (LatestShipDate == null)
                throw new InvalidDataException(
                    "LatestShipDate is a required property for FulfillmentPreviewShipment and cannot be null");
            LatestShipDateTime = LatestShipDate.Value;
            // to ensure "EarliestArrivalDate" is required (not null)
            if (EarliestArrivalDate == null)
                throw new InvalidDataException(
                    "EarliestArrivalDate is a required property for FulfillmentPreviewShipment and cannot be null");
            EarliestArrivalDateTime = EarliestArrivalDate.Value;
            // to ensure "LatestArrivalDate" is required (not null)
            if (LatestArrivalDate == null)
                throw new InvalidDataException(
                    "LatestArrivalDate is a required property for FulfillmentPreviewShipment and cannot be null");
            LatestArrivalDateTime = LatestArrivalDate.Value;
            // to ensure "FulfillmentPreviewItems" is required (not null)
            if (FulfillmentPreviewItems == null)
                throw new InvalidDataException(
                    "FulfillmentPreviewItems is a required property for FulfillmentPreviewShipment and cannot be null");
            this.FulfillmentPreviewItems = FulfillmentPreviewItems;
        }

        [Obsolete("Timestamp is no longer used, use the other constructor")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public FulfillmentPreviewShipment(Timestamp EarliestShipDate = default, Timestamp LatestShipDate = default,
            Timestamp EarliestArrivalDate = default, Timestamp LatestArrivalDate = default,
            FulfillmentPreviewItemList FulfillmentPreviewItems = default)
            : this(DateTime.MinValue, DateTime.MinValue, DateTime.MinValue, DateTime.MinValue, FulfillmentPreviewItems)
        {
        }

        /// <summary>
        ///     The earliest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time
        ///     format.
        /// </summary>
        /// <value>
        ///     The earliest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time
        ///     format.
        /// </value>
        [DataMember(Name = "EarliestShipDate", EmitDefaultValue = false)]
        public DateTime EarliestShipDateTime { get; set; }

        [Obsolete("Use EarliestShipDateTime instead")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public Timestamp EarliestShipDate { get; set; }

        /// <summary>
        ///     The latest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format.
        /// </summary>
        /// <value>
        ///     The latest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time
        ///     format.
        /// </value>
        [DataMember(Name = "LatestShipDate", EmitDefaultValue = false)]
        public DateTime LatestShipDateTime { get; set; }

        [Obsolete("Use LatestShipDateTime instead")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public Timestamp LatestShipDate { get; set; }

        /// <summary>
        ///     The earliest date that the shipment is expected to arrive at its destination.
        /// </summary>
        /// <value>The earliest date that the shipment is expected to arrive at its destination.</value>
        [DataMember(Name = "EarliestArrivalDate", EmitDefaultValue = false)]
        public DateTime EarliestArrivalDateTime { get; set; }

        [Obsolete("Use EarliestArrivalDateTime instead")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public Timestamp EarliestArrivalDate { get; set; }

        /// <summary>
        ///     The latest date that the shipment is expected to arrive at its destination, in ISO 8601 date time format.
        /// </summary>
        /// <value>The latest date that the shipment is expected to arrive at its destination, in ISO 8601 date time format.</value>
        [DataMember(Name = "LatestArrivalDate", EmitDefaultValue = false)]
        public DateTime LatestArrivalDateTime { get; set; }

        [Obsolete("Use LatestArrivalDateTime instead")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public Timestamp LatestArrivalDate { get; set; }

        /// <summary>
        ///     Information about the items in the shipment.
        /// </summary>
        /// <value>Information about the items in the shipment.</value>
        [DataMember(Name = "FulfillmentPreviewItems", EmitDefaultValue = false)]
        public FulfillmentPreviewItemList FulfillmentPreviewItems { get; set; }

        /// <summary>
        ///     Returns true if FulfillmentPreviewShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentPreviewShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentPreviewShipment input)
        {
            if (input == null)
                return false;

            return
                (
                    EarliestShipDateTime == input.EarliestShipDateTime ||
                    EarliestShipDateTime.Equals(input.EarliestShipDateTime)
                ) &&
                (
                    LatestShipDateTime == input.LatestShipDateTime ||
                    LatestShipDateTime.Equals(input.LatestShipDateTime)
                ) &&
                (
                    EarliestArrivalDateTime == input.EarliestArrivalDateTime ||
                    EarliestArrivalDateTime.Equals(input.EarliestArrivalDateTime)
                ) &&
                (
                    LatestArrivalDateTime == input.LatestArrivalDateTime ||
                    LatestArrivalDateTime.Equals(input.LatestArrivalDateTime)
                ) &&
                (
                    FulfillmentPreviewItems == input.FulfillmentPreviewItems ||
                    (FulfillmentPreviewItems != null &&
                     FulfillmentPreviewItems.Equals(input.FulfillmentPreviewItems))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentPreviewShipment {\n");
            sb.Append("  EarliestShipDateTime: ").Append(EarliestShipDateTime).Append("\n");
            sb.Append("  LatestShipDateTime: ").Append(LatestShipDateTime).Append("\n");
            sb.Append("  EarliestArrivalDateTime: ").Append(EarliestArrivalDateTime).Append("\n");
            sb.Append("  LatestArrivalDateTime: ").Append(LatestArrivalDateTime).Append("\n");
            sb.Append("  FulfillmentPreviewItems: ").Append(FulfillmentPreviewItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FulfillmentPreviewShipment);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (EarliestShipDate != null)
                    hashCode = hashCode * 59 + EarliestShipDate.GetHashCode();
                if (LatestShipDate != null)
                    hashCode = hashCode * 59 + LatestShipDate.GetHashCode();
                if (EarliestArrivalDate != null)
                    hashCode = hashCode * 59 + EarliestArrivalDate.GetHashCode();
                if (LatestArrivalDate != null)
                    hashCode = hashCode * 59 + LatestArrivalDate.GetHashCode();
                if (FulfillmentPreviewItems != null)
                    hashCode = hashCode * 59 + FulfillmentPreviewItems.GetHashCode();
                return hashCode;
            }
        }
    }
}