/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     Address information for tracking the package.
    /// </summary>
    [DataContract]
    public class TrackingAddress : IEquatable<TrackingAddress>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TrackingAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TrackingAddress()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TrackingAddress" /> class.
        /// </summary>
        /// <param name="City">The city. (required).</param>
        /// <param name="State">The state. (required).</param>
        /// <param name="Country">The country. (required).</param>
        public TrackingAddress(string City = default, string State = default, string Country = default)
        {
            // to ensure "City" is required (not null)
            if (City == null)
                throw new InvalidDataException("City is a required property for TrackingAddress and cannot be null");
            this.City = City;
            // to ensure "State" is required (not null)
            if (State == null)
                throw new InvalidDataException("State is a required property for TrackingAddress and cannot be null");
            this.State = State;
            // to ensure "Country" is required (not null)
            if (Country == null)
                throw new InvalidDataException("Country is a required property for TrackingAddress and cannot be null");
            this.Country = Country;
        }

        /// <summary>
        ///     The city.
        /// </summary>
        /// <value>The city.</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        ///     The state.
        /// </summary>
        /// <value>The state.</value>
        [DataMember(Name = "State", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        ///     The country.
        /// </summary>
        /// <value>The country.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        ///     Returns true if TrackingAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackingAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingAddress input)
        {
            if (input == null)
                return false;

            return
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    State == input.State ||
                    (State != null &&
                     State.Equals(input.State))
                ) &&
                (
                    Country == input.Country ||
                    (Country != null &&
                     Country.Equals(input.Country))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // City (string) maxLength
            if (City != null && City.Length > 150)
                yield return new ValidationResult("Invalid value for City, length must be less than 150.",
                    new[] { "City" });

            // State (string) maxLength
            if (State != null && State.Length > 150)
                yield return new ValidationResult("Invalid value for State, length must be less than 150.",
                    new[] { "State" });

            // Country (string) maxLength
            if (Country != null && Country.Length > 6)
                yield return new ValidationResult("Invalid value for Country, length must be less than 6.",
                    new[] { "Country" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingAddress {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TrackingAddress);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                return hashCode;
            }
        }
    }
}