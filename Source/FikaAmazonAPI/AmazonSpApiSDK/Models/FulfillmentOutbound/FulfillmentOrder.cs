/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     General information about a fulfillment order, including its status.
    /// </summary>
    [DataContract]
    public class FulfillmentOrder : IEquatable<FulfillmentOrder>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FulfillmentOrder()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        /// <param name="SellerFulfillmentOrderId">
        ///     The fulfillment order identifier submitted with the createFulfillmentOrder
        ///     operation. (required).
        /// </param>
        /// <param name="MarketplaceId">The identifier for the marketplace the fulfillment order is placed against. (required).</param>
        /// <param name="DisplayableOrderId">
        ///     A fulfillment order identifier submitted with the createFulfillmentOrder operation.
        ///     Displays as the order identifier in recipient-facing materials such as the packing slip. (required).
        /// </param>
        /// <param name="DisplayableOrderDateTime">
        ///     A date and time submitted with the createFulfillmentOrder operation. Displays as
        ///     the order date in recipient-facing materials such as the packing slip. (required).
        /// </param>
        /// <param name="DisplayableOrderComment">
        ///     A text block submitted with the createFulfillmentOrder operation. Displays in
        ///     recipient-facing materials such as the packing slip. (required).
        /// </param>
        /// <param name="ShippingSpeedCategory">ShippingSpeedCategory (required).</param>
        /// <param name="DeliveryWindow">DeliveryWindow.</param>
        /// <param name="DestinationAddress">
        ///     The destination address submitted with the createFulfillmentOrder operation.
        ///     (required).
        /// </param>
        /// <param name="FulfillmentAction">FulfillmentAction.</param>
        /// <param name="FulfillmentPolicy">FulfillmentPolicy.</param>
        /// <param name="FulfillmentMethod">Indicates the intended recipient channel for the order..</param>
        /// <param name="CODSettings">CODSettings.</param>
        /// <param name="ReceivedDateTime">
        ///     The date and time that the fulfillment order was received by an Amazon fulfillment
        ///     center. (required).
        /// </param>
        /// <param name="FulfillmentOrderStatus">FulfillmentOrderStatus (required).</param>
        /// <param name="StatusUpdatedDateTime">
        ///     The date and time that the status of the fulfillment order last changed, in ISO
        ///     8601 date time format. (required).
        /// </param>
        /// <param name="NotificationEmailList">NotificationEmailList.</param>
        public FulfillmentOrder(string SellerFulfillmentOrderId = default, string MarketplaceId = default,
            string DisplayableOrderId = default, DateTime DisplayableOrderDate = default,
            string DisplayableOrderComment = default, ShippingSpeedCategory ShippingSpeedCategory = default,
            DeliveryWindow DeliveryWindow = default, Address DestinationAddress = default,
            FulfillmentAction? FulfillmentAction = default, FulfillmentPolicy? FulfillmentPolicy = default,
            string FulfillmentMethod = default, CODSettings CODSettings = default, DateTime ReceivedDate = default,
            FulfillmentOrderStatus FulfillmentOrderStatus = default, DateTime? StatusUpdatedDate = null,
            NotificationEmailList NotificationEmails = default)
        {
            // to ensure "SellerFulfillmentOrderId" is required (not null)
            if (SellerFulfillmentOrderId == null)
                throw new InvalidDataException(
                    "SellerFulfillmentOrderId is a required property for FulfillmentOrder and cannot be null");
            this.SellerFulfillmentOrderId = SellerFulfillmentOrderId;
            // to ensure "MarketplaceId" is required (not null)
            if (MarketplaceId == null)
                throw new InvalidDataException(
                    "MarketplaceId is a required property for FulfillmentOrder and cannot be null");
            this.MarketplaceId = MarketplaceId;
            // to ensure "DisplayableOrderId" is required (not null)
            if (DisplayableOrderId == null)
                throw new InvalidDataException(
                    "DisplayableOrderId is a required property for FulfillmentOrder and cannot be null");
            this.DisplayableOrderId = DisplayableOrderId;
            // to ensure "DisplayableOrderDateTime" is required (not null)
            if (DisplayableOrderDate == null)
                throw new InvalidDataException(
                    "DisplayableOrderDate is a required property for FulfillmentOrder and cannot be null");
            this.DisplayableOrderDate = DisplayableOrderDate;
            // to ensure "DisplayableOrderComment" is required (not null)
            if (DisplayableOrderComment == null)
                throw new InvalidDataException(
                    "DisplayableOrderComment is a required property for FulfillmentOrder and cannot be null");
            this.DisplayableOrderComment = DisplayableOrderComment;
            // to ensure "ShippingSpeedCategory" is required (not null)
            if (ShippingSpeedCategory == null)
                throw new InvalidDataException(
                    "ShippingSpeedCategory is a required property for FulfillmentOrder and cannot be null");
            this.ShippingSpeedCategory = ShippingSpeedCategory;
            // to ensure "DestinationAddress" is required (not null)
            if (DestinationAddress == null)
                throw new InvalidDataException(
                    "DestinationAddress is a required property for FulfillmentOrder and cannot be null");
            this.DestinationAddress = DestinationAddress;
            // to ensure "ReceivedDateTime" is required (not null)
            if (ReceivedDate == null)
                throw new InvalidDataException(
                    "ReceivedDate is a required property for FulfillmentOrder and cannot be null");
            this.ReceivedDate = ReceivedDate;
            // to ensure "FulfillmentOrderStatus" is required (not null)
            if (FulfillmentOrderStatus == null)
                throw new InvalidDataException(
                    "FulfillmentOrderStatus is a required property for FulfillmentOrder and cannot be null");
            this.FulfillmentOrderStatus = FulfillmentOrderStatus;
            // to ensure "StatusUpdatedDateTime" is required (not null)
            if (StatusUpdatedDate == null)
                throw new InvalidDataException(
                    "StatusUpdatedDate is a required property for FulfillmentOrder and cannot be null");
            this.StatusUpdatedDate = StatusUpdatedDate;
            this.DeliveryWindow = DeliveryWindow;
            this.FulfillmentAction = FulfillmentAction;
            this.FulfillmentPolicy = FulfillmentPolicy;
            this.FulfillmentMethod = FulfillmentMethod;
            this.CODSettings = CODSettings;
            this.NotificationEmails = NotificationEmails;
        }

        /// <summary>
        ///     Gets or Sets ShippingSpeedCategory
        /// </summary>
        [DataMember(Name = "ShippingSpeedCategory", EmitDefaultValue = false)]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }

        /// <summary>
        ///     Gets or Sets FulfillmentAction
        /// </summary>
        [DataMember(Name = "FulfillmentAction", EmitDefaultValue = false)]
        public FulfillmentAction? FulfillmentAction { get; set; }

        /// <summary>
        ///     Gets or Sets FulfillmentPolicy
        /// </summary>
        [DataMember(Name = "FulfillmentPolicy", EmitDefaultValue = false)]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }

        /// <summary>
        ///     Gets or Sets FulfillmentOrderStatus
        /// </summary>
        [DataMember(Name = "FulfillmentOrderStatus", EmitDefaultValue = false)]
        public FulfillmentOrderStatus FulfillmentOrderStatus { get; set; }

        /// <summary>
        ///     The fulfillment order identifier submitted with the createFulfillmentOrder operation.
        /// </summary>
        /// <value>The fulfillment order identifier submitted with the createFulfillmentOrder operation.</value>
        [DataMember(Name = "SellerFulfillmentOrderId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        ///     The identifier for the marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The identifier for the marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order
        ///     identifier in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>
        ///     A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order
        ///     identifier in recipient-facing materials such as the packing slip.
        /// </value>
        [DataMember(Name = "DisplayableOrderId", EmitDefaultValue = false)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        ///     A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing
        ///     materials such as the packing slip.
        /// </summary>
        /// <value>
        ///     A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in
        ///     recipient-facing materials such as the packing slip.
        /// </value>
        [DataMember(Name = "DisplayableOrderDate", EmitDefaultValue = false)]
        public DateTime DisplayableOrderDate { get; set; }

        /// <summary>
        ///     A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as
        ///     the packing slip.
        /// </summary>
        /// <value>
        ///     A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as
        ///     the packing slip.
        /// </value>
        [DataMember(Name = "DisplayableOrderComment", EmitDefaultValue = false)]
        public string DisplayableOrderComment { get; set; }


        /// <summary>
        ///     Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name = "DeliveryWindow", EmitDefaultValue = false)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        ///     The destination address submitted with the createFulfillmentOrder operation.
        /// </summary>
        /// <value>The destination address submitted with the createFulfillmentOrder operation.</value>
        [DataMember(Name = "DestinationAddress", EmitDefaultValue = false)]
        public Address DestinationAddress { get; set; }


        /// <summary>
        ///     Indicates the intended recipient channel for the order.
        /// </summary>
        /// <value>Indicates the intended recipient channel for the order.</value>
        [DataMember(Name = "FulfillmentMethod", EmitDefaultValue = false)]
        public string FulfillmentMethod { get; set; }

        /// <summary>
        ///     Gets or Sets CODSettings
        /// </summary>
        [DataMember(Name = "CODSettings", EmitDefaultValue = false)]
        public CODSettings CODSettings { get; set; }

        /// <summary>
        ///     The date and time that the fulfillment order was received by an Amazon fulfillment center.
        /// </summary>
        /// <value>The date and time that the fulfillment order was received by an Amazon fulfillment center.</value>
        [DataMember(Name = "ReceivedDate", EmitDefaultValue = false)]
        public DateTime ReceivedDate { get; set; }


        /// <summary>
        ///     The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format.</value>
        [DataMember(Name = "StatusUpdatedDate", EmitDefaultValue = false)]
        public DateTime? StatusUpdatedDate { get; set; }

        /// <summary>
        ///     Gets or Sets NotificationEmails
        /// </summary>
        [DataMember(Name = "NotificationEmails", EmitDefaultValue = false)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        ///     Returns true if FulfillmentOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentOrder input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerFulfillmentOrderId == input.SellerFulfillmentOrderId ||
                    (SellerFulfillmentOrderId != null &&
                     SellerFulfillmentOrderId.Equals(input.SellerFulfillmentOrderId))
                ) &&
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    DisplayableOrderId == input.DisplayableOrderId ||
                    (DisplayableOrderId != null &&
                     DisplayableOrderId.Equals(input.DisplayableOrderId))
                ) &&
                (
                    DisplayableOrderDate == input.DisplayableOrderDate ||
                    (DisplayableOrderDate != null &&
                     DisplayableOrderDate.Equals(input.DisplayableOrderDate))
                ) &&
                (
                    DisplayableOrderComment == input.DisplayableOrderComment ||
                    (DisplayableOrderComment != null &&
                     DisplayableOrderComment.Equals(input.DisplayableOrderComment))
                ) &&
                (
                    ShippingSpeedCategory == input.ShippingSpeedCategory ||
                    (ShippingSpeedCategory != null &&
                     ShippingSpeedCategory.Equals(input.ShippingSpeedCategory))
                ) &&
                (
                    DeliveryWindow == input.DeliveryWindow ||
                    (DeliveryWindow != null &&
                     DeliveryWindow.Equals(input.DeliveryWindow))
                ) &&
                (
                    DestinationAddress == input.DestinationAddress ||
                    (DestinationAddress != null &&
                     DestinationAddress.Equals(input.DestinationAddress))
                ) &&
                (
                    FulfillmentAction == input.FulfillmentAction ||
                    (FulfillmentAction != null &&
                     FulfillmentAction.Equals(input.FulfillmentAction))
                ) &&
                (
                    FulfillmentPolicy == input.FulfillmentPolicy ||
                    (FulfillmentPolicy != null &&
                     FulfillmentPolicy.Equals(input.FulfillmentPolicy))
                ) &&
                (
                    FulfillmentMethod == input.FulfillmentMethod ||
                    (FulfillmentMethod != null &&
                     FulfillmentMethod.Equals(input.FulfillmentMethod))
                ) &&
                (
                    CODSettings == input.CODSettings ||
                    (CODSettings != null &&
                     CODSettings.Equals(input.CODSettings))
                ) &&
                (
                    ReceivedDate == input.ReceivedDate ||
                    (ReceivedDate != null &&
                     ReceivedDate.Equals(input.ReceivedDate))
                ) &&
                (
                    FulfillmentOrderStatus == input.FulfillmentOrderStatus ||
                    (FulfillmentOrderStatus != null &&
                     FulfillmentOrderStatus.Equals(input.FulfillmentOrderStatus))
                ) &&
                (
                    StatusUpdatedDate == input.StatusUpdatedDate ||
                    (StatusUpdatedDate != null &&
                     StatusUpdatedDate.Equals(input.StatusUpdatedDate))
                ) &&
                (
                    NotificationEmails == input.NotificationEmails ||
                    (NotificationEmails != null &&
                     NotificationEmails.Equals(input.NotificationEmails))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentOrder {\n");
            sb.Append("  SellerFulfillmentOrderId: ").Append(SellerFulfillmentOrderId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  DisplayableOrderId: ").Append(DisplayableOrderId).Append("\n");
            sb.Append("  DisplayableOrderDate: ").Append(DisplayableOrderDate).Append("\n");
            sb.Append("  DisplayableOrderComment: ").Append(DisplayableOrderComment).Append("\n");
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  FulfillmentAction: ").Append(FulfillmentAction).Append("\n");
            sb.Append("  FulfillmentPolicy: ").Append(FulfillmentPolicy).Append("\n");
            sb.Append("  FulfillmentMethod: ").Append(FulfillmentMethod).Append("\n");
            sb.Append("  CODSettings: ").Append(CODSettings).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  FulfillmentOrderStatus: ").Append(FulfillmentOrderStatus).Append("\n");
            sb.Append("  StatusUpdatedDate: ").Append(StatusUpdatedDate).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FulfillmentOrder);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerFulfillmentOrderId != null)
                    hashCode = hashCode * 59 + SellerFulfillmentOrderId.GetHashCode();
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (DisplayableOrderId != null)
                    hashCode = hashCode * 59 + DisplayableOrderId.GetHashCode();
                if (DisplayableOrderDate != null)
                    hashCode = hashCode * 59 + DisplayableOrderDate.GetHashCode();
                if (DisplayableOrderComment != null)
                    hashCode = hashCode * 59 + DisplayableOrderComment.GetHashCode();
                if (ShippingSpeedCategory != null)
                    hashCode = hashCode * 59 + ShippingSpeedCategory.GetHashCode();
                if (DeliveryWindow != null)
                    hashCode = hashCode * 59 + DeliveryWindow.GetHashCode();
                if (DestinationAddress != null)
                    hashCode = hashCode * 59 + DestinationAddress.GetHashCode();
                if (FulfillmentAction != null)
                    hashCode = hashCode * 59 + FulfillmentAction.GetHashCode();
                if (FulfillmentPolicy != null)
                    hashCode = hashCode * 59 + FulfillmentPolicy.GetHashCode();
                if (FulfillmentMethod != null)
                    hashCode = hashCode * 59 + FulfillmentMethod.GetHashCode();
                if (CODSettings != null)
                    hashCode = hashCode * 59 + CODSettings.GetHashCode();
                if (ReceivedDate != null)
                    hashCode = hashCode * 59 + ReceivedDate.GetHashCode();
                if (FulfillmentOrderStatus != null)
                    hashCode = hashCode * 59 + FulfillmentOrderStatus.GetHashCode();
                if (StatusUpdatedDate != null)
                    hashCode = hashCode * 59 + StatusUpdatedDate.GetHashCode();
                if (NotificationEmails != null)
                    hashCode = hashCode * 59 + NotificationEmails.GetHashCode();
                return hashCode;
            }
        }
    }
}