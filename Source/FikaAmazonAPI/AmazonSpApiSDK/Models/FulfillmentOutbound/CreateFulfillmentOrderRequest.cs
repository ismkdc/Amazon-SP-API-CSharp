/*
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    ///     The request body schema for the createFulfillmentOrder operation.
    /// </summary>
    [DataContract]
    public class CreateFulfillmentOrderRequest : IEquatable<CreateFulfillmentOrderRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateFulfillmentOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateFulfillmentOrderRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateFulfillmentOrderRequest" /> class.
        /// </summary>
        /// <param name="MarketplaceId">The marketplace the fulfillment order is placed against..</param>
        /// <param name="SellerFulfillmentOrderId">
        ///     A fulfillment order identifier that the seller creates to track their
        ///     fulfillment order. The SellerFulfillmentOrderId must be unique for each fulfillment order that a seller creates. If
        ///     the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use.
        ///     (required).
        /// </param>
        /// <param name="DisplayableOrderId">
        ///     A fulfillment order identifier that the seller creates. This value displays as the
        ///     order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of
        ///     DisplayableOrderId should match the order identifier that the seller provides to the recipient. The seller can use
        ///     the SellerFulfillmentOrderId for this value or they can specify an alternate value if they want the recipient to
        ///     reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from
        ///     one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.
        ///     (required).
        /// </param>
        /// <param name="DisplayableOrderDate">
        ///     The date and time of the fulfillment order. Displays as the order date in
        ///     recipient-facing materials such as the outbound shipment packing slip. (required).
        /// </param>
        /// <param name="DisplayableOrderComment">
        ///     Order-specific text that appears in recipient-facing materials such as the
        ///     outbound shipment packing slip. (required).
        /// </param>
        /// <param name="ShippingSpeedCategory">The shipping method for the fulfillment order. (required).</param>
        /// <param name="DeliveryWindow">DeliveryWindow.</param>
        /// <param name="DestinationAddress">The destination address for the fulfillment order. (required).</param>
        /// <param name="FulfillmentAction">FulfillmentAction.</param>
        /// <param name="FulfillmentPolicy">FulfillmentPolicy.</param>
        /// <param name="FulfillmentMethod">Indicates the intended recipient channel for the order..</param>
        /// <param name="CODSettings">CODSettings.</param>
        /// <param name="ShipFromCountryCode">
        ///     The two-character country code for the country from which the fulfillment order
        ///     ships. Must be in ISO 3166-1 alpha-2 format..
        /// </param>
        /// <param name="NotificationEmailList">NotificationEmailList.</param>
        /// <param name="Items">A list of items to include in the fulfillment order preview, including quantity. (required).</param>
        [Obsolete(
            "FulfillmentMethod no longer used and ShippingSpeedCategory is deprecated, use the other constructor instead")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public CreateFulfillmentOrderRequest(string MarketplaceId = default, string SellerFulfillmentOrderId = default,
            string DisplayableOrderId = default, DateTime? DisplayableOrderDate = default,
            string DisplayableOrderComment = default, string ShippingSpeedCategory = null,
            DeliveryWindow DeliveryWindow = default, Address DestinationAddress = default,
            FulfillmentAction? FulfillmentAction = default, FulfillmentPolicy? FulfillmentPolicy = default,
            string FulfillmentMethod = default, CODSettings CODSettings = default, string ShipFromCountryCode = default,
            NotificationEmailList NotificationEmails = default, CreateFulfillmentOrderItemList Items = default)
        {
            // to ensure "SellerFulfillmentOrderId" is required (not null)
            if (SellerFulfillmentOrderId == null)
                throw new InvalidDataException(
                    "SellerFulfillmentOrderId is a required property for CreateFulfillmentOrderRequest and cannot be null");
            this.SellerFulfillmentOrderId = SellerFulfillmentOrderId;
            // to ensure "DisplayableOrderId" is required (not null)
            if (DisplayableOrderId == null)
                throw new InvalidDataException(
                    "DisplayableOrderId is a required property for CreateFulfillmentOrderRequest and cannot be null");
            this.DisplayableOrderId = DisplayableOrderId;
            // to ensure "DisplayableOrderDate" is required (not null)
            if (DisplayableOrderDate == null)
                throw new InvalidDataException(
                    "DisplayableOrderDate is a required property for CreateFulfillmentOrderRequest and cannot be null");
            this.DisplayableOrderDate = DisplayableOrderDate.Value;
            // to ensure "DisplayableOrderComment" is required (not null)
            if (DisplayableOrderComment == null)
                throw new InvalidDataException(
                    "DisplayableOrderComment is a required property for CreateFulfillmentOrderRequest and cannot be null");
            this.DisplayableOrderComment = DisplayableOrderComment;
            // to ensure "ShippingSpeedCategory" is required (not null)
            if (ShippingSpeedCategory == null)
                throw new InvalidDataException(
                    "ShippingSpeedCategory is a required property for CreateFulfillmentOrderRequest and cannot be null");
#pragma warning disable 0618
            this.ShippingSpeedCategory = ShippingSpeedCategory;
#pragma warning restore 0618
            // to ensure "DestinationAddress" is required (not null)
            if (DestinationAddress == null)
                throw new InvalidDataException(
                    "DestinationAddress is a required property for CreateFulfillmentOrderRequest and cannot be null");
            this.DestinationAddress = DestinationAddress;
            // to ensure "Items" is required (not null)
            if (Items == null)
                throw new InvalidDataException(
                    "Items is a required property for CreateFulfillmentOrderRequest and cannot be null");
            this.Items = Items;
            this.MarketplaceId = MarketplaceId;
            this.DeliveryWindow = DeliveryWindow;
            this.FulfillmentAction = FulfillmentAction;
            this.FulfillmentPolicy = FulfillmentPolicy;
            this.CODSettings = CODSettings;
            this.ShipFromCountryCode = ShipFromCountryCode;
            this.NotificationEmails = NotificationEmails;
        }
#pragma warning disable 0618
        public CreateFulfillmentOrderRequest(string MarketplaceId = default, string SellerFulfillmentOrderId = default,
            string DisplayableOrderId = default, DateTime? DisplayableOrderDate = default,
            string DisplayableOrderComment = default, ShippingSpeedCategory? ShippingSpeedCategory = default,
            DeliveryWindow DeliveryWindow = default, Address DestinationAddress = default,
            FulfillmentAction? FulfillmentAction = default, FulfillmentPolicy? FulfillmentPolicy = default,
            CODSettings CODSettings = default, string ShipFromCountryCode = default,
            NotificationEmailList NotificationEmails = default, CreateFulfillmentOrderItemList Items = default)
            : this(MarketplaceId, SellerFulfillmentOrderId, DisplayableOrderId, DisplayableOrderDate,
                DisplayableOrderComment, ShippingSpeedCategory?.ToString(), DeliveryWindow, DestinationAddress,
                FulfillmentAction, FulfillmentPolicy, null, CODSettings, ShipFromCountryCode, NotificationEmails, Items)
        {
        }
#pragma warning restore 0618
        /// <summary>
        ///     The shipping method for the fulfillment order.
        /// </summary>
        /// <value>The shipping method for the fulfillment order.</value>
        [DataMember(Name = "shippingSpeedCategory", EmitDefaultValue = false)]
        [Obsolete("Use ShippingSpeedCategoryMethod instead")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public string ShippingSpeedCategory { get; set; }

        public ShippingSpeedCategory ShippingSpeedCategoryMethod
        {
#pragma warning disable 0618
            get => (ShippingSpeedCategory)Enum.Parse(typeof(ShippingSpeedCategory), ShippingSpeedCategory, true);
            set => ShippingSpeedCategory = value.ToString();
#pragma warning restore 0618
        }

        /// <summary>
        ///     Gets or Sets FulfillmentAction
        /// </summary>
        [DataMember(Name = "fulfillmentAction", EmitDefaultValue = false)]
        public FulfillmentAction? FulfillmentAction { get; set; }

        /// <summary>
        ///     Gets or Sets FulfillmentPolicy
        /// </summary>
        [DataMember(Name = "fulfillmentPolicy", EmitDefaultValue = false)]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }

        /// <summary>
        ///     The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     A fulfillment order identifier that the seller creates to track their fulfillment order. The
        ///     SellerFulfillmentOrderId must be unique for each fulfillment order that a seller creates. If the seller&#39;s
        ///     system already creates unique order identifiers, then these might be good values for them to use.
        /// </summary>
        /// <value>
        ///     A fulfillment order identifier that the seller creates to track their fulfillment order. The
        ///     SellerFulfillmentOrderId must be unique for each fulfillment order that a seller creates. If the seller&#39;s
        ///     system already creates unique order identifiers, then these might be good values for them to use.
        /// </value>
        [DataMember(Name = "sellerFulfillmentOrderId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        ///     A fulfillment order identifier that the seller creates. This value displays as the order identifier in
        ///     recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match
        ///     the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for
        ///     this value or they can specify an alternate value if they want the recipient to reference an alternate order
        ///     identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length.
        ///     Cannot contain two spaces in a row. Leading and trailing white space is removed.
        /// </summary>
        /// <value>
        ///     A fulfillment order identifier that the seller creates. This value displays as the order identifier in
        ///     recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match
        ///     the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for
        ///     this value or they can specify an alternate value if they want the recipient to reference an alternate order
        ///     identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length.
        ///     Cannot contain two spaces in a row. Leading and trailing white space is removed.
        /// </value>
        [DataMember(Name = "displayableOrderId", EmitDefaultValue = false)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        ///     The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the
        ///     outbound shipment packing slip.
        /// </summary>
        /// <value>
        ///     The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the
        ///     outbound shipment packing slip.
        /// </value>
        [DataMember(Name = "displayableOrderDate", EmitDefaultValue = false)]
        public DateTime DisplayableOrderDate { get; set; }

        /// <summary>
        ///     Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        /// <value>Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.</value>
        [DataMember(Name = "displayableOrderComment", EmitDefaultValue = false)]
        public string DisplayableOrderComment { get; set; }


        /// <summary>
        ///     Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name = "deliveryWindow", EmitDefaultValue = false)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        ///     The destination address for the fulfillment order.
        /// </summary>
        /// <value>The destination address for the fulfillment order.</value>
        [DataMember(Name = "destinationAddress", EmitDefaultValue = false)]
        public Address DestinationAddress { get; set; }


        /// <summary>
        ///     Indicates the intended recipient channel for the order.
        /// </summary>
        /// <value>Indicates the intended recipient channel for the order.</value>
        [DataMember(Name = "FulfillmentMethod", EmitDefaultValue = false)]
        [Obsolete("Property no longer used")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public string FulfillmentMethod { get; set; }

        /// <summary>
        ///     Gets or Sets CODSettings
        /// </summary>
        [DataMember(Name = "codSettings", EmitDefaultValue = false)]
        public CODSettings CODSettings { get; set; }

        /// <summary>
        ///     The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1
        ///     alpha-2 format.
        /// </summary>
        /// <value>
        ///     The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1
        ///     alpha-2 format.
        /// </value>
        [DataMember(Name = "shipFromCountryCode", EmitDefaultValue = false)]
        public string ShipFromCountryCode { get; set; }

        /// <summary>
        ///     Gets or Sets NotificationEmails
        /// </summary>
        [DataMember(Name = "notificationEmails", EmitDefaultValue = false)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        ///     A list of items to include in the fulfillment order preview, including quantity.
        /// </summary>
        /// <value>A list of items to include in the fulfillment order preview, including quantity.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public CreateFulfillmentOrderItemList Items { get; set; }

        /// <summary>
        ///     Returns true if CreateFulfillmentOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFulfillmentOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFulfillmentOrderRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    SellerFulfillmentOrderId == input.SellerFulfillmentOrderId ||
                    (SellerFulfillmentOrderId != null &&
                     SellerFulfillmentOrderId.Equals(input.SellerFulfillmentOrderId))
                ) &&
                (
                    DisplayableOrderId == input.DisplayableOrderId ||
                    (DisplayableOrderId != null &&
                     DisplayableOrderId.Equals(input.DisplayableOrderId))
                ) &&
                (
                    DisplayableOrderDate == input.DisplayableOrderDate ||
                    (DisplayableOrderDate != null &&
                     DisplayableOrderDate.Equals(input.DisplayableOrderDate))
                ) &&
                (
                    DisplayableOrderComment == input.DisplayableOrderComment ||
                    (DisplayableOrderComment != null &&
                     DisplayableOrderComment.Equals(input.DisplayableOrderComment))
                ) &&
                (
#pragma warning disable 0618
                    ShippingSpeedCategory == input.ShippingSpeedCategory ||
                    (ShippingSpeedCategory != null &&
                     ShippingSpeedCategory.Equals(input.ShippingSpeedCategory))
#pragma warning restore 0618
                ) &&
                (
                    DeliveryWindow == input.DeliveryWindow ||
                    (DeliveryWindow != null &&
                     DeliveryWindow.Equals(input.DeliveryWindow))
                ) &&
                (
                    DestinationAddress == input.DestinationAddress ||
                    (DestinationAddress != null &&
                     DestinationAddress.Equals(input.DestinationAddress))
                ) &&
                (
                    FulfillmentAction == input.FulfillmentAction ||
                    (FulfillmentAction != null &&
                     FulfillmentAction.Equals(input.FulfillmentAction))
                ) &&
                (
                    FulfillmentPolicy == input.FulfillmentPolicy ||
                    (FulfillmentPolicy != null &&
                     FulfillmentPolicy.Equals(input.FulfillmentPolicy))
                ) &&
                (
                    CODSettings == input.CODSettings ||
                    (CODSettings != null &&
                     CODSettings.Equals(input.CODSettings))
                ) &&
                (
                    ShipFromCountryCode == input.ShipFromCountryCode ||
                    (ShipFromCountryCode != null &&
                     ShipFromCountryCode.Equals(input.ShipFromCountryCode))
                ) &&
                (
                    NotificationEmails == input.NotificationEmails ||
                    (NotificationEmails != null &&
                     NotificationEmails.Equals(input.NotificationEmails))
                ) &&
                (
                    Items == input.Items ||
                    (Items != null &&
                     Items.Equals(input.Items))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellerFulfillmentOrderId (string) maxLength
            if (SellerFulfillmentOrderId != null && SellerFulfillmentOrderId.Length > 40)
                yield return new ValidationResult(
                    "Invalid value for SellerFulfillmentOrderId, length must be less than 40.",
                    new[] { "SellerFulfillmentOrderId" });

            // DisplayableOrderId (string) maxLength
            if (DisplayableOrderId != null && DisplayableOrderId.Length > 40)
                yield return new ValidationResult("Invalid value for DisplayableOrderId, length must be less than 40.",
                    new[] { "DisplayableOrderId" });

            // DisplayableOrderComment (string) maxLength
            if (DisplayableOrderComment != null && DisplayableOrderComment.Length > 1000)
                yield return new ValidationResult(
                    "Invalid value for DisplayableOrderComment, length must be less than 1000.",
                    new[] { "DisplayableOrderComment" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFulfillmentOrderRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerFulfillmentOrderId: ").Append(SellerFulfillmentOrderId).Append("\n");
            sb.Append("  DisplayableOrderId: ").Append(DisplayableOrderId).Append("\n");
            sb.Append("  DisplayableOrderDate: ").Append(DisplayableOrderDate).Append("\n");
            sb.Append("  DisplayableOrderComment: ").Append(DisplayableOrderComment).Append("\n");
#pragma warning disable 0618
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
#pragma warning restore 0618
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  FulfillmentAction: ").Append(FulfillmentAction).Append("\n");
            sb.Append("  FulfillmentPolicy: ").Append(FulfillmentPolicy).Append("\n");
            sb.Append("  CODSettings: ").Append(CODSettings).Append("\n");
            sb.Append("  ShipFromCountryCode: ").Append(ShipFromCountryCode).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreateFulfillmentOrderRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (SellerFulfillmentOrderId != null)
                    hashCode = hashCode * 59 + SellerFulfillmentOrderId.GetHashCode();
                if (DisplayableOrderId != null)
                    hashCode = hashCode * 59 + DisplayableOrderId.GetHashCode();
                if (DisplayableOrderDate != null)
                    hashCode = hashCode * 59 + DisplayableOrderDate.GetHashCode();
                if (DisplayableOrderComment != null)
                    hashCode = hashCode * 59 + DisplayableOrderComment.GetHashCode();
#pragma warning disable 0618
                if (ShippingSpeedCategory != null)
                    hashCode = hashCode * 59 + ShippingSpeedCategory.GetHashCode();
#pragma warning restore 0618
                if (DeliveryWindow != null)
                    hashCode = hashCode * 59 + DeliveryWindow.GetHashCode();
                if (DestinationAddress != null)
                    hashCode = hashCode * 59 + DestinationAddress.GetHashCode();
                if (FulfillmentAction != null)
                    hashCode = hashCode * 59 + FulfillmentAction.GetHashCode();
                if (FulfillmentPolicy != null)
                    hashCode = hashCode * 59 + FulfillmentPolicy.GetHashCode();
                if (CODSettings != null)
                    hashCode = hashCode * 59 + CODSettings.GetHashCode();
                if (ShipFromCountryCode != null)
                    hashCode = hashCode * 59 + ShipFromCountryCode.GetHashCode();
                if (NotificationEmails != null)
                    hashCode = hashCode * 59 + NotificationEmails.GetHashCode();
                if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }
    }
}