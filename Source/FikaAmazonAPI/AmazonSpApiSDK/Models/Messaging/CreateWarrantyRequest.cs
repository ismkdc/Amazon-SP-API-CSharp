/*
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Messaging
{
    /// <summary>
    ///     The request schema for the createWarranty operation.
    /// </summary>
    [DataContract]
    public class CreateWarrantyRequest : IEquatable<CreateWarrantyRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateWarrantyRequest" /> class.
        /// </summary>
        /// <param name="attachments">
        ///     Attachments to include in the message to the buyer. If any text is included in the
        ///     attachment, the text must be written in the buyer&#39;s language of preference, which can be retrieved from the
        ///     GetAttributes operation..
        /// </param>
        /// <param name="coverageStartDate">The start date of the warranty coverage to include in the message to the buyer..</param>
        /// <param name="coverageEndDate">The end date of the warranty coverage to include in the message to the buyer..</param>
        public CreateWarrantyRequest(List<Attachment> attachments = default, DateTime? coverageStartDate = default,
            DateTime? coverageEndDate = default)
        {
            Attachments = attachments;
            CoverageStartDate = coverageStartDate;
            CoverageEndDate = coverageEndDate;
        }

        /// <summary>
        ///     Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be
        ///     written in the buyer&#39;s language of preference, which can be retrieved from the GetAttributes operation.
        /// </summary>
        /// <value>
        ///     Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be
        ///     written in the buyer&#39;s language of preference, which can be retrieved from the GetAttributes operation.
        /// </value>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        ///     The start date of the warranty coverage to include in the message to the buyer.
        /// </summary>
        /// <value>The start date of the warranty coverage to include in the message to the buyer.</value>
        [DataMember(Name = "coverageStartDate", EmitDefaultValue = false)]
        public DateTime? CoverageStartDate { get; set; }

        /// <summary>
        ///     The end date of the warranty coverage to include in the message to the buyer.
        /// </summary>
        /// <value>The end date of the warranty coverage to include in the message to the buyer.</value>
        [DataMember(Name = "coverageEndDate", EmitDefaultValue = false)]
        public DateTime? CoverageEndDate { get; set; }

        /// <summary>
        ///     Returns true if CreateWarrantyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWarrantyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWarrantyRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Attachments == input.Attachments ||
                    (Attachments != null &&
                     Attachments.SequenceEqual(input.Attachments))
                ) &&
                (
                    CoverageStartDate == input.CoverageStartDate ||
                    (CoverageStartDate != null &&
                     CoverageStartDate.Equals(input.CoverageStartDate))
                ) &&
                (
                    CoverageEndDate == input.CoverageEndDate ||
                    (CoverageEndDate != null &&
                     CoverageEndDate.Equals(input.CoverageEndDate))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateWarrantyRequest {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  CoverageStartDate: ").Append(CoverageStartDate).Append("\n");
            sb.Append("  CoverageEndDate: ").Append(CoverageEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreateWarrantyRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                if (CoverageStartDate != null)
                    hashCode = hashCode * 59 + CoverageStartDate.GetHashCode();
                if (CoverageEndDate != null)
                    hashCode = hashCode * 59 + CoverageEndDate.GetHashCode();
                return hashCode;
            }
        }
    }
}