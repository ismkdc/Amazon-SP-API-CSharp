/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    ///     A promotion applied to an item.
    /// </summary>
    [DataContract]
    public class Promotion : IEquatable<Promotion>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        /// <param name="PromotionType">The type of promotion..</param>
        /// <param name="PromotionId">The seller-specified identifier for the promotion..</param>
        /// <param name="PromotionAmount">The amount of promotional discount applied to the item..</param>
        public Promotion(string PromotionType = default, string PromotionId = default,
            Currency PromotionAmount = default)
        {
            this.PromotionType = PromotionType;
            this.PromotionId = PromotionId;
            this.PromotionAmount = PromotionAmount;
        }

        /// <summary>
        ///     The type of promotion.
        /// </summary>
        /// <value>The type of promotion.</value>
        [DataMember(Name = "PromotionType", EmitDefaultValue = false)]
        public string PromotionType { get; set; }

        /// <summary>
        ///     The seller-specified identifier for the promotion.
        /// </summary>
        /// <value>The seller-specified identifier for the promotion.</value>
        [DataMember(Name = "PromotionId", EmitDefaultValue = false)]
        public string PromotionId { get; set; }

        /// <summary>
        ///     The amount of promotional discount applied to the item.
        /// </summary>
        /// <value>The amount of promotional discount applied to the item.</value>
        [DataMember(Name = "PromotionAmount", EmitDefaultValue = false)]
        public Currency PromotionAmount { get; set; }

        /// <summary>
        ///     Returns true if Promotion instances are equal
        /// </summary>
        /// <param name="input">Instance of Promotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Promotion input)
        {
            if (input == null)
                return false;

            return
                (
                    PromotionType == input.PromotionType ||
                    (PromotionType != null &&
                     PromotionType.Equals(input.PromotionType))
                ) &&
                (
                    PromotionId == input.PromotionId ||
                    (PromotionId != null &&
                     PromotionId.Equals(input.PromotionId))
                ) &&
                (
                    PromotionAmount == input.PromotionAmount ||
                    (PromotionAmount != null &&
                     PromotionAmount.Equals(input.PromotionAmount))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Promotion {\n");
            sb.Append("  PromotionType: ").Append(PromotionType).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  PromotionAmount: ").Append(PromotionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Promotion);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (PromotionType != null)
                    hashCode = hashCode * 59 + PromotionType.GetHashCode();
                if (PromotionId != null)
                    hashCode = hashCode * 59 + PromotionId.GetHashCode();
                if (PromotionAmount != null)
                    hashCode = hashCode * 59 + PromotionAmount.GetHashCode();
                return hashCode;
            }
        }
    }
}