/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    ///     A Sponsored Products payment event.
    /// </summary>
    [DataContract]
    public class ProductAdsPaymentEvent : IEquatable<ProductAdsPaymentEvent>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ProductAdsPaymentEvent" /> class.
        /// </summary>
        /// <param name="PostedDate">The date and time when the financial event was posted..</param>
        /// <param name="TransactionType">
        ///     Indicates if the transaction is for a charge or a refund.  Possible values:  * charge -
        ///     Charge  * refund - Refund.
        /// </param>
        /// <param name="InvoiceId">Identifier for the invoice that the transaction appears in..</param>
        /// <param name="BaseValue">Base amount of the transaction, before tax..</param>
        /// <param name="TaxValue">Tax amount of the transaction..</param>
        /// <param name="TransactionValue">The total amount of the transaction. Equal to baseValue + taxValue..</param>
        public ProductAdsPaymentEvent(DateTime? PostedDate = default, string TransactionType = default,
            string InvoiceId = default, Currency BaseValue = default, Currency TaxValue = default,
            Currency TransactionValue = default)
        {
            this.PostedDate = PostedDate;
            this.TransactionType = TransactionType;
            this.InvoiceId = InvoiceId;
            this.BaseValue = BaseValue;
            this.TaxValue = TaxValue;
            this.TransactionValue = TransactionValue;
        }

        /// <summary>
        ///     The date and time when the financial event was posted.
        /// </summary>
        /// <value>The date and time when the financial event was posted.</value>
        [DataMember(Name = "postedDate", EmitDefaultValue = false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        ///     Indicates if the transaction is for a charge or a refund.  Possible values:  * charge - Charge  * refund - Refund
        /// </summary>
        /// <value>
        ///     Indicates if the transaction is for a charge or a refund.  Possible values:  * charge - Charge  * refund -
        ///     Refund
        /// </value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        ///     Identifier for the invoice that the transaction appears in.
        /// </summary>
        /// <value>Identifier for the invoice that the transaction appears in.</value>
        [DataMember(Name = "invoiceId", EmitDefaultValue = false)]
        public string InvoiceId { get; set; }

        /// <summary>
        ///     Base amount of the transaction, before tax.
        /// </summary>
        /// <value>Base amount of the transaction, before tax.</value>
        [DataMember(Name = "baseValue", EmitDefaultValue = false)]
        public Currency BaseValue { get; set; }

        /// <summary>
        ///     Tax amount of the transaction.
        /// </summary>
        /// <value>Tax amount of the transaction.</value>
        [DataMember(Name = "taxValue", EmitDefaultValue = false)]
        public Currency TaxValue { get; set; }

        /// <summary>
        ///     The total amount of the transaction. Equal to baseValue + taxValue.
        /// </summary>
        /// <value>The total amount of the transaction. Equal to baseValue + taxValue.</value>
        [DataMember(Name = "transactionValue", EmitDefaultValue = false)]
        public Currency TransactionValue { get; set; }

        /// <summary>
        ///     Returns true if ProductAdsPaymentEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductAdsPaymentEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductAdsPaymentEvent input)
        {
            if (input == null)
                return false;

            return
                (
                    PostedDate == input.PostedDate ||
                    (PostedDate != null &&
                     PostedDate.Equals(input.PostedDate))
                ) &&
                (
                    TransactionType == input.TransactionType ||
                    (TransactionType != null &&
                     TransactionType.Equals(input.TransactionType))
                ) &&
                (
                    InvoiceId == input.InvoiceId ||
                    (InvoiceId != null &&
                     InvoiceId.Equals(input.InvoiceId))
                ) &&
                (
                    BaseValue == input.BaseValue ||
                    (BaseValue != null &&
                     BaseValue.Equals(input.BaseValue))
                ) &&
                (
                    TaxValue == input.TaxValue ||
                    (TaxValue != null &&
                     TaxValue.Equals(input.TaxValue))
                ) &&
                (
                    TransactionValue == input.TransactionValue ||
                    (TransactionValue != null &&
                     TransactionValue.Equals(input.TransactionValue))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductAdsPaymentEvent {\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  BaseValue: ").Append(BaseValue).Append("\n");
            sb.Append("  TaxValue: ").Append(TaxValue).Append("\n");
            sb.Append("  TransactionValue: ").Append(TransactionValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ProductAdsPaymentEvent);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (PostedDate != null)
                    hashCode = hashCode * 59 + PostedDate.GetHashCode();
                if (TransactionType != null)
                    hashCode = hashCode * 59 + TransactionType.GetHashCode();
                if (InvoiceId != null)
                    hashCode = hashCode * 59 + InvoiceId.GetHashCode();
                if (BaseValue != null)
                    hashCode = hashCode * 59 + BaseValue.GetHashCode();
                if (TaxValue != null)
                    hashCode = hashCode * 59 + TaxValue.GetHashCode();
                if (TransactionValue != null)
                    hashCode = hashCode * 59 + TransactionValue.GetHashCode();
                return hashCode;
            }
        }
    }
}