/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    ///     A fee payment event for the Early Reviewer Program.
    /// </summary>
    [DataContract]
    public class SellerReviewEnrollmentPaymentEvent : IEquatable<SellerReviewEnrollmentPaymentEvent>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SellerReviewEnrollmentPaymentEvent" /> class.
        /// </summary>
        /// <param name="PostedDate">The date and time when the financial event was posted..</param>
        /// <param name="EnrollmentId">An enrollment identifier..</param>
        /// <param name="ParentASIN">
        ///     The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early
        ///     Reviewer Program..
        /// </param>
        /// <param name="FeeComponent">FeeComponent.</param>
        /// <param name="ChargeComponent">ChargeComponent.</param>
        /// <param name="TotalAmount">The FeeComponent value plus the ChargeComponent value..</param>
        public SellerReviewEnrollmentPaymentEvent(DateTime? PostedDate = default, string EnrollmentId = default,
            string ParentASIN = default, FeeComponent FeeComponent = default, ChargeComponent ChargeComponent = default,
            Currency TotalAmount = default)
        {
            this.PostedDate = PostedDate;
            this.EnrollmentId = EnrollmentId;
            this.ParentASIN = ParentASIN;
            this.FeeComponent = FeeComponent;
            this.ChargeComponent = ChargeComponent;
            this.TotalAmount = TotalAmount;
        }

        /// <summary>
        ///     The date and time when the financial event was posted.
        /// </summary>
        /// <value>The date and time when the financial event was posted.</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        ///     An enrollment identifier.
        /// </summary>
        /// <value>An enrollment identifier.</value>
        [DataMember(Name = "EnrollmentId", EmitDefaultValue = false)]
        public string EnrollmentId { get; set; }

        /// <summary>
        ///     The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.</value>
        [DataMember(Name = "ParentASIN", EmitDefaultValue = false)]
        public string ParentASIN { get; set; }

        /// <summary>
        ///     Gets or Sets FeeComponent
        /// </summary>
        [DataMember(Name = "FeeComponent", EmitDefaultValue = false)]
        public FeeComponent FeeComponent { get; set; }

        /// <summary>
        ///     Gets or Sets ChargeComponent
        /// </summary>
        [DataMember(Name = "ChargeComponent", EmitDefaultValue = false)]
        public ChargeComponent ChargeComponent { get; set; }

        /// <summary>
        ///     The FeeComponent value plus the ChargeComponent value.
        /// </summary>
        /// <value>The FeeComponent value plus the ChargeComponent value.</value>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        ///     Returns true if SellerReviewEnrollmentPaymentEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of SellerReviewEnrollmentPaymentEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellerReviewEnrollmentPaymentEvent input)
        {
            if (input == null)
                return false;

            return
                (
                    PostedDate == input.PostedDate ||
                    (PostedDate != null &&
                     PostedDate.Equals(input.PostedDate))
                ) &&
                (
                    EnrollmentId == input.EnrollmentId ||
                    (EnrollmentId != null &&
                     EnrollmentId.Equals(input.EnrollmentId))
                ) &&
                (
                    ParentASIN == input.ParentASIN ||
                    (ParentASIN != null &&
                     ParentASIN.Equals(input.ParentASIN))
                ) &&
                (
                    FeeComponent == input.FeeComponent ||
                    (FeeComponent != null &&
                     FeeComponent.Equals(input.FeeComponent))
                ) &&
                (
                    ChargeComponent == input.ChargeComponent ||
                    (ChargeComponent != null &&
                     ChargeComponent.Equals(input.ChargeComponent))
                ) &&
                (
                    TotalAmount == input.TotalAmount ||
                    (TotalAmount != null &&
                     TotalAmount.Equals(input.TotalAmount))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellerReviewEnrollmentPaymentEvent {\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  EnrollmentId: ").Append(EnrollmentId).Append("\n");
            sb.Append("  ParentASIN: ").Append(ParentASIN).Append("\n");
            sb.Append("  FeeComponent: ").Append(FeeComponent).Append("\n");
            sb.Append("  ChargeComponent: ").Append(ChargeComponent).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SellerReviewEnrollmentPaymentEvent);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (PostedDate != null)
                    hashCode = hashCode * 59 + PostedDate.GetHashCode();
                if (EnrollmentId != null)
                    hashCode = hashCode * 59 + EnrollmentId.GetHashCode();
                if (ParentASIN != null)
                    hashCode = hashCode * 59 + ParentASIN.GetHashCode();
                if (FeeComponent != null)
                    hashCode = hashCode * 59 + FeeComponent.GetHashCode();
                if (ChargeComponent != null)
                    hashCode = hashCode * 59 + ChargeComponent.GetHashCode();
                if (TotalAmount != null)
                    hashCode = hashCode * 59 + TotalAmount.GetHashCode();
                return hashCode;
            }
        }
    }
}