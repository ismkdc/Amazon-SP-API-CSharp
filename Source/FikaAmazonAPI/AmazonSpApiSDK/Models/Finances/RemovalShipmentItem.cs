/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    ///     Item-level information for a removal shipment.
    /// </summary>
    [DataContract]
    public class RemovalShipmentItem : IEquatable<RemovalShipmentItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="RemovalShipmentItem" /> class.
        /// </summary>
        /// <param name="RemovalShipmentItemId">An identifier for an item in a removal shipment..</param>
        /// <param name="TaxCollectionModel">
        ///     The tax collection model applied to the item.  Possible values:  *
        ///     MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  *
        ///     Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon..
        /// </param>
        /// <param name="FulfillmentNetworkSKU">The Amazon fulfillment network SKU for the item..</param>
        /// <param name="Quantity">The quantity of the item..</param>
        /// <param name="Revenue">The total amount paid to the seller for the removed item..</param>
        /// <param name="FeeAmount">
        ///     The fee that Amazon charged to the seller for the removal of the item. The amount is a negative
        ///     number..
        /// </param>
        /// <param name="TaxAmount">Tax collected on the revenue..</param>
        /// <param name="TaxWithheld">
        ///     The tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If
        ///     TaxCollectionModel&#x3D;MarketplaceFacilitator, then TaxWithheld&#x3D;TaxAmount (except the TaxWithheld amount is a
        ///     negative number). Otherwise TaxWithheld&#x3D;0..
        /// </param>
        public RemovalShipmentItem(string RemovalShipmentItemId = default, string TaxCollectionModel = default,
            string FulfillmentNetworkSKU = default, int? Quantity = default, Currency Revenue = default,
            Currency FeeAmount = default, Currency TaxAmount = default, Currency TaxWithheld = default)
        {
            this.RemovalShipmentItemId = RemovalShipmentItemId;
            this.TaxCollectionModel = TaxCollectionModel;
            this.FulfillmentNetworkSKU = FulfillmentNetworkSKU;
            this.Quantity = Quantity;
            this.Revenue = Revenue;
            this.FeeAmount = FeeAmount;
            this.TaxAmount = TaxAmount;
            this.TaxWithheld = TaxWithheld;
        }

        /// <summary>
        ///     An identifier for an item in a removal shipment.
        /// </summary>
        /// <value>An identifier for an item in a removal shipment.</value>
        [DataMember(Name = "RemovalShipmentItemId", EmitDefaultValue = false)]
        public string RemovalShipmentItemId { get; set; }

        /// <summary>
        ///     The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and
        ///     remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not
        ///     remitted to the taxing authority by Amazon.
        /// </summary>
        /// <value>
        ///     The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and
        ///     remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not
        ///     remitted to the taxing authority by Amazon.
        /// </value>
        [DataMember(Name = "TaxCollectionModel", EmitDefaultValue = false)]
        public string TaxCollectionModel { get; set; }

        /// <summary>
        ///     The Amazon fulfillment network SKU for the item.
        /// </summary>
        /// <value>The Amazon fulfillment network SKU for the item.</value>
        [DataMember(Name = "FulfillmentNetworkSKU", EmitDefaultValue = false)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        ///     The quantity of the item.
        /// </summary>
        /// <value>The quantity of the item.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     The total amount paid to the seller for the removed item.
        /// </summary>
        /// <value>The total amount paid to the seller for the removed item.</value>
        [DataMember(Name = "Revenue", EmitDefaultValue = false)]
        public Currency Revenue { get; set; }

        /// <summary>
        ///     The fee that Amazon charged to the seller for the removal of the item. The amount is a negative number.
        /// </summary>
        /// <value>The fee that Amazon charged to the seller for the removal of the item. The amount is a negative number.</value>
        [DataMember(Name = "FeeAmount", EmitDefaultValue = false)]
        public Currency FeeAmount { get; set; }

        /// <summary>
        ///     Tax collected on the revenue.
        /// </summary>
        /// <value>Tax collected on the revenue.</value>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public Currency TaxAmount { get; set; }

        /// <summary>
        ///     The tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel
        ///     &#x3D;MarketplaceFacilitator, then TaxWithheld&#x3D;TaxAmount (except the TaxWithheld amount is a negative number).
        ///     Otherwise TaxWithheld&#x3D;0.
        /// </summary>
        /// <value>
        ///     The tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel
        ///     &#x3D;MarketplaceFacilitator, then TaxWithheld&#x3D;TaxAmount (except the TaxWithheld amount is a negative number).
        ///     Otherwise TaxWithheld&#x3D;0.
        /// </value>
        [DataMember(Name = "TaxWithheld", EmitDefaultValue = false)]
        public Currency TaxWithheld { get; set; }

        /// <summary>
        ///     Returns true if RemovalShipmentItem instances are equal
        /// </summary>
        /// <param name="input">Instance of RemovalShipmentItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemovalShipmentItem input)
        {
            if (input == null)
                return false;

            return
                (
                    RemovalShipmentItemId == input.RemovalShipmentItemId ||
                    (RemovalShipmentItemId != null &&
                     RemovalShipmentItemId.Equals(input.RemovalShipmentItemId))
                ) &&
                (
                    TaxCollectionModel == input.TaxCollectionModel ||
                    (TaxCollectionModel != null &&
                     TaxCollectionModel.Equals(input.TaxCollectionModel))
                ) &&
                (
                    FulfillmentNetworkSKU == input.FulfillmentNetworkSKU ||
                    (FulfillmentNetworkSKU != null &&
                     FulfillmentNetworkSKU.Equals(input.FulfillmentNetworkSKU))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    Revenue == input.Revenue ||
                    (Revenue != null &&
                     Revenue.Equals(input.Revenue))
                ) &&
                (
                    FeeAmount == input.FeeAmount ||
                    (FeeAmount != null &&
                     FeeAmount.Equals(input.FeeAmount))
                ) &&
                (
                    TaxAmount == input.TaxAmount ||
                    (TaxAmount != null &&
                     TaxAmount.Equals(input.TaxAmount))
                ) &&
                (
                    TaxWithheld == input.TaxWithheld ||
                    (TaxWithheld != null &&
                     TaxWithheld.Equals(input.TaxWithheld))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemovalShipmentItem {\n");
            sb.Append("  RemovalShipmentItemId: ").Append(RemovalShipmentItemId).Append("\n");
            sb.Append("  TaxCollectionModel: ").Append(TaxCollectionModel).Append("\n");
            sb.Append("  FulfillmentNetworkSKU: ").Append(FulfillmentNetworkSKU).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxWithheld: ").Append(TaxWithheld).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RemovalShipmentItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (RemovalShipmentItemId != null)
                    hashCode = hashCode * 59 + RemovalShipmentItemId.GetHashCode();
                if (TaxCollectionModel != null)
                    hashCode = hashCode * 59 + TaxCollectionModel.GetHashCode();
                if (FulfillmentNetworkSKU != null)
                    hashCode = hashCode * 59 + FulfillmentNetworkSKU.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (Revenue != null)
                    hashCode = hashCode * 59 + Revenue.GetHashCode();
                if (FeeAmount != null)
                    hashCode = hashCode * 59 + FeeAmount.GetHashCode();
                if (TaxAmount != null)
                    hashCode = hashCode * 59 + TaxAmount.GetHashCode();
                if (TaxWithheld != null)
                    hashCode = hashCode * 59 + TaxWithheld.GetHashCode();
                return hashCode;
            }
        }
    }
}