/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    ///     An event related to a trial shipment.
    /// </summary>
    [DataContract]
    public class TrialShipmentEvent : IEquatable<TrialShipmentEvent>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TrialShipmentEvent" /> class.
        /// </summary>
        /// <param name="AmazonOrderId">An Amazon-defined identifier for an order..</param>
        /// <param name="FinancialEventGroupId">The identifier of the financial event group..</param>
        /// <param name="PostedDate">The date and time when the financial event was posted..</param>
        /// <param name="SKU">
        ///     The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is
        ///     included with every call to the Selling Partner API..
        /// </param>
        /// <param name="FeeList">A list of fees charged by Amazon for trial shipments..</param>
        public TrialShipmentEvent(string AmazonOrderId = default, string FinancialEventGroupId = default,
            DateTime? PostedDate = default, string SKU = default, FeeComponentList FeeList = default)
        {
            this.AmazonOrderId = AmazonOrderId;
            this.FinancialEventGroupId = FinancialEventGroupId;
            this.PostedDate = PostedDate;
            this.SKU = SKU;
            this.FeeList = FeeList;
        }

        /// <summary>
        ///     An Amazon-defined identifier for an order.
        /// </summary>
        /// <value>An Amazon-defined identifier for an order.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        ///     The identifier of the financial event group.
        /// </summary>
        /// <value>The identifier of the financial event group.</value>
        [DataMember(Name = "FinancialEventGroupId", EmitDefaultValue = false)]
        public string FinancialEventGroupId { get; set; }

        /// <summary>
        ///     The date and time when the financial event was posted.
        /// </summary>
        /// <value>The date and time when the financial event was posted.</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        ///     The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every
        ///     call to the Selling Partner API.
        /// </summary>
        /// <value>
        ///     The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with
        ///     every call to the Selling Partner API.
        /// </value>
        [DataMember(Name = "SKU", EmitDefaultValue = false)]
        public string SKU { get; set; }

        /// <summary>
        ///     A list of fees charged by Amazon for trial shipments.
        /// </summary>
        /// <value>A list of fees charged by Amazon for trial shipments.</value>
        [DataMember(Name = "FeeList", EmitDefaultValue = false)]
        public FeeComponentList FeeList { get; set; }

        /// <summary>
        ///     Returns true if TrialShipmentEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TrialShipmentEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrialShipmentEvent input)
        {
            if (input == null)
                return false;

            return
                (
                    AmazonOrderId == input.AmazonOrderId ||
                    (AmazonOrderId != null &&
                     AmazonOrderId.Equals(input.AmazonOrderId))
                ) &&
                (
                    FinancialEventGroupId == input.FinancialEventGroupId ||
                    (FinancialEventGroupId != null &&
                     FinancialEventGroupId.Equals(input.FinancialEventGroupId))
                ) &&
                (
                    PostedDate == input.PostedDate ||
                    (PostedDate != null &&
                     PostedDate.Equals(input.PostedDate))
                ) &&
                (
                    SKU == input.SKU ||
                    (SKU != null &&
                     SKU.Equals(input.SKU))
                ) &&
                (
                    FeeList == input.FeeList ||
                    (FeeList != null &&
                     FeeList.Equals(input.FeeList))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrialShipmentEvent {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  FinancialEventGroupId: ").Append(FinancialEventGroupId).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  SKU: ").Append(SKU).Append("\n");
            sb.Append("  FeeList: ").Append(FeeList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TrialShipmentEvent);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (AmazonOrderId != null)
                    hashCode = hashCode * 59 + AmazonOrderId.GetHashCode();
                if (FinancialEventGroupId != null)
                    hashCode = hashCode * 59 + FinancialEventGroupId.GetHashCode();
                if (PostedDate != null)
                    hashCode = hashCode * 59 + PostedDate.GetHashCode();
                if (SKU != null)
                    hashCode = hashCode * 59 + SKU.GetHashCode();
                if (FeeList != null)
                    hashCode = hashCode * 59 + FeeList.GetHashCode();
                return hashCode;
            }
        }
    }
}