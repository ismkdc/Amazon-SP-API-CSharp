/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    ///     An item of a debt payment or debt adjustment.
    /// </summary>
    [DataContract]
    public class DebtRecoveryItem : IEquatable<DebtRecoveryItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="DebtRecoveryItem" /> class.
        /// </summary>
        /// <param name="RecoveryAmount">The amount applied for the recovery item..</param>
        /// <param name="OriginalAmount">The original debt amount..</param>
        /// <param name="GroupBeginDate">
        ///     The beginning date and time of the financial event group that contains the debt. In ISO
        ///     8601 date time format..
        /// </param>
        /// <param name="GroupEndDate">
        ///     The ending date and time of the financial event group that contains the debt. In ISO 8601
        ///     date time format..
        /// </param>
        public DebtRecoveryItem(Currency RecoveryAmount = default, Currency OriginalAmount = default,
            DateTime? GroupBeginDate = default, DateTime? GroupEndDate = default)
        {
            this.RecoveryAmount = RecoveryAmount;
            this.OriginalAmount = OriginalAmount;
            this.GroupBeginDate = GroupBeginDate;
            this.GroupEndDate = GroupEndDate;
        }

        /// <summary>
        ///     The amount applied for the recovery item.
        /// </summary>
        /// <value>The amount applied for the recovery item.</value>
        [DataMember(Name = "RecoveryAmount", EmitDefaultValue = false)]
        public Currency RecoveryAmount { get; set; }

        /// <summary>
        ///     The original debt amount.
        /// </summary>
        /// <value>The original debt amount.</value>
        [DataMember(Name = "OriginalAmount", EmitDefaultValue = false)]
        public Currency OriginalAmount { get; set; }

        /// <summary>
        ///     The beginning date and time of the financial event group that contains the debt. In ISO 8601 date time format.
        /// </summary>
        /// <value>The beginning date and time of the financial event group that contains the debt. In ISO 8601 date time format.</value>
        [DataMember(Name = "GroupBeginDate", EmitDefaultValue = false)]
        public DateTime? GroupBeginDate { get; set; }

        /// <summary>
        ///     The ending date and time of the financial event group that contains the debt. In ISO 8601 date time format.
        /// </summary>
        /// <value>The ending date and time of the financial event group that contains the debt. In ISO 8601 date time format.</value>
        [DataMember(Name = "GroupEndDate", EmitDefaultValue = false)]
        public DateTime? GroupEndDate { get; set; }

        /// <summary>
        ///     Returns true if DebtRecoveryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of DebtRecoveryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebtRecoveryItem input)
        {
            if (input == null)
                return false;

            return
                (
                    RecoveryAmount == input.RecoveryAmount ||
                    (RecoveryAmount != null &&
                     RecoveryAmount.Equals(input.RecoveryAmount))
                ) &&
                (
                    OriginalAmount == input.OriginalAmount ||
                    (OriginalAmount != null &&
                     OriginalAmount.Equals(input.OriginalAmount))
                ) &&
                (
                    GroupBeginDate == input.GroupBeginDate ||
                    (GroupBeginDate != null &&
                     GroupBeginDate.Equals(input.GroupBeginDate))
                ) &&
                (
                    GroupEndDate == input.GroupEndDate ||
                    (GroupEndDate != null &&
                     GroupEndDate.Equals(input.GroupEndDate))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebtRecoveryItem {\n");
            sb.Append("  RecoveryAmount: ").Append(RecoveryAmount).Append("\n");
            sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            sb.Append("  GroupBeginDate: ").Append(GroupBeginDate).Append("\n");
            sb.Append("  GroupEndDate: ").Append(GroupEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DebtRecoveryItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (RecoveryAmount != null)
                    hashCode = hashCode * 59 + RecoveryAmount.GetHashCode();
                if (OriginalAmount != null)
                    hashCode = hashCode * 59 + OriginalAmount.GetHashCode();
                if (GroupBeginDate != null)
                    hashCode = hashCode * 59 + GroupBeginDate.GetHashCode();
                if (GroupEndDate != null)
                    hashCode = hashCode * 59 + GroupEndDate.GetHashCode();
                return hashCode;
            }
        }
    }
}