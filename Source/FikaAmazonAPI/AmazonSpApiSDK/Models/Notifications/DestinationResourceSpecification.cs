/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Notifications
{
    /// <summary>
    ///     The information required to create a destination resource. Applications should use one resource type (sqs or
    ///     eventBridge) per destination.
    /// </summary>
    [DataContract]
    public class DestinationResourceSpecification : IEquatable<DestinationResourceSpecification>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="DestinationResourceSpecification" /> class.
        /// </summary>
        /// <param name="Sqs">The information required to create an Amazon Simple Queue Service (SQS) queue destination..</param>
        /// <param name="EventBridge">The information required to create an Amazon EventBridge destination..</param>
        public DestinationResourceSpecification(SqsResource Sqs = default,
            EventBridgeResourceSpecification EventBridge = default)
        {
            this.Sqs = Sqs;
            this.EventBridge = EventBridge;
        }

        /// <summary>
        ///     The information required to create an Amazon Simple Queue Service (SQS) queue destination.
        /// </summary>
        /// <value>The information required to create an Amazon Simple Queue Service (SQS) queue destination.</value>
        [DataMember(Name = "sqs", EmitDefaultValue = false)]
        public SqsResource Sqs { get; set; }

        /// <summary>
        ///     The information required to create an Amazon EventBridge destination.
        /// </summary>
        /// <value>The information required to create an Amazon EventBridge destination.</value>
        [DataMember(Name = "eventBridge", EmitDefaultValue = false)]
        public EventBridgeResourceSpecification EventBridge { get; set; }

        /// <summary>
        ///     Returns true if DestinationResourceSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinationResourceSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationResourceSpecification input)
        {
            if (input == null)
                return false;

            return
                (
                    Sqs == input.Sqs ||
                    (Sqs != null &&
                     Sqs.Equals(input.Sqs))
                ) &&
                (
                    EventBridge == input.EventBridge ||
                    (EventBridge != null &&
                     EventBridge.Equals(input.EventBridge))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinationResourceSpecification {\n");
            sb.Append("  Sqs: ").Append(Sqs).Append("\n");
            sb.Append("  EventBridge: ").Append(EventBridge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DestinationResourceSpecification);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Sqs != null)
                    hashCode = hashCode * 59 + Sqs.GetHashCode();
                if (EventBridge != null)
                    hashCode = hashCode * 59 + EventBridge.GetHashCode();
                return hashCode;
            }
        }
    }
}