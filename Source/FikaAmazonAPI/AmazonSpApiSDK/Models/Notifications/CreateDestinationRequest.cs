/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Notifications
{
    /// <summary>
    ///     The request schema for the createDestination operation.
    /// </summary>
    [DataContract]
    public class CreateDestinationRequest : IEquatable<CreateDestinationRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateDestinationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateDestinationRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateDestinationRequest" /> class.
        /// </summary>
        /// <param name="ResourceSpecification">
        ///     The information required to create a destination resource. Applications should use
        ///     one resource type (sqs or eventBridge) per destination. (required).
        /// </param>
        /// <param name="Name">A developer-defined name to help identify this destination. (required).</param>
        public CreateDestinationRequest(DestinationResourceSpecification ResourceSpecification = default,
            string Name = default)
        {
            // to ensure "ResourceSpecification" is required (not null)
            if (ResourceSpecification == null)
                throw new InvalidDataException(
                    "ResourceSpecification is a required property for CreateDestinationRequest and cannot be null");
            this.ResourceSpecification = ResourceSpecification;
            // to ensure "Name" is required (not null)
            if (Name == null)
                throw new InvalidDataException(
                    "Name is a required property for CreateDestinationRequest and cannot be null");
            this.Name = Name;
        }


        /// <summary>
        ///     The information required to create a destination resource. Applications should use one resource type (sqs or
        ///     eventBridge) per destination.
        /// </summary>
        /// <value>
        ///     The information required to create a destination resource. Applications should use one resource type (sqs or
        ///     eventBridge) per destination.
        /// </value>
        [DataMember(Name = "resourceSpecification", EmitDefaultValue = false)]
        public DestinationResourceSpecification ResourceSpecification { get; set; }

        /// <summary>
        ///     A developer-defined name to help identify this destination.
        /// </summary>
        /// <value>A developer-defined name to help identify this destination.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Returns true if CreateDestinationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDestinationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDestinationRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    ResourceSpecification == input.ResourceSpecification ||
                    (ResourceSpecification != null &&
                     ResourceSpecification.Equals(input.ResourceSpecification))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDestinationRequest {\n");
            sb.Append("  ResourceSpecification: ").Append(ResourceSpecification).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreateDestinationRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ResourceSpecification != null)
                    hashCode = hashCode * 59 + ResourceSpecification.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }
    }
}