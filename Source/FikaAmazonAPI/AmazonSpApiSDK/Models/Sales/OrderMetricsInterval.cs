/*
 * Selling Partner API for Sales
 *
 * The Selling Partner API for Sales provides APIs related to sales performance.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Sales
{
    /// <summary>
    ///     Contains order metrics.
    /// </summary>
    [DataContract]
    public class OrderMetricsInterval : IEquatable<OrderMetricsInterval>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderMetricsInterval" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OrderMetricsInterval()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderMetricsInterval" /> class.
        /// </summary>
        /// <param name="Interval">
        ///     The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first
        ///     or the last interval from the list, it might contain incomplete data if the requested interval doesn&#39;t align
        ///     with the requested granularity (ex. request interval 2018-09-01T02:00:00Z- -2018-09-04T19:00:00Z and granularity
        ///     day will result in Sept 1st UTC day and Sept 4th UTC days having partial data). (required).
        /// </param>
        /// <param name="UnitCount">The number of units in orders based on the specified filters. (required).</param>
        /// <param name="OrderItemCount">The number of order items based on the specified filters. (required).</param>
        /// <param name="OrderCount">The number of orders based on the specified filters. (required).</param>
        /// <param name="AverageUnitPrice">
        ///     The average price for an item based on the specified filters. Formula is
        ///     totalSales/unitCount. (required).
        /// </param>
        /// <param name="TotalSales">The total ordered product sales for all orders based on the specified filters. (required).</param>
        public OrderMetricsInterval(string Interval = default, int? UnitCount = default, int? OrderItemCount = default,
            int? OrderCount = default, Money AverageUnitPrice = default, Money TotalSales = default)
        {
            // to ensure "Interval" is required (not null)
            if (Interval == null)
                throw new InvalidDataException(
                    "Interval is a required property for OrderMetricsInterval and cannot be null");
            this.Interval = Interval;
            // to ensure "UnitCount" is required (not null)
            if (UnitCount == null)
                throw new InvalidDataException(
                    "UnitCount is a required property for OrderMetricsInterval and cannot be null");
            this.UnitCount = UnitCount;
            // to ensure "OrderItemCount" is required (not null)
            if (OrderItemCount == null)
                throw new InvalidDataException(
                    "OrderItemCount is a required property for OrderMetricsInterval and cannot be null");
            this.OrderItemCount = OrderItemCount;
            // to ensure "OrderCount" is required (not null)
            if (OrderCount == null)
                throw new InvalidDataException(
                    "OrderCount is a required property for OrderMetricsInterval and cannot be null");
            this.OrderCount = OrderCount;
            // to ensure "AverageUnitPrice" is required (not null)
            if (AverageUnitPrice == null)
                throw new InvalidDataException(
                    "AverageUnitPrice is a required property for OrderMetricsInterval and cannot be null");
            this.AverageUnitPrice = AverageUnitPrice;
            // to ensure "TotalSales" is required (not null)
            if (TotalSales == null)
                throw new InvalidDataException(
                    "TotalSales is a required property for OrderMetricsInterval and cannot be null");
            this.TotalSales = TotalSales;
        }

        /// <summary>
        ///     The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval
        ///     from the list, it might contain incomplete data if the requested interval doesn&#39;t align with the requested
        ///     granularity (ex. request interval 2018-09-01T02:00:00Z- -2018-09-04T19:00:00Z and granularity day will result in
        ///     Sept 1st UTC day and Sept 4th UTC days having partial data).
        /// </summary>
        /// <value>
        ///     The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last
        ///     interval from the list, it might contain incomplete data if the requested interval doesn&#39;t align with the
        ///     requested granularity (ex. request interval 2018-09-01T02:00:00Z- -2018-09-04T19:00:00Z and granularity day will
        ///     result in Sept 1st UTC day and Sept 4th UTC days having partial data).
        /// </value>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public string Interval { get; set; }

        /// <summary>
        ///     The number of units in orders based on the specified filters.
        /// </summary>
        /// <value>The number of units in orders based on the specified filters.</value>
        [DataMember(Name = "unitCount", EmitDefaultValue = false)]
        public int? UnitCount { get; set; }

        /// <summary>
        ///     The number of order items based on the specified filters.
        /// </summary>
        /// <value>The number of order items based on the specified filters.</value>
        [DataMember(Name = "orderItemCount", EmitDefaultValue = false)]
        public int? OrderItemCount { get; set; }

        /// <summary>
        ///     The number of orders based on the specified filters.
        /// </summary>
        /// <value>The number of orders based on the specified filters.</value>
        [DataMember(Name = "orderCount", EmitDefaultValue = false)]
        public int? OrderCount { get; set; }

        /// <summary>
        ///     The average price for an item based on the specified filters. Formula is totalSales/unitCount.
        /// </summary>
        /// <value>The average price for an item based on the specified filters. Formula is totalSales/unitCount.</value>
        [DataMember(Name = "averageUnitPrice", EmitDefaultValue = false)]
        public Money AverageUnitPrice { get; set; }

        /// <summary>
        ///     The total ordered product sales for all orders based on the specified filters.
        /// </summary>
        /// <value>The total ordered product sales for all orders based on the specified filters.</value>
        [DataMember(Name = "totalSales", EmitDefaultValue = false)]
        public Money TotalSales { get; set; }

        /// <summary>
        ///     Returns true if OrderMetricsInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderMetricsInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderMetricsInterval input)
        {
            if (input == null)
                return false;

            return
                (
                    Interval == input.Interval ||
                    (Interval != null &&
                     Interval.Equals(input.Interval))
                ) &&
                (
                    UnitCount == input.UnitCount ||
                    (UnitCount != null &&
                     UnitCount.Equals(input.UnitCount))
                ) &&
                (
                    OrderItemCount == input.OrderItemCount ||
                    (OrderItemCount != null &&
                     OrderItemCount.Equals(input.OrderItemCount))
                ) &&
                (
                    OrderCount == input.OrderCount ||
                    (OrderCount != null &&
                     OrderCount.Equals(input.OrderCount))
                ) &&
                (
                    AverageUnitPrice == input.AverageUnitPrice ||
                    (AverageUnitPrice != null &&
                     AverageUnitPrice.Equals(input.AverageUnitPrice))
                ) &&
                (
                    TotalSales == input.TotalSales ||
                    (TotalSales != null &&
                     TotalSales.Equals(input.TotalSales))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderMetricsInterval {\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  UnitCount: ").Append(UnitCount).Append("\n");
            sb.Append("  OrderItemCount: ").Append(OrderItemCount).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  AverageUnitPrice: ").Append(AverageUnitPrice).Append("\n");
            sb.Append("  TotalSales: ").Append(TotalSales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OrderMetricsInterval);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                if (UnitCount != null)
                    hashCode = hashCode * 59 + UnitCount.GetHashCode();
                if (OrderItemCount != null)
                    hashCode = hashCode * 59 + OrderItemCount.GetHashCode();
                if (OrderCount != null)
                    hashCode = hashCode * 59 + OrderCount.GetHashCode();
                if (AverageUnitPrice != null)
                    hashCode = hashCode * 59 + AverageUnitPrice.GetHashCode();
                if (TotalSales != null)
                    hashCode = hashCode * 59 + TotalSales.GetHashCode();
                return hashCode;
            }
        }
    }
}