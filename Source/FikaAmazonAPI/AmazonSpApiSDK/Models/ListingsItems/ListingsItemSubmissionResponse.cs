/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    ///     Response containing the results of a submission to the Selling Partner API for Listings Items.
    /// </summary>
    [DataContract]
    public class ListingsItemSubmissionResponse : IEquatable<ListingsItemSubmissionResponse>, IValidatableObject
    {
        /// <summary>
        ///     The status of the listings item submission.
        /// </summary>
        /// <value>The status of the listings item submission.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")] ACCEPTED = 1,

            /// <summary>
            ///     Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")] INVALID = 2
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ListingsItemSubmissionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ListingsItemSubmissionResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ListingsItemSubmissionResponse" /> class.
        /// </summary>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing. (required).</param>
        /// <param name="status">The status of the listings item submission. (required).</param>
        /// <param name="submissionId">The unique identifier of the listings item submission. (required).</param>
        /// <param name="issues">Listings item issues related to the listings item submission..</param>
        public ListingsItemSubmissionResponse(string sku = default, StatusEnum status = default,
            string submissionId = default, List<Issue> issues = default)
        {
            // to ensure "sku" is required (not null)
            if (sku == null)
                throw new InvalidDataException(
                    "sku is a required property for ListingsItemSubmissionResponse and cannot be null");
            Sku = sku;
            // to ensure "status" is required (not null)
            if (status == null)
                throw new InvalidDataException(
                    "status is a required property for ListingsItemSubmissionResponse and cannot be null");
            Status = status;
            // to ensure "submissionId" is required (not null)
            if (submissionId == null)
                throw new InvalidDataException(
                    "submissionId is a required property for ListingsItemSubmissionResponse and cannot be null");
            SubmissionId = submissionId;
            Issues = issues;
        }

        /// <summary>
        ///     The status of the listings item submission.
        /// </summary>
        /// <value>The status of the listings item submission.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        ///     A selling partner provided identifier for an Amazon listing.
        /// </summary>
        /// <value>A selling partner provided identifier for an Amazon listing.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }


        /// <summary>
        ///     The unique identifier of the listings item submission.
        /// </summary>
        /// <value>The unique identifier of the listings item submission.</value>
        [DataMember(Name = "submissionId", EmitDefaultValue = false)]
        public string SubmissionId { get; set; }

        /// <summary>
        ///     Listings item issues related to the listings item submission.
        /// </summary>
        /// <value>Listings item issues related to the listings item submission.</value>
        [DataMember(Name = "issues", EmitDefaultValue = false)]
        public List<Issue> Issues { get; set; }

        /// <summary>
        ///     Returns true if ListingsItemSubmissionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsItemSubmissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsItemSubmissionResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Sku == input.Sku ||
                    (Sku != null &&
                     Sku.Equals(input.Sku))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    SubmissionId == input.SubmissionId ||
                    (SubmissionId != null &&
                     SubmissionId.Equals(input.SubmissionId))
                ) &&
                (
                    Issues == input.Issues ||
                    (Issues != null &&
                     Issues.SequenceEqual(input.Issues))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsItemSubmissionResponse {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ListingsItemSubmissionResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (SubmissionId != null)
                    hashCode = hashCode * 59 + SubmissionId.GetHashCode();
                if (Issues != null)
                    hashCode = hashCode * 59 + Issues.GetHashCode();
                return hashCode;
            }
        }
    }
}