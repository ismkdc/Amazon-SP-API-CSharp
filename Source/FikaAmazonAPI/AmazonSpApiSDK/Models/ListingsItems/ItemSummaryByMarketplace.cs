/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    ///     Summary details of a listings item for an Amazon marketplace.
    /// </summary>
    [DataContract]
    public class ItemSummaryByMarketplace : IEquatable<ItemSummaryByMarketplace>, IValidatableObject
    {
        /// <summary>
        ///     Identifies the condition of the listings item.
        /// </summary>
        /// <value>Identifies the condition of the listings item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionTypeEnum
        {
            /// <summary>
            ///     Enum Newnew for value: new_new
            /// </summary>
            [EnumMember(Value = "new_new")] Newnew = 1,

            /// <summary>
            ///     Enum Newopenbox for value: new_open_box
            /// </summary>
            [EnumMember(Value = "new_open_box")] Newopenbox = 2,

            /// <summary>
            ///     Enum Newoem for value: new_oem
            /// </summary>
            [EnumMember(Value = "new_oem")] Newoem = 3,

            /// <summary>
            ///     Enum Refurbishedrefurbished for value: refurbished_refurbished
            /// </summary>
            [EnumMember(Value = "refurbished_refurbished")]
            Refurbishedrefurbished = 4,

            /// <summary>
            ///     Enum Usedlikenew for value: used_like_new
            /// </summary>
            [EnumMember(Value = "used_like_new")] Usedlikenew = 5,

            /// <summary>
            ///     Enum Usedverygood for value: used_very_good
            /// </summary>
            [EnumMember(Value = "used_very_good")] Usedverygood = 6,

            /// <summary>
            ///     Enum Usedgood for value: used_good
            /// </summary>
            [EnumMember(Value = "used_good")] Usedgood = 7,

            /// <summary>
            ///     Enum Usedacceptable for value: used_acceptable
            /// </summary>
            [EnumMember(Value = "used_acceptable")]
            Usedacceptable = 8,

            /// <summary>
            ///     Enum Collectiblelikenew for value: collectible_like_new
            /// </summary>
            [EnumMember(Value = "collectible_like_new")]
            Collectiblelikenew = 9,

            /// <summary>
            ///     Enum Collectibleverygood for value: collectible_very_good
            /// </summary>
            [EnumMember(Value = "collectible_very_good")]
            Collectibleverygood = 10,

            /// <summary>
            ///     Enum Collectiblegood for value: collectible_good
            /// </summary>
            [EnumMember(Value = "collectible_good")]
            Collectiblegood = 11,

            /// <summary>
            ///     Enum Collectibleacceptable for value: collectible_acceptable
            /// </summary>
            [EnumMember(Value = "collectible_acceptable")]
            Collectibleacceptable = 12,

            /// <summary>
            ///     Enum Clubclub for value: club_club
            /// </summary>
            [EnumMember(Value = "club_club")] Clubclub = 13
        }

        /// <summary>
        ///     Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum BUYABLE for value: BUYABLE
            /// </summary>
            [EnumMember(Value = "BUYABLE")] BUYABLE = 1,

            /// <summary>
            ///     Enum DISCOVERABLE for value: DISCOVERABLE
            /// </summary>
            [EnumMember(Value = "DISCOVERABLE")] DISCOVERABLE = 2
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemSummaryByMarketplace()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">
        ///     A marketplace identifier. Identifies the Amazon marketplace for the listings item.
        ///     (required).
        /// </param>
        /// <param name="asin">Amazon Standard Identification Number (ASIN) of the listings item. (required).</param>
        /// <param name="productType">The Amazon product type of the listings item. (required).</param>
        /// <param name="conditionType">Identifies the condition of the listings item..</param>
        /// <param name="status">Statuses that apply to the listings item. (required).</param>
        /// <param name="fnSku">
        ///     Fulfillment network stock keeping unit is an identifier used by Amazon fulfillment centers to
        ///     identify each unique item..
        /// </param>
        /// <param name="itemName">Name, or title, associated with an Amazon catalog item. (required).</param>
        /// <param name="createdDate">Date the listings item was created, in ISO 8601 format. (required).</param>
        /// <param name="lastUpdatedDate">Date the listings item was last updated, in ISO 8601 format. (required).</param>
        /// <param name="mainImage">Main image for the listings item..</param>
        public ItemSummaryByMarketplace(string marketplaceId = default, string asin = default,
            string productType = default, ConditionTypeEnum? conditionType = default, List<StatusEnum> status = default,
            string fnSku = default, string itemName = default, DateTime? createdDate = default,
            DateTime? lastUpdatedDate = default, ItemImage mainImage = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
                throw new InvalidDataException(
                    "marketplaceId is a required property for ItemSummaryByMarketplace and cannot be null");
            MarketplaceId = marketplaceId;
            // to ensure "asin" is required (not null)
            if (asin == null)
                throw new InvalidDataException(
                    "asin is a required property for ItemSummaryByMarketplace and cannot be null");
            Asin = asin;
            // to ensure "productType" is required (not null)
            if (productType == null)
                throw new InvalidDataException(
                    "productType is a required property for ItemSummaryByMarketplace and cannot be null");
            ProductType = productType;
            // to ensure "status" is required (not null)
            if (status == null)
                throw new InvalidDataException(
                    "status is a required property for ItemSummaryByMarketplace and cannot be null");
            Status = status;
            // to ensure "itemName" is required (not null)
            if (itemName == null)
                throw new InvalidDataException(
                    "itemName is a required property for ItemSummaryByMarketplace and cannot be null");
            ItemName = itemName;
            // to ensure "createdDate" is required (not null)
            if (createdDate == null)
                throw new InvalidDataException(
                    "createdDate is a required property for ItemSummaryByMarketplace and cannot be null");
            CreatedDate = createdDate;
            // to ensure "lastUpdatedDate" is required (not null)
            if (lastUpdatedDate == null)
                throw new InvalidDataException(
                    "lastUpdatedDate is a required property for ItemSummaryByMarketplace and cannot be null");
            LastUpdatedDate = lastUpdatedDate;
            ConditionType = conditionType;
            FnSku = fnSku;
            MainImage = mainImage;
        }

        /// <summary>
        ///     Identifies the condition of the listings item.
        /// </summary>
        /// <value>Identifies the condition of the listings item.</value>
        [DataMember(Name = "conditionType", EmitDefaultValue = false)]
        public ConditionTypeEnum? ConditionType { get; set; }


        /// <summary>
        ///     Statuses that apply to the listings item.
        /// </summary>
        /// <value>Statuses that apply to the listings item.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public List<StatusEnum> Status { get; set; }

        /// <summary>
        ///     A marketplace identifier. Identifies the Amazon marketplace for the listings item.
        /// </summary>
        /// <value>A marketplace identifier. Identifies the Amazon marketplace for the listings item.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     Amazon Standard Identification Number (ASIN) of the listings item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of the listings item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        ///     The Amazon product type of the listings item.
        /// </summary>
        /// <value>The Amazon product type of the listings item.</value>
        [DataMember(Name = "productType", EmitDefaultValue = false)]
        public string ProductType { get; set; }


        /// <summary>
        ///     Fulfillment network stock keeping unit is an identifier used by Amazon fulfillment centers to identify each unique
        ///     item.
        /// </summary>
        /// <value>
        ///     Fulfillment network stock keeping unit is an identifier used by Amazon fulfillment centers to identify each
        ///     unique item.
        /// </value>
        [DataMember(Name = "fnSku", EmitDefaultValue = false)]
        public string FnSku { get; set; }

        /// <summary>
        ///     Name, or title, associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name, or title, associated with an Amazon catalog item.</value>
        [DataMember(Name = "itemName", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        ///     Date the listings item was created, in ISO 8601 format.
        /// </summary>
        /// <value>Date the listings item was created, in ISO 8601 format.</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        ///     Date the listings item was last updated, in ISO 8601 format.
        /// </summary>
        /// <value>Date the listings item was last updated, in ISO 8601 format.</value>
        [DataMember(Name = "lastUpdatedDate", EmitDefaultValue = false)]
        public DateTime? LastUpdatedDate { get; set; }

        /// <summary>
        ///     Main image for the listings item.
        /// </summary>
        /// <value>Main image for the listings item.</value>
        [DataMember(Name = "mainImage", EmitDefaultValue = false)]
        public ItemImage MainImage { get; set; }

        /// <summary>
        ///     Returns true if ItemSummaryByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSummaryByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSummaryByMarketplace input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    Asin == input.Asin ||
                    (Asin != null &&
                     Asin.Equals(input.Asin))
                ) &&
                (
                    ProductType == input.ProductType ||
                    (ProductType != null &&
                     ProductType.Equals(input.ProductType))
                ) &&
                (
                    ConditionType == input.ConditionType ||
                    (ConditionType != null &&
                     ConditionType.Equals(input.ConditionType))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.SequenceEqual(input.Status))
                ) &&
                (
                    FnSku == input.FnSku ||
                    (FnSku != null &&
                     FnSku.Equals(input.FnSku))
                ) &&
                (
                    ItemName == input.ItemName ||
                    (ItemName != null &&
                     ItemName.Equals(input.ItemName))
                ) &&
                (
                    CreatedDate == input.CreatedDate ||
                    (CreatedDate != null &&
                     CreatedDate.Equals(input.CreatedDate))
                ) &&
                (
                    LastUpdatedDate == input.LastUpdatedDate ||
                    (LastUpdatedDate != null &&
                     LastUpdatedDate.Equals(input.LastUpdatedDate))
                ) &&
                (
                    MainImage == input.MainImage ||
                    (MainImage != null &&
                     MainImage.Equals(input.MainImage))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSummaryByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FnSku: ").Append(FnSku).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  MainImage: ").Append(MainImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ItemSummaryByMarketplace);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (Asin != null)
                    hashCode = hashCode * 59 + Asin.GetHashCode();
                if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                if (ConditionType != null)
                    hashCode = hashCode * 59 + ConditionType.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (FnSku != null)
                    hashCode = hashCode * 59 + FnSku.GetHashCode();
                if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                if (LastUpdatedDate != null)
                    hashCode = hashCode * 59 + LastUpdatedDate.GetHashCode();
                if (MainImage != null)
                    hashCode = hashCode * 59 + MainImage.GetHashCode();
                return hashCode;
            }
        }
    }
}