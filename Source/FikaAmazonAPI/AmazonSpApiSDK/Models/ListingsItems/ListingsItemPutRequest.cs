/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    ///     The request body schema for the putListingsItem operation.
    /// </summary>
    [DataContract]
    public class ListingsItemPutRequest : IEquatable<ListingsItemPutRequest>, IValidatableObject
    {
        /// <summary>
        ///     The name of the requirements set for the provided data.
        /// </summary>
        /// <value>The name of the requirements set for the provided data.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequirementsEnum
        {
            /// <summary>
            ///     Enum LISTING for value: LISTING
            /// </summary>
            [EnumMember(Value = "LISTING")] LISTING = 1,

            /// <summary>
            ///     Enum LISTINGPRODUCTONLY for value: LISTING_PRODUCT_ONLY
            /// </summary>
            [EnumMember(Value = "LISTING_PRODUCT_ONLY")]
            LISTINGPRODUCTONLY = 2,

            /// <summary>
            ///     Enum LISTINGOFFERONLY for value: LISTING_OFFER_ONLY
            /// </summary>
            [EnumMember(Value = "LISTING_OFFER_ONLY")]
            LISTINGOFFERONLY = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ListingsItemPutRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ListingsItemPutRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ListingsItemPutRequest" /> class.
        /// </summary>
        /// <param name="productType">The Amazon product type of the listings item. (required).</param>
        /// <param name="requirements">The name of the requirements set for the provided data..</param>
        /// <param name="attributes">
        ///     JSON object containing structured listings item attribute data keyed by attribute name.
        ///     (required).
        /// </param>
        public ListingsItemPutRequest(string productType = default, RequirementsEnum? requirements = default,
            object attributes = default)
        {
            // to ensure "productType" is required (not null)
            if (productType == null)
                throw new InvalidDataException(
                    "productType is a required property for ListingsItemPutRequest and cannot be null");
            ProductType = productType;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
                throw new InvalidDataException(
                    "attributes is a required property for ListingsItemPutRequest and cannot be null");
            Attributes = attributes;
            Requirements = requirements;
        }

        /// <summary>
        ///     The name of the requirements set for the provided data.
        /// </summary>
        /// <value>The name of the requirements set for the provided data.</value>
        [DataMember(Name = "requirements", EmitDefaultValue = false)]
        public RequirementsEnum? Requirements { get; set; }

        /// <summary>
        ///     The Amazon product type of the listings item.
        /// </summary>
        /// <value>The Amazon product type of the listings item.</value>
        [DataMember(Name = "productType", EmitDefaultValue = false)]
        public string ProductType { get; set; }


        /// <summary>
        ///     JSON object containing structured listings item attribute data keyed by attribute name.
        /// </summary>
        /// <value>JSON object containing structured listings item attribute data keyed by attribute name.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public object Attributes { get; set; }

        /// <summary>
        ///     Returns true if ListingsItemPutRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsItemPutRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsItemPutRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    ProductType == input.ProductType ||
                    (ProductType != null &&
                     ProductType.Equals(input.ProductType))
                ) &&
                (
                    Requirements == input.Requirements ||
                    (Requirements != null &&
                     Requirements.Equals(input.Requirements))
                ) &&
                (
                    Attributes == input.Attributes ||
                    (Attributes != null &&
                     Attributes.Equals(input.Attributes))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsItemPutRequest {\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ListingsItemPutRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ProductType != null)
                    hashCode = hashCode * 59 + ProductType.GetHashCode();
                if (Requirements != null)
                    hashCode = hashCode * 59 + Requirements.GetHashCode();
                if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                return hashCode;
            }
        }
    }
}