/*
 * Selling Partner API for FBA Small And Light
 *
 * The Selling Partner API for FBA Small and Light lets you help sellers manage their listings in the Small and Light program. The program reduces the cost of fulfilling orders for small and lightweight FBA inventory. You can enroll or remove items from the program and check item eligibility and enrollment status. You can also preview the estimated program fees charged to a seller for items sold while enrolled in the program.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaSmallandLight
{
    /// <summary>
    ///     The Small and Light eligibility status of the item indicated by the specified seller SKU.
    /// </summary>
    [DataContract]
    public class SmallAndLightEligibility : IEquatable<SmallAndLightEligibility>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmallAndLightEligibility" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SmallAndLightEligibility()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmallAndLightEligibility" /> class.
        /// </summary>
        /// <param name="MarketplaceId">MarketplaceId (required).</param>
        /// <param name="SellerSKU">SellerSKU (required).</param>
        /// <param name="Status">Status (required).</param>
        public SmallAndLightEligibility(string MarketplaceId = default, string SellerSKU = default,
            SmallAndLightEligibilityStatus Status = default)
        {
            // to ensure "MarketplaceId" is required (not null)
            if (MarketplaceId == null)
                throw new InvalidDataException(
                    "MarketplaceId is a required property for SmallAndLightEligibility and cannot be null");
            this.MarketplaceId = MarketplaceId;
            // to ensure "SellerSKU" is required (not null)
            if (SellerSKU == null)
                throw new InvalidDataException(
                    "SellerSKU is a required property for SmallAndLightEligibility and cannot be null");
            this.SellerSKU = SellerSKU;
            // to ensure "Status" is required (not null)
            if (Status == null)
                throw new InvalidDataException(
                    "Status is a required property for SmallAndLightEligibility and cannot be null");
            this.Status = Status;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SmallAndLightEligibilityStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     Gets or Sets SellerSKU
        /// </summary>
        [DataMember(Name = "sellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        ///     Returns true if SmallAndLightEligibility instances are equal
        /// </summary>
        /// <param name="input">Instance of SmallAndLightEligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmallAndLightEligibility input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    SellerSKU == input.SellerSKU ||
                    (SellerSKU != null &&
                     SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmallAndLightEligibility {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmallAndLightEligibility);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (SellerSKU != null)
                    hashCode = hashCode * 59 + SellerSKU.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}