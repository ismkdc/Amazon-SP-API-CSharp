/*
 * Selling Partner API for FBA Small And Light
 *
 * The Selling Partner API for FBA Small and Light lets you help sellers manage their listings in the Small and Light program. The program reduces the cost of fulfilling orders for small and lightweight FBA inventory. You can enroll or remove items from the program and check item eligibility and enrollment status. You can also preview the estimated program fees charged to a seller for items sold while enrolled in the program.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaSmallandLight
{
    /// <summary>
    ///     SmallAndLightFeePreviews
    /// </summary>
    [DataContract]
    public class SmallAndLightFeePreviews : IEquatable<SmallAndLightFeePreviews>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmallAndLightFeePreviews" /> class.
        /// </summary>
        /// <param name="Data">
        ///     A list of fee estimates for the requested items. The order of the fee estimates will follow the same
        ///     order as the items in the request, with duplicates removed..
        /// </param>
        public SmallAndLightFeePreviews(List<FeePreview> Data = default)
        {
            this.Data = Data;
        }

        public SmallAndLightFeePreviews()
        {
            Data = default;
        }

        /// <summary>
        ///     A list of fee estimates for the requested items. The order of the fee estimates will follow the same order as the
        ///     items in the request, with duplicates removed.
        /// </summary>
        /// <value>
        ///     A list of fee estimates for the requested items. The order of the fee estimates will follow the same order as
        ///     the items in the request, with duplicates removed.
        /// </value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<FeePreview> Data { get; set; }

        /// <summary>
        ///     Returns true if SmallAndLightFeePreviews instances are equal
        /// </summary>
        /// <param name="input">Instance of SmallAndLightFeePreviews to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmallAndLightFeePreviews input)
        {
            if (input == null)
                return false;

            return
                Data == input.Data ||
                (Data != null &&
                 Data.SequenceEqual(input.Data));
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmallAndLightFeePreviews {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmallAndLightFeePreviews);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                return hashCode;
            }
        }
    }
}