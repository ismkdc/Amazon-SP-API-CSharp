/*
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    ///     The request schema for the retrieveShippingLabel operation.
    /// </summary>
    [DataContract]
    public class RetrieveShippingLabelRequest : IEquatable<RetrieveShippingLabelRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="RetrieveShippingLabelRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public RetrieveShippingLabelRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RetrieveShippingLabelRequest" /> class.
        /// </summary>
        /// <param name="LabelSpecification">LabelSpecification (required).</param>
        public RetrieveShippingLabelRequest(LabelSpecification LabelSpecification = default)
        {
            // to ensure "LabelSpecification" is required (not null)
            if (LabelSpecification == null)
                throw new InvalidDataException(
                    "LabelSpecification is a required property for RetrieveShippingLabelRequest and cannot be null");
            this.LabelSpecification = LabelSpecification;
        }

        /// <summary>
        ///     Gets or Sets LabelSpecification
        /// </summary>
        [DataMember(Name = "labelSpecification", EmitDefaultValue = false)]
        public LabelSpecification LabelSpecification { get; set; }

        /// <summary>
        ///     Returns true if RetrieveShippingLabelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveShippingLabelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveShippingLabelRequest input)
        {
            if (input == null)
                return false;

            return
                LabelSpecification == input.LabelSpecification ||
                (LabelSpecification != null &&
                 LabelSpecification.Equals(input.LabelSpecification));
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveShippingLabelRequest {\n");
            sb.Append("  LabelSpecification: ").Append(LabelSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RetrieveShippingLabelRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LabelSpecification != null)
                    hashCode = hashCode * 59 + LabelSpecification.GetHashCode();
                return hashCode;
            }
        }
    }
}