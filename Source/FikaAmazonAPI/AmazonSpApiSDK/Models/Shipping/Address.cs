/*
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    ///     The address.
    /// </summary>
    [DataContract]
    public class Address : IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Address()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="Name">The name of the person, business or institution at that address. (required).</param>
        /// <param name="AddressLine1">First line of that address. (required).</param>
        /// <param name="AddressLine2">Additional address information, if required..</param>
        /// <param name="AddressLine3">Additional address information, if required..</param>
        /// <param name="StateOrRegion">StateOrRegion (required).</param>
        /// <param name="City">City (required).</param>
        /// <param name="CountryCode">CountryCode (required).</param>
        /// <param name="PostalCode">PostalCode (required).</param>
        /// <param name="Email">The email address of the contact associated with the address..</param>
        /// <param name="CopyEmails">The email cc addresses of the contact associated with the address..</param>
        /// <param name="PhoneNumber">The phone number of the person, business or institution located at that address..</param>
        public Address(string Name = default, string AddressLine1 = default, string AddressLine2 = default,
            string AddressLine3 = default, string StateOrRegion = default, string City = default,
            string CountryCode = default, string PostalCode = default, string Email = default,
            List<string> CopyEmails = default, string PhoneNumber = default)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
                throw new InvalidDataException("Name is a required property for Address and cannot be null");
            this.Name = Name;
            // to ensure "AddressLine1" is required (not null)
            if (AddressLine1 == null)
                throw new InvalidDataException("AddressLine1 is a required property for Address and cannot be null");
            this.AddressLine1 = AddressLine1;
            // to ensure "StateOrRegion" is required (not null)
            if (StateOrRegion == null)
                throw new InvalidDataException("StateOrRegion is a required property for Address and cannot be null");
            this.StateOrRegion = StateOrRegion;
            // to ensure "City" is required (not null)
            if (City == null)
                throw new InvalidDataException("City is a required property for Address and cannot be null");
            this.City = City;
            // to ensure "CountryCode" is required (not null)
            if (CountryCode == null)
                throw new InvalidDataException("CountryCode is a required property for Address and cannot be null");
            this.CountryCode = CountryCode;
            // to ensure "PostalCode" is required (not null)
            if (PostalCode == null)
                throw new InvalidDataException("PostalCode is a required property for Address and cannot be null");
            this.PostalCode = PostalCode;
            this.AddressLine2 = AddressLine2;
            this.AddressLine3 = AddressLine3;
            this.Email = Email;
            this.CopyEmails = CopyEmails;
            this.PhoneNumber = PhoneNumber;
        }

        /// <summary>
        ///     The name of the person, business or institution at that address.
        /// </summary>
        /// <value>The name of the person, business or institution at that address.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     First line of that address.
        /// </summary>
        /// <value>First line of that address.</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        ///     Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        ///     Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name = "addressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        ///     Gets or Sets StateOrRegion
        /// </summary>
        [DataMember(Name = "stateOrRegion", EmitDefaultValue = false)]
        public string StateOrRegion { get; set; }

        /// <summary>
        ///     Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        ///     Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        ///     Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        ///     The email address of the contact associated with the address.
        /// </summary>
        /// <value>The email address of the contact associated with the address.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        ///     The email cc addresses of the contact associated with the address.
        /// </summary>
        /// <value>The email cc addresses of the contact associated with the address.</value>
        [DataMember(Name = "copyEmails", EmitDefaultValue = false)]
        public List<string> CopyEmails { get; set; }

        /// <summary>
        ///     The phone number of the person, business or institution located at that address.
        /// </summary>
        /// <value>The phone number of the person, business or institution located at that address.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        ///     Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    AddressLine1 == input.AddressLine1 ||
                    (AddressLine1 != null &&
                     AddressLine1.Equals(input.AddressLine1))
                ) &&
                (
                    AddressLine2 == input.AddressLine2 ||
                    (AddressLine2 != null &&
                     AddressLine2.Equals(input.AddressLine2))
                ) &&
                (
                    AddressLine3 == input.AddressLine3 ||
                    (AddressLine3 != null &&
                     AddressLine3.Equals(input.AddressLine3))
                ) &&
                (
                    StateOrRegion == input.StateOrRegion ||
                    (StateOrRegion != null &&
                     StateOrRegion.Equals(input.StateOrRegion))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    CountryCode == input.CountryCode ||
                    (CountryCode != null &&
                     CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    PostalCode == input.PostalCode ||
                    (PostalCode != null &&
                     PostalCode.Equals(input.PostalCode))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    CopyEmails == input.CopyEmails ||
                    (CopyEmails != null &&
                     CopyEmails.SequenceEqual(input.CopyEmails))
                ) &&
                (
                    PhoneNumber == input.PhoneNumber ||
                    (PhoneNumber != null &&
                     PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (Name != null && Name.Length > 50)
                yield return new ValidationResult("Invalid value for Name, length must be less than 50.",
                    new[] { "Name" });

            // Name (string) minLength
            if (Name != null && Name.Length < 1)
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.",
                    new[] { "Name" });

            // AddressLine1 (string) maxLength
            if (AddressLine1 != null && AddressLine1.Length > 60)
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 60.",
                    new[] { "AddressLine1" });

            // AddressLine1 (string) minLength
            if (AddressLine1 != null && AddressLine1.Length < 1)
                yield return new ValidationResult("Invalid value for AddressLine1, length must be greater than 1.",
                    new[] { "AddressLine1" });

            // AddressLine2 (string) maxLength
            if (AddressLine2 != null && AddressLine2.Length > 60)
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 60.",
                    new[] { "AddressLine2" });

            // AddressLine2 (string) minLength
            if (AddressLine2 != null && AddressLine2.Length < 1)
                yield return new ValidationResult("Invalid value for AddressLine2, length must be greater than 1.",
                    new[] { "AddressLine2" });

            // AddressLine3 (string) maxLength
            if (AddressLine3 != null && AddressLine3.Length > 60)
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 60.",
                    new[] { "AddressLine3" });

            // AddressLine3 (string) minLength
            if (AddressLine3 != null && AddressLine3.Length < 1)
                yield return new ValidationResult("Invalid value for AddressLine3, length must be greater than 1.",
                    new[] { "AddressLine3" });

            // Email (string) maxLength
            if (Email != null && Email.Length > 64)
                yield return new ValidationResult("Invalid value for Email, length must be less than 64.",
                    new[] { "Email" });

            // PhoneNumber (string) maxLength
            if (PhoneNumber != null && PhoneNumber.Length > 20)
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 20.",
                    new[] { "PhoneNumber" });

            // PhoneNumber (string) minLength
            if (PhoneNumber != null && PhoneNumber.Length < 1)
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be greater than 1.",
                    new[] { "PhoneNumber" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  StateOrRegion: ").Append(StateOrRegion).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CopyEmails: ").Append(CopyEmails).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Address);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (AddressLine1 != null)
                    hashCode = hashCode * 59 + AddressLine1.GetHashCode();
                if (AddressLine2 != null)
                    hashCode = hashCode * 59 + AddressLine2.GetHashCode();
                if (AddressLine3 != null)
                    hashCode = hashCode * 59 + AddressLine3.GetHashCode();
                if (StateOrRegion != null)
                    hashCode = hashCode * 59 + StateOrRegion.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (CopyEmails != null)
                    hashCode = hashCode * 59 + CopyEmails.GetHashCode();
                if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                return hashCode;
            }
        }
    }
}