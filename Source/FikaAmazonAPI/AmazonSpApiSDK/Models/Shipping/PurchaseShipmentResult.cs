/*
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    ///     The payload schema for the purchaseShipment operation.
    /// </summary>
    [DataContract]
    public class PurchaseShipmentResult : IEquatable<PurchaseShipmentResult>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PurchaseShipmentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PurchaseShipmentResult()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PurchaseShipmentResult" /> class.
        /// </summary>
        /// <param name="ShipmentId">ShipmentId (required).</param>
        /// <param name="ServiceRate">ServiceRate (required).</param>
        /// <param name="LabelResults">LabelResults (required).</param>
        public PurchaseShipmentResult(ShipmentId ShipmentId = default, ServiceRate ServiceRate = default,
            LabelResultList LabelResults = default)
        {
            // to ensure "ShipmentId" is required (not null)
            if (ShipmentId == null)
                throw new InvalidDataException(
                    "ShipmentId is a required property for PurchaseShipmentResult and cannot be null");
            this.ShipmentId = ShipmentId;
            // to ensure "ServiceRate" is required (not null)
            if (ServiceRate == null)
                throw new InvalidDataException(
                    "ServiceRate is a required property for PurchaseShipmentResult and cannot be null");
            this.ServiceRate = ServiceRate;
            // to ensure "LabelResults" is required (not null)
            if (LabelResults == null)
                throw new InvalidDataException(
                    "LabelResults is a required property for PurchaseShipmentResult and cannot be null");
            this.LabelResults = LabelResults;
        }

        /// <summary>
        ///     Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public ShipmentId ShipmentId { get; set; }

        /// <summary>
        ///     Gets or Sets ServiceRate
        /// </summary>
        [DataMember(Name = "serviceRate", EmitDefaultValue = false)]
        public ServiceRate ServiceRate { get; set; }

        /// <summary>
        ///     Gets or Sets LabelResults
        /// </summary>
        [DataMember(Name = "labelResults", EmitDefaultValue = false)]
        public LabelResultList LabelResults { get; set; }

        /// <summary>
        ///     Returns true if PurchaseShipmentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseShipmentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseShipmentResult input)
        {
            if (input == null)
                return false;

            return
                (
                    ShipmentId == input.ShipmentId ||
                    (ShipmentId != null &&
                     ShipmentId.Equals(input.ShipmentId))
                ) &&
                (
                    ServiceRate == input.ServiceRate ||
                    (ServiceRate != null &&
                     ServiceRate.Equals(input.ServiceRate))
                ) &&
                (
                    LabelResults == input.LabelResults ||
                    (LabelResults != null &&
                     LabelResults.Equals(input.LabelResults))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseShipmentResult {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ServiceRate: ").Append(ServiceRate).Append("\n");
            sb.Append("  LabelResults: ").Append(LabelResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PurchaseShipmentResult);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ShipmentId != null)
                    hashCode = hashCode * 59 + ShipmentId.GetHashCode();
                if (ServiceRate != null)
                    hashCode = hashCode * 59 + ServiceRate.GetHashCode();
                if (LabelResults != null)
                    hashCode = hashCode * 59 + LabelResults.GetHashCode();
                return hashCode;
            }
        }
    }
}