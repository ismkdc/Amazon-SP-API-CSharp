/*
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    ///     The payload schema for the purchaseShipment operation.
    /// </summary>
    [DataContract]
    public class PurchaseShipmentRequest : IEquatable<PurchaseShipmentRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PurchaseShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PurchaseShipmentRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PurchaseShipmentRequest" /> class.
        /// </summary>
        /// <param name="ClientReferenceId">ClientReferenceId (required).</param>
        /// <param name="ShipTo">ShipTo (required).</param>
        /// <param name="ShipFrom">ShipFrom (required).</param>
        /// <param name="ShipDate">The start date and time. This defaults to the current date and time..</param>
        /// <param name="ServiceType">ServiceType (required).</param>
        /// <param name="Containers">Containers (required).</param>
        /// <param name="LabelSpecification">LabelSpecification (required).</param>
        public PurchaseShipmentRequest(string ClientReferenceId = default, Address ShipTo = default,
            Address ShipFrom = default, DateTime? ShipDate = default, ServiceType ServiceType = default,
            ContainerList Containers = default, LabelSpecification LabelSpecification = default)
        {
            // to ensure "ClientReferenceId" is required (not null)
            if (ClientReferenceId == null)
                throw new InvalidDataException(
                    "ClientReferenceId is a required property for PurchaseShipmentRequest and cannot be null");
            this.ClientReferenceId = ClientReferenceId;
            // to ensure "ShipTo" is required (not null)
            if (ShipTo == null)
                throw new InvalidDataException(
                    "ShipTo is a required property for PurchaseShipmentRequest and cannot be null");
            this.ShipTo = ShipTo;
            // to ensure "ShipFrom" is required (not null)
            if (ShipFrom == null)
                throw new InvalidDataException(
                    "ShipFrom is a required property for PurchaseShipmentRequest and cannot be null");
            this.ShipFrom = ShipFrom;
            // to ensure "ServiceType" is required (not null)
            if (ServiceType == null)
                throw new InvalidDataException(
                    "ServiceType is a required property for PurchaseShipmentRequest and cannot be null");
            this.ServiceType = ServiceType;
            // to ensure "Containers" is required (not null)
            if (Containers == null)
                throw new InvalidDataException(
                    "Containers is a required property for PurchaseShipmentRequest and cannot be null");
            this.Containers = Containers;
            // to ensure "LabelSpecification" is required (not null)
            if (LabelSpecification == null)
                throw new InvalidDataException(
                    "LabelSpecification is a required property for PurchaseShipmentRequest and cannot be null");
            this.LabelSpecification = LabelSpecification;
            this.ShipDate = ShipDate;
        }

        /// <summary>
        ///     Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name = "serviceType", EmitDefaultValue = false)]
        public ServiceType ServiceType { get; set; }

        /// <summary>
        ///     Gets or Sets ClientReferenceId
        /// </summary>
        [DataMember(Name = "clientReferenceId", EmitDefaultValue = false)]
        public string ClientReferenceId { get; set; }

        /// <summary>
        ///     Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "shipTo", EmitDefaultValue = false)]
        public Address ShipTo { get; set; }

        /// <summary>
        ///     Gets or Sets ShipFrom
        /// </summary>
        [DataMember(Name = "shipFrom", EmitDefaultValue = false)]
        public Address ShipFrom { get; set; }

        /// <summary>
        ///     The start date and time. This defaults to the current date and time.
        /// </summary>
        /// <value>The start date and time. This defaults to the current date and time.</value>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }


        /// <summary>
        ///     Gets or Sets Containers
        /// </summary>
        [DataMember(Name = "containers", EmitDefaultValue = false)]
        public ContainerList Containers { get; set; }

        /// <summary>
        ///     Gets or Sets LabelSpecification
        /// </summary>
        [DataMember(Name = "labelSpecification", EmitDefaultValue = false)]
        public LabelSpecification LabelSpecification { get; set; }

        /// <summary>
        ///     Returns true if PurchaseShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseShipmentRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    ClientReferenceId == input.ClientReferenceId ||
                    (ClientReferenceId != null &&
                     ClientReferenceId.Equals(input.ClientReferenceId))
                ) &&
                (
                    ShipTo == input.ShipTo ||
                    (ShipTo != null &&
                     ShipTo.Equals(input.ShipTo))
                ) &&
                (
                    ShipFrom == input.ShipFrom ||
                    (ShipFrom != null &&
                     ShipFrom.Equals(input.ShipFrom))
                ) &&
                (
                    ShipDate == input.ShipDate ||
                    (ShipDate != null &&
                     ShipDate.Equals(input.ShipDate))
                ) &&
                (
                    ServiceType == input.ServiceType ||
                    (ServiceType != null &&
                     ServiceType.Equals(input.ServiceType))
                ) &&
                (
                    Containers == input.Containers ||
                    (Containers != null &&
                     Containers.Equals(input.Containers))
                ) &&
                (
                    LabelSpecification == input.LabelSpecification ||
                    (LabelSpecification != null &&
                     LabelSpecification.Equals(input.LabelSpecification))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseShipmentRequest {\n");
            sb.Append("  ClientReferenceId: ").Append(ClientReferenceId).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("  LabelSpecification: ").Append(LabelSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PurchaseShipmentRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ClientReferenceId != null)
                    hashCode = hashCode * 59 + ClientReferenceId.GetHashCode();
                if (ShipTo != null)
                    hashCode = hashCode * 59 + ShipTo.GetHashCode();
                if (ShipFrom != null)
                    hashCode = hashCode * 59 + ShipFrom.GetHashCode();
                if (ShipDate != null)
                    hashCode = hashCode * 59 + ShipDate.GetHashCode();
                if (ServiceType != null)
                    hashCode = hashCode * 59 + ServiceType.GetHashCode();
                if (Containers != null)
                    hashCode = hashCode * 59 + Containers.GetHashCode();
                if (LabelSpecification != null)
                    hashCode = hashCode * 59 + LabelSpecification.GetHashCode();
                return hashCode;
            }
        }
    }
}