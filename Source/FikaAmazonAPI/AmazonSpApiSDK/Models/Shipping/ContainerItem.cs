/*
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    ///     Item in the container.
    /// </summary>
    [DataContract]
    public class ContainerItem : IEquatable<ContainerItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ContainerItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ContainerItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContainerItem" /> class.
        /// </summary>
        /// <param name="Quantity">The quantity of the items of this type in the container. (required).</param>
        /// <param name="UnitPrice">
        ///     The unit price of an item of this type (the total value of this item type in the container is
        ///     unitPrice * quantity). (required).
        /// </param>
        /// <param name="UnitWeight">
        ///     The unit weight of an item of this type (the total weight of this item type in the container
        ///     is unitWeight * quantity). (required).
        /// </param>
        /// <param name="Title">A descriptive title of the item. (required).</param>
        public ContainerItem(decimal? Quantity = default, Currency UnitPrice = default, Weight UnitWeight = default,
            string Title = default)
        {
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
                throw new InvalidDataException("Quantity is a required property for ContainerItem and cannot be null");
            this.Quantity = Quantity;
            // to ensure "UnitPrice" is required (not null)
            if (UnitPrice == null)
                throw new InvalidDataException("UnitPrice is a required property for ContainerItem and cannot be null");
            this.UnitPrice = UnitPrice;
            // to ensure "UnitWeight" is required (not null)
            if (UnitWeight == null)
                throw new InvalidDataException(
                    "UnitWeight is a required property for ContainerItem and cannot be null");
            this.UnitWeight = UnitWeight;
            // to ensure "Title" is required (not null)
            if (Title == null)
                throw new InvalidDataException("Title is a required property for ContainerItem and cannot be null");
            this.Title = Title;
        }

        /// <summary>
        ///     The quantity of the items of this type in the container.
        /// </summary>
        /// <value>The quantity of the items of this type in the container.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        ///     The unit price of an item of this type (the total value of this item type in the container is unitPrice *
        ///     quantity).
        /// </summary>
        /// <value>
        ///     The unit price of an item of this type (the total value of this item type in the container is unitPrice *
        ///     quantity).
        /// </value>
        [DataMember(Name = "unitPrice", EmitDefaultValue = false)]
        public Currency UnitPrice { get; set; }

        /// <summary>
        ///     The unit weight of an item of this type (the total weight of this item type in the container is unitWeight *
        ///     quantity).
        /// </summary>
        /// <value>
        ///     The unit weight of an item of this type (the total weight of this item type in the container is unitWeight *
        ///     quantity).
        /// </value>
        [DataMember(Name = "unitWeight", EmitDefaultValue = false)]
        public Weight UnitWeight { get; set; }

        /// <summary>
        ///     A descriptive title of the item.
        /// </summary>
        /// <value>A descriptive title of the item.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        ///     Returns true if ContainerItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ContainerItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerItem input)
        {
            if (input == null)
                return false;

            return
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    UnitPrice == input.UnitPrice ||
                    (UnitPrice != null &&
                     UnitPrice.Equals(input.UnitPrice))
                ) &&
                (
                    UnitWeight == input.UnitWeight ||
                    (UnitWeight != null &&
                     UnitWeight.Equals(input.UnitWeight))
                ) &&
                (
                    Title == input.Title ||
                    (Title != null &&
                     Title.Equals(input.Title))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (Title != null && Title.Length > 30)
                yield return new ValidationResult("Invalid value for Title, length must be less than 30.",
                    new[] { "Title" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerItem {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ContainerItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                if (UnitWeight != null)
                    hashCode = hashCode * 59 + UnitWeight.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                return hashCode;
            }
        }
    }
}