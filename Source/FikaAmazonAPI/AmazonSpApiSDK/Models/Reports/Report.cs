/*
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2020-09-04
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Reports
{
    /// <summary>
    ///     Report
    /// </summary>
    [DataContract]
    public class Report : IEquatable<Report>, IValidatableObject
    {
        /// <summary>
        ///     The processing status of the report.
        /// </summary>
        /// <value>The processing status of the report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {
            /// <summary>
            ///     Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")] CANCELLED = 1,

            /// <summary>
            ///     Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")] DONE = 2,

            /// <summary>
            ///     Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")] FATAL = 3,

            /// <summary>
            ///     Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")] INPROGRESS = 4,

            /// <summary>
            ///     Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")] INQUEUE = 5
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Report()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        /// <param name="MarketplaceIds">A list of marketplace identifiers for the report..</param>
        /// <param name="ReportId">
        ///     The identifier for the report. This identifier is unique only in combination with a seller ID.
        ///     (required).
        /// </param>
        /// <param name="ReportType">The report type. (required).</param>
        /// <param name="DataStartTime">The start of a date and time range used for selecting the data to report..</param>
        /// <param name="DataEndTime">The end of a date and time range used for selecting the data to report..</param>
        /// <param name="ReportScheduleId">
        ///     The identifier of the report schedule that created this report (if any). This identifier
        ///     is unique only in combination with a seller ID..
        /// </param>
        /// <param name="CreatedTime">The date and time when the report was created. (required).</param>
        /// <param name="ProcessingStatus">The processing status of the report. (required).</param>
        /// <param name="ProcessingStartTime">The date and time when the report processing started, in ISO 8601 date time format..</param>
        /// <param name="ProcessingEndTime">The date and time when the report processing completed, in ISO 8601 date time format..</param>
        /// <param name="ReportDocumentId">
        ///     The identifier for the report document. Pass this into the getReportDocument operation
        ///     to get the information you will need to retrieve and decrypt the report document&#39;s contents..
        /// </param>
        public Report(List<string> MarketplaceIds = default, string ReportId = default, string ReportType = default,
            DateTime? DataStartTime = default, DateTime? DataEndTime = default, string ReportScheduleId = default,
            DateTime? CreatedTime = default, ProcessingStatusEnum ProcessingStatus = default,
            DateTime? ProcessingStartTime = default, DateTime? ProcessingEndTime = default,
            string ReportDocumentId = default)
        {
            // to ensure "ReportId" is required (not null)
            if (ReportId == null)
                throw new InvalidDataException("ReportId is a required property for Report and cannot be null");
            this.ReportId = ReportId;
            // to ensure "ReportType" is required (not null)
            if (ReportType == null)
                throw new InvalidDataException("ReportType is a required property for Report and cannot be null");
            this.ReportType = ReportType;
            // to ensure "CreatedTime" is required (not null)
            if (CreatedTime == null)
                throw new InvalidDataException("CreatedTime is a required property for Report and cannot be null");
            this.CreatedTime = CreatedTime;
            // to ensure "ProcessingStatus" is required (not null)
            if (ProcessingStatus == null)
                throw new InvalidDataException("ProcessingStatus is a required property for Report and cannot be null");
            this.ProcessingStatus = ProcessingStatus;
            this.MarketplaceIds = MarketplaceIds;
            this.DataStartTime = DataStartTime;
            this.DataEndTime = DataEndTime;
            this.ReportScheduleId = ReportScheduleId;
            this.ProcessingStartTime = ProcessingStartTime;
            this.ProcessingEndTime = ProcessingEndTime;
            this.ReportDocumentId = ReportDocumentId;
        }

        /// <summary>
        ///     The processing status of the report.
        /// </summary>
        /// <value>The processing status of the report.</value>
        [DataMember(Name = "processingStatus", EmitDefaultValue = false)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }

        /// <summary>
        ///     A list of marketplace identifiers for the report.
        /// </summary>
        /// <value>A list of marketplace identifiers for the report.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        ///     The identifier for the report. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the report. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "reportId", EmitDefaultValue = false)]
        public string ReportId { get; set; }

        /// <summary>
        ///     The report type.
        /// </summary>
        /// <value>The report type.</value>
        [DataMember(Name = "reportType", EmitDefaultValue = false)]
        public string ReportType { get; set; }

        /// <summary>
        ///     The start of a date and time range used for selecting the data to report.
        /// </summary>
        /// <value>The start of a date and time range used for selecting the data to report.</value>
        [DataMember(Name = "dataStartTime", EmitDefaultValue = false)]
        public DateTime? DataStartTime { get; set; }

        /// <summary>
        ///     The end of a date and time range used for selecting the data to report.
        /// </summary>
        /// <value>The end of a date and time range used for selecting the data to report.</value>
        [DataMember(Name = "dataEndTime", EmitDefaultValue = false)]
        public DateTime? DataEndTime { get; set; }

        /// <summary>
        ///     The identifier of the report schedule that created this report (if any). This identifier is unique only in
        ///     combination with a seller ID.
        /// </summary>
        /// <value>
        ///     The identifier of the report schedule that created this report (if any). This identifier is unique only in
        ///     combination with a seller ID.
        /// </value>
        [DataMember(Name = "reportScheduleId", EmitDefaultValue = false)]
        public string ReportScheduleId { get; set; }

        /// <summary>
        ///     The date and time when the report was created.
        /// </summary>
        /// <value>The date and time when the report was created.</value>
        [DataMember(Name = "createdTime", EmitDefaultValue = false)]
        public DateTime? CreatedTime { get; set; }


        /// <summary>
        ///     The date and time when the report processing started, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the report processing started, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingStartTime", EmitDefaultValue = false)]
        public DateTime? ProcessingStartTime { get; set; }

        /// <summary>
        ///     The date and time when the report processing completed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the report processing completed, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingEndTime", EmitDefaultValue = false)]
        public DateTime? ProcessingEndTime { get; set; }

        /// <summary>
        ///     The identifier for the report document. Pass this into the getReportDocument operation to get the information you
        ///     will need to retrieve and decrypt the report document&#39;s contents.
        /// </summary>
        /// <value>
        ///     The identifier for the report document. Pass this into the getReportDocument operation to get the information
        ///     you will need to retrieve and decrypt the report document&#39;s contents.
        /// </value>
        [DataMember(Name = "reportDocumentId", EmitDefaultValue = false)]
        public string ReportDocumentId { get; set; }

        /// <summary>
        ///     Returns true if Report instances are equal
        /// </summary>
        /// <param name="input">Instance of Report to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Report input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceIds == input.MarketplaceIds ||
                    (MarketplaceIds != null &&
                     MarketplaceIds.SequenceEqual(input.MarketplaceIds))
                ) &&
                (
                    ReportId == input.ReportId ||
                    (ReportId != null &&
                     ReportId.Equals(input.ReportId))
                ) &&
                (
                    ReportType == input.ReportType ||
                    (ReportType != null &&
                     ReportType.Equals(input.ReportType))
                ) &&
                (
                    DataStartTime == input.DataStartTime ||
                    (DataStartTime != null &&
                     DataStartTime.Equals(input.DataStartTime))
                ) &&
                (
                    DataEndTime == input.DataEndTime ||
                    (DataEndTime != null &&
                     DataEndTime.Equals(input.DataEndTime))
                ) &&
                (
                    ReportScheduleId == input.ReportScheduleId ||
                    (ReportScheduleId != null &&
                     ReportScheduleId.Equals(input.ReportScheduleId))
                ) &&
                (
                    CreatedTime == input.CreatedTime ||
                    (CreatedTime != null &&
                     CreatedTime.Equals(input.CreatedTime))
                ) &&
                (
                    ProcessingStatus == input.ProcessingStatus ||
                    (ProcessingStatus != null &&
                     ProcessingStatus.Equals(input.ProcessingStatus))
                ) &&
                (
                    ProcessingStartTime == input.ProcessingStartTime ||
                    (ProcessingStartTime != null &&
                     ProcessingStartTime.Equals(input.ProcessingStartTime))
                ) &&
                (
                    ProcessingEndTime == input.ProcessingEndTime ||
                    (ProcessingEndTime != null &&
                     ProcessingEndTime.Equals(input.ProcessingEndTime))
                ) &&
                (
                    ReportDocumentId == input.ReportDocumentId ||
                    (ReportDocumentId != null &&
                     ReportDocumentId.Equals(input.ReportDocumentId))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  DataStartTime: ").Append(DataStartTime).Append("\n");
            sb.Append("  DataEndTime: ").Append(DataEndTime).Append("\n");
            sb.Append("  ReportScheduleId: ").Append(ReportScheduleId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  ReportDocumentId: ").Append(ReportDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Report);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceIds != null)
                    hashCode = hashCode * 59 + MarketplaceIds.GetHashCode();
                if (ReportId != null)
                    hashCode = hashCode * 59 + ReportId.GetHashCode();
                if (ReportType != null)
                    hashCode = hashCode * 59 + ReportType.GetHashCode();
                if (DataStartTime != null)
                    hashCode = hashCode * 59 + DataStartTime.GetHashCode();
                if (DataEndTime != null)
                    hashCode = hashCode * 59 + DataEndTime.GetHashCode();
                if (ReportScheduleId != null)
                    hashCode = hashCode * 59 + ReportScheduleId.GetHashCode();
                if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                if (ProcessingStatus != null)
                    hashCode = hashCode * 59 + ProcessingStatus.GetHashCode();
                if (ProcessingStartTime != null)
                    hashCode = hashCode * 59 + ProcessingStartTime.GetHashCode();
                if (ProcessingEndTime != null)
                    hashCode = hashCode * 59 + ProcessingEndTime.GetHashCode();
                if (ReportDocumentId != null)
                    hashCode = hashCode * 59 + ReportDocumentId.GetHashCode();
                return hashCode;
            }
        }
    }
}