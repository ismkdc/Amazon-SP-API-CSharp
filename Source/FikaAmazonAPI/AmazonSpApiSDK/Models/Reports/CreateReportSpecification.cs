/*
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2020-09-04
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Reports
{
    /// <summary>
    ///     CreateReportSpecification
    /// </summary>
    [DataContract]
    public class CreateReportSpecification : IEquatable<CreateReportSpecification>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateReportSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateReportSpecification()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateReportSpecification" /> class.
        /// </summary>
        /// <param name="ReportOptions">ReportOptions.</param>
        /// <param name="ReportType">The report type. (required).</param>
        /// <param name="DataStartTime">
        ///     The start of a date and time range, in ISO 8601 date time format, used for selecting the
        ///     data to report. The default is now. The value must be prior to or equal to the current date and time. Not all
        ///     report types make use of this..
        /// </param>
        /// <param name="DataEndTime">
        ///     The end of a date and time range, in ISO 8601 date time format, used for selecting the data
        ///     to report. The default is now. The value must be prior to or equal to the current date and time. Not all report
        ///     types make use of this..
        /// </param>
        /// <param name="MarketplaceIds">
        ///     A list of marketplace identifiers. The report document&#39;s contents will contain data
        ///     for all of the specified marketplaces, unless the report type indicates otherwise. (required).
        /// </param>
        public CreateReportSpecification(ReportOptions ReportOptions = default, string ReportType = default,
            DateTime? DataStartTime = default, DateTime? DataEndTime = default, List<string> MarketplaceIds = default)
        {
            // to ensure "ReportType" is required (not null)
            if (ReportType == null)
                throw new InvalidDataException(
                    "ReportType is a required property for CreateReportSpecification and cannot be null");
            this.ReportType = ReportType;
            // to ensure "MarketplaceIds" is required (not null)
            if (MarketplaceIds == null)
                throw new InvalidDataException(
                    "MarketplaceIds is a required property for CreateReportSpecification and cannot be null");
            this.MarketplaceIds = MarketplaceIds;
            this.ReportOptions = ReportOptions;
            this.DataStartTime = DataStartTime;
            this.DataEndTime = DataEndTime;
        }

        /// <summary>
        ///     Gets or Sets ReportOptions
        /// </summary>
        [DataMember(Name = "reportOptions", EmitDefaultValue = false)]
        public ReportOptions ReportOptions { get; set; }

        /// <summary>
        ///     The report type.
        /// </summary>
        /// <value>The report type.</value>
        [DataMember(Name = "reportType", EmitDefaultValue = false)]
        public string ReportType { get; set; }

        /// <summary>
        ///     The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The
        ///     default is now. The value must be prior to or equal to the current date and time. Not all report types make use of
        ///     this.
        /// </summary>
        /// <value>
        ///     The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The
        ///     default is now. The value must be prior to or equal to the current date and time. Not all report types make use of
        ///     this.
        /// </value>
        [DataMember(Name = "dataStartTime", EmitDefaultValue = false)]
        public DateTime? DataStartTime { get; set; }

        /// <summary>
        ///     The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default
        ///     is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
        /// </summary>
        /// <value>
        ///     The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The
        ///     default is now. The value must be prior to or equal to the current date and time. Not all report types make use of
        ///     this.
        /// </value>
        [DataMember(Name = "dataEndTime", EmitDefaultValue = false)]
        public DateTime? DataEndTime { get; set; }

        /// <summary>
        ///     A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified
        ///     marketplaces, unless the report type indicates otherwise.
        /// </summary>
        /// <value>
        ///     A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified
        ///     marketplaces, unless the report type indicates otherwise.
        /// </value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        ///     Returns true if CreateReportSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateReportSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReportSpecification input)
        {
            if (input == null)
                return false;

            return
                (
                    ReportOptions == input.ReportOptions ||
                    (ReportOptions != null &&
                     ReportOptions.Equals(input.ReportOptions))
                ) &&
                (
                    ReportType == input.ReportType ||
                    (ReportType != null &&
                     ReportType.Equals(input.ReportType))
                ) &&
                (
                    DataStartTime == input.DataStartTime ||
                    (DataStartTime != null &&
                     DataStartTime.Equals(input.DataStartTime))
                ) &&
                (
                    DataEndTime == input.DataEndTime ||
                    (DataEndTime != null &&
                     DataEndTime.Equals(input.DataEndTime))
                ) &&
                (
                    MarketplaceIds == input.MarketplaceIds ||
                    (MarketplaceIds != null &&
                     MarketplaceIds.SequenceEqual(input.MarketplaceIds))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateReportSpecification {\n");
            sb.Append("  ReportOptions: ").Append(ReportOptions).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  DataStartTime: ").Append(DataStartTime).Append("\n");
            sb.Append("  DataEndTime: ").Append(DataEndTime).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreateReportSpecification);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ReportOptions != null)
                    hashCode = hashCode * 59 + ReportOptions.GetHashCode();
                if (ReportType != null)
                    hashCode = hashCode * 59 + ReportType.GetHashCode();
                if (DataStartTime != null)
                    hashCode = hashCode * 59 + DataStartTime.GetHashCode();
                if (DataEndTime != null)
                    hashCode = hashCode * 59 + DataEndTime.GetHashCode();
                if (MarketplaceIds != null)
                    hashCode = hashCode * 59 + MarketplaceIds.GetHashCode();
                return hashCode;
            }
        }
    }
}