/*
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2020-09-04
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Reports
{
    /// <summary>
    ///     CreateReportScheduleSpecification
    /// </summary>
    [DataContract]
    public class CreateReportScheduleSpecification : IEquatable<CreateReportScheduleSpecification>, IValidatableObject
    {
        /// <summary>
        ///     One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
        /// </summary>
        /// <value>One of a set of predefined ISO 8601 periods that specifies how often a report should be created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            ///     Enum PT5M for value: PT5M  5 minutes
            /// </summary>
            [EnumMember(Value = "PT5M")] PT5M = 1,

            /// <summary>
            ///     Enum PT15M for value: PT15M 15 minutes
            /// </summary>
            [EnumMember(Value = "PT15M")] PT15M = 2,

            /// <summary>
            ///     Enum PT30M for value: PT30M 30 minutes
            /// </summary>
            [EnumMember(Value = "PT30M")] PT30M = 3,

            /// <summary>
            ///     Enum PT1H for value: PT1H 1 hour
            /// </summary>
            [EnumMember(Value = "PT1H")] PT1H = 4,

            /// <summary>
            ///     Enum PT2H for value: PT2H 2 hours
            /// </summary>
            [EnumMember(Value = "PT2H")] PT2H = 5,

            /// <summary>
            ///     Enum PT4H for value: PT4H 4 hours
            /// </summary>
            [EnumMember(Value = "PT4H")] PT4H = 6,

            /// <summary>
            ///     Enum PT8H for value: PT8H 8 hours
            /// </summary>
            [EnumMember(Value = "PT8H")] PT8H = 7,

            /// <summary>
            ///     Enum PT12H for value: PT12H 12 hours
            /// </summary>
            [EnumMember(Value = "PT12H")] PT12H = 8,

            /// <summary>
            ///     Enum P1D for value: P1D 1 day
            /// </summary>
            [EnumMember(Value = "P1D")] P1D = 9,

            /// <summary>
            ///     Enum P2D for value: P2D 2 days
            /// </summary>
            [EnumMember(Value = "P2D")] P2D = 10,

            /// <summary>
            ///     Enum P3D for value: P3D 3 days
            /// </summary>
            [EnumMember(Value = "P3D")] P3D = 11,

            /// <summary>
            ///     Enum PT84H for value: PT84H 84 hours
            /// </summary>
            [EnumMember(Value = "PT84H")] PT84H = 12,

            /// <summary>
            ///     Enum P7D for value: P7D 7 days
            /// </summary>
            [EnumMember(Value = "P7D")] P7D = 13,

            /// <summary>
            ///     Enum P14D for value: P14D 14 days
            /// </summary>
            [EnumMember(Value = "P14D")] P14D = 14,

            /// <summary>
            ///     Enum P15D for value: P15D 15 days
            /// </summary>
            [EnumMember(Value = "P15D")] P15D = 15,

            /// <summary>
            ///     Enum P18D for value: P18D 18 days
            /// </summary>
            [EnumMember(Value = "P18D")] P18D = 16,

            /// <summary>
            ///     Enum P30D for value: P30D 30 days
            /// </summary>
            [EnumMember(Value = "P30D")] P30D = 17,

            /// <summary>
            ///     Enum P1M for value: P1M 1 month
            /// </summary>
            [EnumMember(Value = "P1M")] P1M = 18
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateReportScheduleSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateReportScheduleSpecification()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateReportScheduleSpecification" /> class.
        /// </summary>
        /// <param name="ReportType">The report type. (required).</param>
        /// <param name="MarketplaceIds">A list of marketplace identifiers for the report schedule. (required).</param>
        /// <param name="ReportOptions">ReportOptions.</param>
        /// <param name="Period">
        ///     One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
        ///     (required).
        /// </param>
        /// <param name="NextReportCreationTime">
        ///     The date and time when the schedule will create its next report, in ISO 8601 date
        ///     time format..
        /// </param>
        public CreateReportScheduleSpecification(string ReportType = default, List<string> MarketplaceIds = default,
            ReportOptions ReportOptions = default, PeriodEnum Period = default,
            DateTime? NextReportCreationTime = default)
        {
            // to ensure "ReportType" is required (not null)
            if (ReportType == null)
                throw new InvalidDataException(
                    "ReportType is a required property for CreateReportScheduleSpecification and cannot be null");
            this.ReportType = ReportType;
            // to ensure "MarketplaceIds" is required (not null)
            if (MarketplaceIds == null)
                throw new InvalidDataException(
                    "MarketplaceIds is a required property for CreateReportScheduleSpecification and cannot be null");
            this.MarketplaceIds = MarketplaceIds;
            // to ensure "Period" is required (not null)
            if (Period == null)
                throw new InvalidDataException(
                    "Period is a required property for CreateReportScheduleSpecification and cannot be null");
            this.Period = Period;
            this.ReportOptions = ReportOptions;
            this.NextReportCreationTime = NextReportCreationTime;
        }

        /// <summary>
        ///     One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
        /// </summary>
        /// <value>One of a set of predefined ISO 8601 periods that specifies how often a report should be created.</value>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public PeriodEnum Period { get; set; }

        /// <summary>
        ///     The report type.
        /// </summary>
        /// <value>The report type.</value>
        [DataMember(Name = "reportType", EmitDefaultValue = false)]
        public string ReportType { get; set; }

        /// <summary>
        ///     A list of marketplace identifiers for the report schedule.
        /// </summary>
        /// <value>A list of marketplace identifiers for the report schedule.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        ///     Gets or Sets ReportOptions
        /// </summary>
        [DataMember(Name = "reportOptions", EmitDefaultValue = false)]
        public ReportOptions ReportOptions { get; set; }


        /// <summary>
        ///     The date and time when the schedule will create its next report, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the schedule will create its next report, in ISO 8601 date time format.</value>
        [DataMember(Name = "nextReportCreationTime", EmitDefaultValue = false)]
        public DateTime? NextReportCreationTime { get; set; }

        /// <summary>
        ///     Returns true if CreateReportScheduleSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateReportScheduleSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReportScheduleSpecification input)
        {
            if (input == null)
                return false;

            return
                (
                    ReportType == input.ReportType ||
                    (ReportType != null &&
                     ReportType.Equals(input.ReportType))
                ) &&
                (
                    MarketplaceIds == input.MarketplaceIds ||
                    (MarketplaceIds != null &&
                     MarketplaceIds.SequenceEqual(input.MarketplaceIds))
                ) &&
                (
                    ReportOptions == input.ReportOptions ||
                    (ReportOptions != null &&
                     ReportOptions.Equals(input.ReportOptions))
                ) &&
                (
                    Period == input.Period ||
                    (Period != null &&
                     Period.Equals(input.Period))
                ) &&
                (
                    NextReportCreationTime == input.NextReportCreationTime ||
                    (NextReportCreationTime != null &&
                     NextReportCreationTime.Equals(input.NextReportCreationTime))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateReportScheduleSpecification {\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ReportOptions: ").Append(ReportOptions).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  NextReportCreationTime: ").Append(NextReportCreationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreateReportScheduleSpecification);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ReportType != null)
                    hashCode = hashCode * 59 + ReportType.GetHashCode();
                if (MarketplaceIds != null)
                    hashCode = hashCode * 59 + MarketplaceIds.GetHashCode();
                if (ReportOptions != null)
                    hashCode = hashCode * 59 + ReportOptions.GetHashCode();
                if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                if (NextReportCreationTime != null)
                    hashCode = hashCode * 59 + NextReportCreationTime.GetHashCode();
                return hashCode;
            }
        }
    }
}