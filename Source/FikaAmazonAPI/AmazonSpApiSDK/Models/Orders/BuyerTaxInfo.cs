/*
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Orders
{
    /// <summary>
    ///     Tax information about the buyer.
    /// </summary>
    [DataContract]
    public class BuyerTaxInfo : IEquatable<BuyerTaxInfo>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="BuyerTaxInfo" /> class.
        /// </summary>
        /// <param name="companyLegalName">The legal name of the company..</param>
        /// <param name="taxingRegion">The country or region imposing the tax..</param>
        /// <param name="taxClassifications">A list of tax classifications that apply to the order..</param>
        public BuyerTaxInfo(string companyLegalName = default, string taxingRegion = default,
            List<TaxClassification> taxClassifications = default)
        {
            CompanyLegalName = companyLegalName;
            TaxingRegion = taxingRegion;
            TaxClassifications = taxClassifications;
        }

        public BuyerTaxInfo()
        {
            CompanyLegalName = default;
            TaxingRegion = default;
            TaxClassifications = default;
        }

        /// <summary>
        ///     The legal name of the company.
        /// </summary>
        /// <value>The legal name of the company.</value>
        [DataMember(Name = "CompanyLegalName", EmitDefaultValue = false)]
        public string CompanyLegalName { get; set; }

        /// <summary>
        ///     The country or region imposing the tax.
        /// </summary>
        /// <value>The country or region imposing the tax.</value>
        [DataMember(Name = "TaxingRegion", EmitDefaultValue = false)]
        public string TaxingRegion { get; set; }

        /// <summary>
        ///     A list of tax classifications that apply to the order.
        /// </summary>
        /// <value>A list of tax classifications that apply to the order.</value>
        [DataMember(Name = "TaxClassifications", EmitDefaultValue = false)]
        public List<TaxClassification> TaxClassifications { get; set; }

        /// <summary>
        ///     Returns true if BuyerTaxInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BuyerTaxInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuyerTaxInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    CompanyLegalName == input.CompanyLegalName ||
                    (CompanyLegalName != null &&
                     CompanyLegalName.Equals(input.CompanyLegalName))
                ) &&
                (
                    TaxingRegion == input.TaxingRegion ||
                    (TaxingRegion != null &&
                     TaxingRegion.Equals(input.TaxingRegion))
                ) &&
                (
                    TaxClassifications == input.TaxClassifications ||
                    (TaxClassifications != null &&
                     TaxClassifications.SequenceEqual(input.TaxClassifications))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuyerTaxInfo {\n");
            sb.Append("  CompanyLegalName: ").Append(CompanyLegalName).Append("\n");
            sb.Append("  TaxingRegion: ").Append(TaxingRegion).Append("\n");
            sb.Append("  TaxClassifications: ").Append(TaxClassifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BuyerTaxInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CompanyLegalName != null)
                    hashCode = hashCode * 59 + CompanyLegalName.GetHashCode();
                if (TaxingRegion != null)
                    hashCode = hashCode * 59 + TaxingRegion.GetHashCode();
                if (TaxClassifications != null)
                    hashCode = hashCode * 59 + TaxClassifications.GetHashCode();
                return hashCode;
            }
        }
    }
}