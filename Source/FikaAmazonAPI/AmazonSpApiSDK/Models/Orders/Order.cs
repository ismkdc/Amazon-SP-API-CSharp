/*
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Orders
{
    /// <summary>
    ///     Order information.
    /// </summary>
    [DataContract]
    public class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        ///     The buyer&#39;s invoicing preference. Available only in the TR marketplace.
        /// </summary>
        /// <value>The buyer&#39;s invoicing preference. Available only in the TR marketplace.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BuyerInvoicePreferenceEnum
        {
            /// <summary>
            ///     Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")] INDIVIDUAL = 1,

            /// <summary>
            ///     Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")] BUSINESS = 2
        }

        /// <summary>
        ///     Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
        /// </summary>
        /// <value>Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentChannelEnum
        {
            /// <summary>
            ///     Enum MFN for value: MFN
            /// </summary>
            [EnumMember(Value = "MFN")] MFN = 1,

            /// <summary>
            ///     Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")] AFN = 2
        }

        /// <summary>
        ///     The current order status.
        /// </summary>
        /// <value>The current order status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {
            /// <summary>
            ///     Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")] Pending = 1,

            /// <summary>
            ///     Enum Unshipped for value: Unshipped
            /// </summary>
            [EnumMember(Value = "Unshipped")] Unshipped = 2,

            /// <summary>
            ///     Enum PartiallyShipped for value: PartiallyShipped
            /// </summary>
            [EnumMember(Value = "PartiallyShipped")]
            PartiallyShipped = 3,

            /// <summary>
            ///     Enum Shipped for value: Shipped
            /// </summary>
            [EnumMember(Value = "Shipped")] Shipped = 4,

            /// <summary>
            ///     Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")] Canceled = 5,

            /// <summary>
            ///     Enum Unfulfillable for value: Unfulfillable
            /// </summary>
            [EnumMember(Value = "Unfulfillable")] Unfulfillable = 6,

            /// <summary>
            ///     Enum InvoiceUnconfirmed for value: InvoiceUnconfirmed
            /// </summary>
            [EnumMember(Value = "InvoiceUnconfirmed")]
            InvoiceUnconfirmed = 7,

            /// <summary>
            ///     Enum PendingAvailability for value: PendingAvailability
            /// </summary>
            [EnumMember(Value = "PendingAvailability")]
            PendingAvailability = 8
        }

        /// <summary>
        ///     The type of the order.
        /// </summary>
        /// <value>The type of the order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            /// <summary>
            ///     Enum StandardOrder for value: StandardOrder
            /// </summary>
            [EnumMember(Value = "StandardOrder")] StandardOrder = 1,

            /// <summary>
            ///     Enum LongLeadTimeOrder for value: LongLeadTimeOrder
            /// </summary>
            [EnumMember(Value = "LongLeadTimeOrder")]
            LongLeadTimeOrder = 2,

            /// <summary>
            ///     Enum Preorder for value: Preorder
            /// </summary>
            [EnumMember(Value = "Preorder")] Preorder = 3,

            /// <summary>
            ///     Enum BackOrder for value: BackOrder
            /// </summary>
            [EnumMember(Value = "BackOrder")] BackOrder = 4,

            /// <summary>
            ///     Enum SourcingOnDemandOrder for value: SourcingOnDemandOrder
            /// </summary>
            [EnumMember(Value = "SourcingOnDemandOrder")]
            SourcingOnDemandOrder = 5
        }

        /// <summary>
        ///     The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS)
        ///     payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem
        ///     object, we recommend using the PaymentMethodDetails property to get payment method information.
        /// </summary>
        /// <value>
        ///     The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS)
        ///     payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem
        ///     object, we recommend using the PaymentMethodDetails property to get payment method information.
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            /// <summary>
            ///     Enum COD for value: COD
            /// </summary>
            [EnumMember(Value = "COD")] COD = 1,

            /// <summary>
            ///     Enum CVS for value: CVS
            /// </summary>
            [EnumMember(Value = "CVS")] CVS = 2,

            /// <summary>
            ///     Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")] Other = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Order()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined order identifier, in 3-7-7 format. (required).</param>
        /// <param name="sellerOrderId">A seller-defined order identifier..</param>
        /// <param name="purchaseDate">The date when the order was created. (required).</param>
        /// <param name="lastUpdateDate">
        ///     The date when the order was last updated.  __Note__: LastUpdateDate is returned with an
        ///     incorrect date for orders that were last updated before 2009-04-01. (required).
        /// </param>
        /// <param name="orderStatus">The current order status. (required).</param>
        /// <param name="fulfillmentChannel">Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN)..</param>
        /// <param name="salesChannel">The sales channel of the first item in the order..</param>
        /// <param name="orderChannel">The order channel of the first item in the order..</param>
        /// <param name="shipServiceLevel">The shipment service level of the order..</param>
        /// <param name="orderTotal">The total charge for this order..</param>
        /// <param name="numberOfItemsShipped">The number of items shipped..</param>
        /// <param name="numberOfItemsUnshipped">The number of items unshipped..</param>
        /// <param name="paymentExecutionDetail">
        ///     Information about sub-payment methods for a Cash On Delivery (COD) order.
        ///     __Note__: For a COD order that is paid for using one sub-payment method, one PaymentExecutionDetailItem object is
        ///     returned, with PaymentExecutionDetailItem/PaymentMethod &#x3D; COD. For a COD order that is paid for using multiple
        ///     sub-payment methods, two or more PaymentExecutionDetailItem objects are returned..
        /// </param>
        /// <param name="paymentMethod">
        ///     The payment method for the order. This property is limited to Cash On Delivery (COD) and
        ///     Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the
        ///     PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method
        ///     information..
        /// </param>
        /// <param name="paymentMethodDetails">A list of payment methods for the order..</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the order was placed..</param>
        /// <param name="shipmentServiceLevelCategory">
        ///     The shipment service level category of the order.  Possible values:
        ///     Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard..
        /// </param>
        /// <param name="easyShipShipmentStatus">
        ///     The status of the Amazon Easy Ship order. This property is included only for
        ///     Amazon Easy Ship orders..
        /// </param>
        /// <param name="cbaDisplayableShippingLabel">Custom ship label for Checkout by Amazon (CBA)..</param>
        /// <param name="orderType">The type of the order..</param>
        /// <param name="earliestShipDate">
        ///     The start of the time period within which you have committed to ship the order. In ISO
        ///     8601 date time format. Returned only for seller-fulfilled orders.  __Note__: EarliestShipDate might not be returned
        ///     for orders placed before February 1, 2013..
        /// </param>
        /// <param name="latestShipDate">
        ///     The end of the time period within which you have committed to ship the order. In ISO 8601
        ///     date time format. Returned only for seller-fulfilled orders.  __Note__: LatestShipDate might not be returned for
        ///     orders placed before February 1, 2013..
        /// </param>
        /// <param name="earliestDeliveryDate">
        ///     The start of the time period within which you have committed to fulfill the order.
        ///     In ISO 8601 date time format. Returned only for seller-fulfilled orders..
        /// </param>
        /// <param name="latestDeliveryDate">
        ///     The end of the time period within which you have committed to fulfill the order. In
        ///     ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability,
        ///     Pending, or Canceled status..
        /// </param>
        /// <param name="isBusinessOrder">
        ///     When true, the order is an Amazon Business order. An Amazon Business order is an order
        ///     where the buyer is a Verified Business Buyer..
        /// </param>
        /// <param name="isPrime">When true, the order is a seller-fulfilled Amazon Prime order..</param>
        /// <param name="isPremiumOrder">
        ///     When true, the order has a Premium Shipping Service Level Agreement. For more information
        ///     about Premium Shipping orders, see \&quot;Premium Shipping Options\&quot; in the Seller Central Help for your
        ///     marketplace..
        /// </param>
        /// <param name="isGlobalExpressEnabled">When true, the order is a GlobalExpress order..</param>
        /// <param name="replacedOrderId">
        ///     The order ID value for the order that is being replaced. Returned only if
        ///     IsReplacementOrder &#x3D; true..
        /// </param>
        /// <param name="isReplacementOrder">When true, this is a replacement order..</param>
        /// <param name="promiseResponseDueDate">
        ///     Indicates the date by which the seller must respond to the buyer with an estimated
        ///     ship date. Returned only for Sourcing on Demand orders..
        /// </param>
        /// <param name="isEstimatedShipDateSet">
        ///     When true, the estimated ship date is set for the order. Returned only for
        ///     Sourcing on Demand orders..
        /// </param>
        /// <param name="isSoldByAB">
        ///     When true, the item within this order was bought and re-sold by Amazon Business EU SARL
        ///     (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory
        ///     available for sale to customers who would not otherwise purchase from a third-party seller..
        /// </param>
        /// <param name="isIBA">
        ///     When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By
        ///     buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for
        ///     sale to customers who would not otherwise purchase from a third-party seller..
        /// </param>
        /// <param name="defaultShipFromLocationAddress">
        ///     The recommended location for the seller to ship the items from. It is
        ///     calculated at checkout. The seller may or may not choose to ship from this location..
        /// </param>
        /// <param name="buyerInvoicePreference">The buyer&#39;s invoicing preference. Available only in the TR marketplace..</param>
        /// <param name="buyerTaxInformation">Contains the business invoice tax information..</param>
        /// <param name="fulfillmentInstruction">
        ///     Contains the instructions about the fulfillment like where should it be fulfilled
        ///     from..
        /// </param>
        /// <param name="isISPU">When true, this order is marked to be picked up from a store rather than delivered..</param>
        /// <param name="isAccessPointOrder">
        ///     When true, this order is marked to be delivered to an Access Point. The access
        ///     location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup
        ///     points operated by carriers..
        /// </param>
        /// <param name="marketplaceTaxInfo">Tax information about the marketplace..</param>
        /// <param name="sellerDisplayName">The seller’s friendly name registered in the marketplace..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="buyerInfo">buyerInfo.</param>
        /// <param name="automatedShippingSettings">
        ///     Contains information regarding the Shipping Settings Automaton program, such as
        ///     whether the order&#39;s shipping settings were generated automatically, and what those settings are..
        /// </param>
        /// <param name="hasRegulatedItems">
        ///     Whether the order contains regulated items which may require additional approval steps
        ///     before being fulfilled..
        /// </param>
        /// <param name="electronicInvoiceStatus">The status of the electronic invoice..</param>
        /// <param name="itemApprovalTypes">Set of approval types which applies to at least one order item in the order..</param>
        /// <param name="itemApprovalStatus">
        ///     Subset of all ItemApprovalStatus that are set in at least one of the order items
        ///     subject to approvals..
        /// </param>
        public Order(string amazonOrderId = default, string sellerOrderId = default, string purchaseDate = default,
            string lastUpdateDate = default, OrderStatusEnum orderStatus = default,
            FulfillmentChannelEnum? fulfillmentChannel = default, string salesChannel = default,
            string orderChannel = default, string shipServiceLevel = default, Money orderTotal = default,
            int? numberOfItemsShipped = default, int? numberOfItemsUnshipped = default,
            PaymentExecutionDetailItemList paymentExecutionDetail = default, PaymentMethodEnum? paymentMethod = default,
            PaymentMethodDetailItemList paymentMethodDetails = default, string marketplaceId = default,
            string shipmentServiceLevelCategory = default, EasyShipShipmentStatus? easyShipShipmentStatus = default,
            string cbaDisplayableShippingLabel = default, OrderTypeEnum? orderType = default,
            string earliestShipDate = default, string latestShipDate = default, string earliestDeliveryDate = default,
            string latestDeliveryDate = default, bool? isBusinessOrder = default, bool? isPrime = default,
            bool? isPremiumOrder = default, bool? isGlobalExpressEnabled = default, string replacedOrderId = default,
            bool? isReplacementOrder = default, string promiseResponseDueDate = default,
            bool? isEstimatedShipDateSet = default, bool? isSoldByAB = default, bool? isIBA = default,
            Address defaultShipFromLocationAddress = default,
            BuyerInvoicePreferenceEnum? buyerInvoicePreference = default,
            BuyerTaxInformation buyerTaxInformation = default, FulfillmentInstruction fulfillmentInstruction = default,
            bool? isISPU = default, bool? isAccessPointOrder = default, MarketplaceTaxInfo marketplaceTaxInfo = default,
            string sellerDisplayName = default, Address shippingAddress = default, BuyerInfo buyerInfo = default,
            AutomatedShippingSettings automatedShippingSettings = default, bool? hasRegulatedItems = default,
            ElectronicInvoiceStatus? electronicInvoiceStatus = default,
            List<ItemApprovalType> itemApprovalTypes = default, List<ItemApprovalStatus> itemApprovalStatus = default)
        {
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
                throw new InvalidDataException("amazonOrderId is a required property for Order and cannot be null");
            AmazonOrderId = amazonOrderId;
            // to ensure "purchaseDate" is required (not null)
            if (purchaseDate == null)
                throw new InvalidDataException("purchaseDate is a required property for Order and cannot be null");
            PurchaseDate = purchaseDate;
            // to ensure "lastUpdateDate" is required (not null)
            if (lastUpdateDate == null)
                throw new InvalidDataException("lastUpdateDate is a required property for Order and cannot be null");
            LastUpdateDate = lastUpdateDate;
            // to ensure "orderStatus" is required (not null)
            if (orderStatus == null)
                throw new InvalidDataException("orderStatus is a required property for Order and cannot be null");
            OrderStatus = orderStatus;
            SellerOrderId = sellerOrderId;
            FulfillmentChannel = fulfillmentChannel;
            SalesChannel = salesChannel;
            OrderChannel = orderChannel;
            ShipServiceLevel = shipServiceLevel;
            OrderTotal = orderTotal;
            NumberOfItemsShipped = numberOfItemsShipped;
            NumberOfItemsUnshipped = numberOfItemsUnshipped;
            PaymentExecutionDetail = paymentExecutionDetail;
            PaymentMethod = paymentMethod;
            PaymentMethodDetails = paymentMethodDetails;
            MarketplaceId = marketplaceId;
            ShipmentServiceLevelCategory = shipmentServiceLevelCategory;
            EasyShipShipmentStatus = easyShipShipmentStatus;
            CbaDisplayableShippingLabel = cbaDisplayableShippingLabel;
            OrderType = orderType;
            EarliestShipDate = earliestShipDate;
            LatestShipDate = latestShipDate;
            EarliestDeliveryDate = earliestDeliveryDate;
            LatestDeliveryDate = latestDeliveryDate;
            IsBusinessOrder = isBusinessOrder;
            IsPrime = isPrime;
            IsPremiumOrder = isPremiumOrder;
            IsGlobalExpressEnabled = isGlobalExpressEnabled;
            ReplacedOrderId = replacedOrderId;
            IsReplacementOrder = isReplacementOrder;
            PromiseResponseDueDate = promiseResponseDueDate;
            IsEstimatedShipDateSet = isEstimatedShipDateSet;
            IsSoldByAB = isSoldByAB;
            IsIBA = isIBA;
            DefaultShipFromLocationAddress = defaultShipFromLocationAddress;
            BuyerInvoicePreference = buyerInvoicePreference;
            BuyerTaxInformation = buyerTaxInformation;
            FulfillmentInstruction = fulfillmentInstruction;
            IsISPU = isISPU;
            IsAccessPointOrder = isAccessPointOrder;
            MarketplaceTaxInfo = marketplaceTaxInfo;
            SellerDisplayName = sellerDisplayName;
            ShippingAddress = shippingAddress;
            BuyerInfo = buyerInfo;
            AutomatedShippingSettings = automatedShippingSettings;
            HasRegulatedItems = hasRegulatedItems;
            ElectronicInvoiceStatus = electronicInvoiceStatus;
            ItemApprovalTypes = itemApprovalTypes;
            ItemApprovalStatus = itemApprovalStatus;
        }

        /// <summary>
        ///     The current order status.
        /// </summary>
        /// <value>The current order status.</value>
        [DataMember(Name = "OrderStatus", EmitDefaultValue = false)]
        public OrderStatusEnum OrderStatus { get; set; }

        /// <summary>
        ///     Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
        /// </summary>
        /// <value>Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).</value>
        [DataMember(Name = "FulfillmentChannel", EmitDefaultValue = false)]
        public FulfillmentChannelEnum? FulfillmentChannel { get; set; }

        /// <summary>
        ///     The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS)
        ///     payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem
        ///     object, we recommend using the PaymentMethodDetails property to get payment method information.
        /// </summary>
        /// <value>
        ///     The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS)
        ///     payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem
        ///     object, we recommend using the PaymentMethodDetails property to get payment method information.
        /// </value>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }

        /// <summary>
        ///     The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.
        /// </summary>
        /// <value>The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.</value>
        [DataMember(Name = "EasyShipShipmentStatus", EmitDefaultValue = false)]
        public EasyShipShipmentStatus? EasyShipShipmentStatus { get; set; }

        /// <summary>
        ///     The type of the order.
        /// </summary>
        /// <value>The type of the order.</value>
        [DataMember(Name = "OrderType", EmitDefaultValue = false)]
        public OrderTypeEnum? OrderType { get; set; }

        /// <summary>
        ///     The buyer&#39;s invoicing preference. Available only in the TR marketplace.
        /// </summary>
        /// <value>The buyer&#39;s invoicing preference. Available only in the TR marketplace.</value>
        [DataMember(Name = "BuyerInvoicePreference", EmitDefaultValue = false)]
        public BuyerInvoicePreferenceEnum? BuyerInvoicePreference { get; set; }

        /// <summary>
        ///     The status of the electronic invoice.
        /// </summary>
        /// <value>The status of the electronic invoice.</value>
        [DataMember(Name = "ElectronicInvoiceStatus", EmitDefaultValue = false)]
        public ElectronicInvoiceStatus? ElectronicInvoiceStatus { get; set; }

        /// <summary>
        ///     An Amazon-defined order identifier, in 3-7-7 format.
        /// </summary>
        /// <value>An Amazon-defined order identifier, in 3-7-7 format.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        ///     A seller-defined order identifier.
        /// </summary>
        /// <value>A seller-defined order identifier.</value>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public string SellerOrderId { get; set; }

        /// <summary>
        ///     The date when the order was created.
        /// </summary>
        /// <value>The date when the order was created.</value>
        [DataMember(Name = "PurchaseDate", EmitDefaultValue = false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        ///     The date when the order was last updated.  __Note__: LastUpdateDate is returned with an incorrect date for orders
        ///     that were last updated before 2009-04-01.
        /// </summary>
        /// <value>
        ///     The date when the order was last updated.  __Note__: LastUpdateDate is returned with an incorrect date for
        ///     orders that were last updated before 2009-04-01.
        /// </value>
        [DataMember(Name = "LastUpdateDate", EmitDefaultValue = false)]
        public string LastUpdateDate { get; set; }


        /// <summary>
        ///     The sales channel of the first item in the order.
        /// </summary>
        /// <value>The sales channel of the first item in the order.</value>
        [DataMember(Name = "SalesChannel", EmitDefaultValue = false)]
        public string SalesChannel { get; set; }

        /// <summary>
        ///     The order channel of the first item in the order.
        /// </summary>
        /// <value>The order channel of the first item in the order.</value>
        [DataMember(Name = "OrderChannel", EmitDefaultValue = false)]
        public string OrderChannel { get; set; }

        /// <summary>
        ///     The shipment service level of the order.
        /// </summary>
        /// <value>The shipment service level of the order.</value>
        [DataMember(Name = "ShipServiceLevel", EmitDefaultValue = false)]
        public string ShipServiceLevel { get; set; }

        /// <summary>
        ///     The total charge for this order.
        /// </summary>
        /// <value>The total charge for this order.</value>
        [DataMember(Name = "OrderTotal", EmitDefaultValue = false)]
        public Money OrderTotal { get; set; }

        /// <summary>
        ///     The number of items shipped.
        /// </summary>
        /// <value>The number of items shipped.</value>
        [DataMember(Name = "NumberOfItemsShipped", EmitDefaultValue = false)]
        public int? NumberOfItemsShipped { get; set; }

        /// <summary>
        ///     The number of items unshipped.
        /// </summary>
        /// <value>The number of items unshipped.</value>
        [DataMember(Name = "NumberOfItemsUnshipped", EmitDefaultValue = false)]
        public int? NumberOfItemsUnshipped { get; set; }

        /// <summary>
        ///     Information about sub-payment methods for a Cash On Delivery (COD) order.  __Note__: For a COD order that is paid
        ///     for using one sub-payment method, one PaymentExecutionDetailItem object is returned, with
        ///     PaymentExecutionDetailItem/PaymentMethod &#x3D; COD. For a COD order that is paid for using multiple sub-payment
        ///     methods, two or more PaymentExecutionDetailItem objects are returned.
        /// </summary>
        /// <value>
        ///     Information about sub-payment methods for a Cash On Delivery (COD) order.  __Note__: For a COD order that is
        ///     paid for using one sub-payment method, one PaymentExecutionDetailItem object is returned, with
        ///     PaymentExecutionDetailItem/PaymentMethod &#x3D; COD. For a COD order that is paid for using multiple sub-payment
        ///     methods, two or more PaymentExecutionDetailItem objects are returned.
        /// </value>
        [DataMember(Name = "PaymentExecutionDetail", EmitDefaultValue = false)]
        public PaymentExecutionDetailItemList PaymentExecutionDetail { get; set; }


        /// <summary>
        ///     A list of payment methods for the order.
        /// </summary>
        /// <value>A list of payment methods for the order.</value>
        [DataMember(Name = "PaymentMethodDetails", EmitDefaultValue = false)]
        public PaymentMethodDetailItemList PaymentMethodDetails { get; set; }

        /// <summary>
        ///     The identifier for the marketplace where the order was placed.
        /// </summary>
        /// <value>The identifier for the marketplace where the order was placed.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay,
        ///     SecondDay, Scheduled, Standard.
        /// </summary>
        /// <value>
        ///     The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay,
        ///     SecondDay, Scheduled, Standard.
        /// </value>
        [DataMember(Name = "ShipmentServiceLevelCategory", EmitDefaultValue = false)]
        public string ShipmentServiceLevelCategory { get; set; }


        /// <summary>
        ///     Custom ship label for Checkout by Amazon (CBA).
        /// </summary>
        /// <value>Custom ship label for Checkout by Amazon (CBA).</value>
        [DataMember(Name = "CbaDisplayableShippingLabel", EmitDefaultValue = false)]
        public string CbaDisplayableShippingLabel { get; set; }


        /// <summary>
        ///     The start of the time period within which you have committed to ship the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders.  __Note__: EarliestShipDate might not be returned for orders placed
        ///     before February 1, 2013.
        /// </summary>
        /// <value>
        ///     The start of the time period within which you have committed to ship the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders.  __Note__: EarliestShipDate might not be returned for orders placed
        ///     before February 1, 2013.
        /// </value>
        [DataMember(Name = "EarliestShipDate", EmitDefaultValue = false)]
        public string EarliestShipDate { get; set; }

        /// <summary>
        ///     The end of the time period within which you have committed to ship the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders.  __Note__: LatestShipDate might not be returned for orders placed before
        ///     February 1, 2013.
        /// </summary>
        /// <value>
        ///     The end of the time period within which you have committed to ship the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders.  __Note__: LatestShipDate might not be returned for orders placed before
        ///     February 1, 2013.
        /// </value>
        [DataMember(Name = "LatestShipDate", EmitDefaultValue = false)]
        public string LatestShipDate { get; set; }

        /// <summary>
        ///     The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders.
        /// </summary>
        /// <value>
        ///     The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders.
        /// </value>
        [DataMember(Name = "EarliestDeliveryDate", EmitDefaultValue = false)]
        public string EarliestDeliveryDate { get; set; }

        /// <summary>
        ///     The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
        /// </summary>
        /// <value>
        ///     The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format.
        ///     Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
        /// </value>
        [DataMember(Name = "LatestDeliveryDate", EmitDefaultValue = false)]
        public string LatestDeliveryDate { get; set; }

        /// <summary>
        ///     When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a
        ///     Verified Business Buyer.
        /// </summary>
        /// <value>
        ///     When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a
        ///     Verified Business Buyer.
        /// </value>
        [DataMember(Name = "IsBusinessOrder", EmitDefaultValue = false)]
        public bool? IsBusinessOrder { get; set; }

        /// <summary>
        ///     When true, the order is a seller-fulfilled Amazon Prime order.
        /// </summary>
        /// <value>When true, the order is a seller-fulfilled Amazon Prime order.</value>
        [DataMember(Name = "IsPrime", EmitDefaultValue = false)]
        public bool? IsPrime { get; set; }

        /// <summary>
        ///     When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping
        ///     orders, see \&quot;Premium Shipping Options\&quot; in the Seller Central Help for your marketplace.
        /// </summary>
        /// <value>
        ///     When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping
        ///     orders, see \&quot;Premium Shipping Options\&quot; in the Seller Central Help for your marketplace.
        /// </value>
        [DataMember(Name = "IsPremiumOrder", EmitDefaultValue = false)]
        public bool? IsPremiumOrder { get; set; }

        /// <summary>
        ///     When true, the order is a GlobalExpress order.
        /// </summary>
        /// <value>When true, the order is a GlobalExpress order.</value>
        [DataMember(Name = "IsGlobalExpressEnabled", EmitDefaultValue = false)]
        public bool? IsGlobalExpressEnabled { get; set; }

        /// <summary>
        ///     The order ID value for the order that is being replaced. Returned only if IsReplacementOrder &#x3D; true.
        /// </summary>
        /// <value>The order ID value for the order that is being replaced. Returned only if IsReplacementOrder &#x3D; true.</value>
        [DataMember(Name = "ReplacedOrderId", EmitDefaultValue = false)]
        public string ReplacedOrderId { get; set; }

        /// <summary>
        ///     When true, this is a replacement order.
        /// </summary>
        /// <value>When true, this is a replacement order.</value>
        [DataMember(Name = "IsReplacementOrder", EmitDefaultValue = false)]
        public bool? IsReplacementOrder { get; set; }

        /// <summary>
        ///     Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for
        ///     Sourcing on Demand orders.
        /// </summary>
        /// <value>
        ///     Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for
        ///     Sourcing on Demand orders.
        /// </value>
        [DataMember(Name = "PromiseResponseDueDate", EmitDefaultValue = false)]
        public string PromiseResponseDueDate { get; set; }

        /// <summary>
        ///     When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
        /// </summary>
        /// <value>When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.</value>
        [DataMember(Name = "IsEstimatedShipDateSet", EmitDefaultValue = false)]
        public bool? IsEstimatedShipDateSet { get; set; }

        /// <summary>
        ///     When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and
        ///     instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to
        ///     customers who would not otherwise purchase from a third-party seller.
        /// </summary>
        /// <value>
        ///     When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and
        ///     instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to
        ///     customers who would not otherwise purchase from a third-party seller.
        /// </value>
        [DataMember(Name = "IsSoldByAB", EmitDefaultValue = false)]
        public bool? IsSoldByAB { get; set; }

        /// <summary>
        ///     When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and
        ///     instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to
        ///     customers who would not otherwise purchase from a third-party seller.
        /// </summary>
        /// <value>
        ///     When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and
        ///     instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to
        ///     customers who would not otherwise purchase from a third-party seller.
        /// </value>
        [DataMember(Name = "IsIBA", EmitDefaultValue = false)]
        public bool? IsIBA { get; set; }

        /// <summary>
        ///     The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may
        ///     not choose to ship from this location.
        /// </summary>
        /// <value>
        ///     The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or
        ///     may not choose to ship from this location.
        /// </value>
        [DataMember(Name = "DefaultShipFromLocationAddress", EmitDefaultValue = false)]
        public Address DefaultShipFromLocationAddress { get; set; }


        /// <summary>
        ///     Contains the business invoice tax information.
        /// </summary>
        /// <value>Contains the business invoice tax information.</value>
        [DataMember(Name = "BuyerTaxInformation", EmitDefaultValue = false)]
        public BuyerTaxInformation BuyerTaxInformation { get; set; }

        /// <summary>
        ///     Contains the instructions about the fulfillment like where should it be fulfilled from.
        /// </summary>
        /// <value>Contains the instructions about the fulfillment like where should it be fulfilled from.</value>
        [DataMember(Name = "FulfillmentInstruction", EmitDefaultValue = false)]
        public FulfillmentInstruction FulfillmentInstruction { get; set; }

        /// <summary>
        ///     When true, this order is marked to be picked up from a store rather than delivered.
        /// </summary>
        /// <value>When true, this order is marked to be picked up from a store rather than delivered.</value>
        [DataMember(Name = "IsISPU", EmitDefaultValue = false)]
        public bool? IsISPU { get; set; }

        /// <summary>
        ///     When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer.
        ///     Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
        /// </summary>
        /// <value>
        ///     When true, this order is marked to be delivered to an Access Point. The access location is chosen by the
        ///     customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
        /// </value>
        [DataMember(Name = "IsAccessPointOrder", EmitDefaultValue = false)]
        public bool? IsAccessPointOrder { get; set; }

        /// <summary>
        ///     Tax information about the marketplace.
        /// </summary>
        /// <value>Tax information about the marketplace.</value>
        [DataMember(Name = "MarketplaceTaxInfo", EmitDefaultValue = false)]
        public MarketplaceTaxInfo MarketplaceTaxInfo { get; set; }

        /// <summary>
        ///     The seller’s friendly name registered in the marketplace.
        /// </summary>
        /// <value>The seller’s friendly name registered in the marketplace.</value>
        [DataMember(Name = "SellerDisplayName", EmitDefaultValue = false)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        ///     Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "ShippingAddress", EmitDefaultValue = false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        ///     Gets or Sets BuyerInfo
        /// </summary>
        [DataMember(Name = "BuyerInfo", EmitDefaultValue = false)]
        public BuyerInfo BuyerInfo { get; set; }

        /// <summary>
        ///     Contains information regarding the Shipping Settings Automaton program, such as whether the order&#39;s shipping
        ///     settings were generated automatically, and what those settings are.
        /// </summary>
        /// <value>
        ///     Contains information regarding the Shipping Settings Automaton program, such as whether the order&#39;s shipping
        ///     settings were generated automatically, and what those settings are.
        /// </value>
        [DataMember(Name = "AutomatedShippingSettings", EmitDefaultValue = false)]
        public AutomatedShippingSettings AutomatedShippingSettings { get; set; }

        /// <summary>
        ///     Whether the order contains regulated items which may require additional approval steps before being fulfilled.
        /// </summary>
        /// <value>Whether the order contains regulated items which may require additional approval steps before being fulfilled.</value>
        [DataMember(Name = "HasRegulatedItems", EmitDefaultValue = false)]
        public bool? HasRegulatedItems { get; set; }


        /// <summary>
        ///     Set of approval types which applies to at least one order item in the order.
        /// </summary>
        /// <value>Set of approval types which applies to at least one order item in the order.</value>
        [DataMember(Name = "ItemApprovalTypes", EmitDefaultValue = false)]
        public List<ItemApprovalType> ItemApprovalTypes { get; set; }

        /// <summary>
        ///     Subset of all ItemApprovalStatus that are set in at least one of the order items subject to approvals.
        /// </summary>
        /// <value>Subset of all ItemApprovalStatus that are set in at least one of the order items subject to approvals.</value>
        [DataMember(Name = "ItemApprovalStatus", EmitDefaultValue = false)]
        public List<ItemApprovalStatus> ItemApprovalStatus { get; set; }

        /// <summary>
        ///     Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return
                (
                    AmazonOrderId == input.AmazonOrderId ||
                    (AmazonOrderId != null &&
                     AmazonOrderId.Equals(input.AmazonOrderId))
                ) &&
                (
                    SellerOrderId == input.SellerOrderId ||
                    (SellerOrderId != null &&
                     SellerOrderId.Equals(input.SellerOrderId))
                ) &&
                (
                    PurchaseDate == input.PurchaseDate ||
                    (PurchaseDate != null &&
                     PurchaseDate.Equals(input.PurchaseDate))
                ) &&
                (
                    LastUpdateDate == input.LastUpdateDate ||
                    (LastUpdateDate != null &&
                     LastUpdateDate.Equals(input.LastUpdateDate))
                ) &&
                (
                    OrderStatus == input.OrderStatus ||
                    (OrderStatus != null &&
                     OrderStatus.Equals(input.OrderStatus))
                ) &&
                (
                    FulfillmentChannel == input.FulfillmentChannel ||
                    (FulfillmentChannel != null &&
                     FulfillmentChannel.Equals(input.FulfillmentChannel))
                ) &&
                (
                    SalesChannel == input.SalesChannel ||
                    (SalesChannel != null &&
                     SalesChannel.Equals(input.SalesChannel))
                ) &&
                (
                    OrderChannel == input.OrderChannel ||
                    (OrderChannel != null &&
                     OrderChannel.Equals(input.OrderChannel))
                ) &&
                (
                    ShipServiceLevel == input.ShipServiceLevel ||
                    (ShipServiceLevel != null &&
                     ShipServiceLevel.Equals(input.ShipServiceLevel))
                ) &&
                (
                    OrderTotal == input.OrderTotal ||
                    (OrderTotal != null &&
                     OrderTotal.Equals(input.OrderTotal))
                ) &&
                (
                    NumberOfItemsShipped == input.NumberOfItemsShipped ||
                    (NumberOfItemsShipped != null &&
                     NumberOfItemsShipped.Equals(input.NumberOfItemsShipped))
                ) &&
                (
                    NumberOfItemsUnshipped == input.NumberOfItemsUnshipped ||
                    (NumberOfItemsUnshipped != null &&
                     NumberOfItemsUnshipped.Equals(input.NumberOfItemsUnshipped))
                ) &&
                (
                    PaymentExecutionDetail == input.PaymentExecutionDetail ||
                    (PaymentExecutionDetail != null &&
                     PaymentExecutionDetail.Equals(input.PaymentExecutionDetail))
                ) &&
                (
                    PaymentMethod == input.PaymentMethod ||
                    (PaymentMethod != null &&
                     PaymentMethod.Equals(input.PaymentMethod))
                ) &&
                (
                    PaymentMethodDetails == input.PaymentMethodDetails ||
                    (PaymentMethodDetails != null &&
                     PaymentMethodDetails.Equals(input.PaymentMethodDetails))
                ) &&
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    ShipmentServiceLevelCategory == input.ShipmentServiceLevelCategory ||
                    (ShipmentServiceLevelCategory != null &&
                     ShipmentServiceLevelCategory.Equals(input.ShipmentServiceLevelCategory))
                ) &&
                (
                    EasyShipShipmentStatus == input.EasyShipShipmentStatus ||
                    (EasyShipShipmentStatus != null &&
                     EasyShipShipmentStatus.Equals(input.EasyShipShipmentStatus))
                ) &&
                (
                    CbaDisplayableShippingLabel == input.CbaDisplayableShippingLabel ||
                    (CbaDisplayableShippingLabel != null &&
                     CbaDisplayableShippingLabel.Equals(input.CbaDisplayableShippingLabel))
                ) &&
                (
                    OrderType == input.OrderType ||
                    (OrderType != null &&
                     OrderType.Equals(input.OrderType))
                ) &&
                (
                    EarliestShipDate == input.EarliestShipDate ||
                    (EarliestShipDate != null &&
                     EarliestShipDate.Equals(input.EarliestShipDate))
                ) &&
                (
                    LatestShipDate == input.LatestShipDate ||
                    (LatestShipDate != null &&
                     LatestShipDate.Equals(input.LatestShipDate))
                ) &&
                (
                    EarliestDeliveryDate == input.EarliestDeliveryDate ||
                    (EarliestDeliveryDate != null &&
                     EarliestDeliveryDate.Equals(input.EarliestDeliveryDate))
                ) &&
                (
                    LatestDeliveryDate == input.LatestDeliveryDate ||
                    (LatestDeliveryDate != null &&
                     LatestDeliveryDate.Equals(input.LatestDeliveryDate))
                ) &&
                (
                    IsBusinessOrder == input.IsBusinessOrder ||
                    (IsBusinessOrder != null &&
                     IsBusinessOrder.Equals(input.IsBusinessOrder))
                ) &&
                (
                    IsPrime == input.IsPrime ||
                    (IsPrime != null &&
                     IsPrime.Equals(input.IsPrime))
                ) &&
                (
                    IsPremiumOrder == input.IsPremiumOrder ||
                    (IsPremiumOrder != null &&
                     IsPremiumOrder.Equals(input.IsPremiumOrder))
                ) &&
                (
                    IsGlobalExpressEnabled == input.IsGlobalExpressEnabled ||
                    (IsGlobalExpressEnabled != null &&
                     IsGlobalExpressEnabled.Equals(input.IsGlobalExpressEnabled))
                ) &&
                (
                    ReplacedOrderId == input.ReplacedOrderId ||
                    (ReplacedOrderId != null &&
                     ReplacedOrderId.Equals(input.ReplacedOrderId))
                ) &&
                (
                    IsReplacementOrder == input.IsReplacementOrder ||
                    (IsReplacementOrder != null &&
                     IsReplacementOrder.Equals(input.IsReplacementOrder))
                ) &&
                (
                    PromiseResponseDueDate == input.PromiseResponseDueDate ||
                    (PromiseResponseDueDate != null &&
                     PromiseResponseDueDate.Equals(input.PromiseResponseDueDate))
                ) &&
                (
                    IsEstimatedShipDateSet == input.IsEstimatedShipDateSet ||
                    (IsEstimatedShipDateSet != null &&
                     IsEstimatedShipDateSet.Equals(input.IsEstimatedShipDateSet))
                ) &&
                (
                    IsSoldByAB == input.IsSoldByAB ||
                    (IsSoldByAB != null &&
                     IsSoldByAB.Equals(input.IsSoldByAB))
                ) &&
                (
                    IsIBA == input.IsIBA ||
                    (IsIBA != null &&
                     IsIBA.Equals(input.IsIBA))
                ) &&
                (
                    DefaultShipFromLocationAddress == input.DefaultShipFromLocationAddress ||
                    (DefaultShipFromLocationAddress != null &&
                     DefaultShipFromLocationAddress.Equals(input.DefaultShipFromLocationAddress))
                ) &&
                (
                    BuyerInvoicePreference == input.BuyerInvoicePreference ||
                    (BuyerInvoicePreference != null &&
                     BuyerInvoicePreference.Equals(input.BuyerInvoicePreference))
                ) &&
                (
                    BuyerTaxInformation == input.BuyerTaxInformation ||
                    (BuyerTaxInformation != null &&
                     BuyerTaxInformation.Equals(input.BuyerTaxInformation))
                ) &&
                (
                    FulfillmentInstruction == input.FulfillmentInstruction ||
                    (FulfillmentInstruction != null &&
                     FulfillmentInstruction.Equals(input.FulfillmentInstruction))
                ) &&
                (
                    IsISPU == input.IsISPU ||
                    (IsISPU != null &&
                     IsISPU.Equals(input.IsISPU))
                ) &&
                (
                    IsAccessPointOrder == input.IsAccessPointOrder ||
                    (IsAccessPointOrder != null &&
                     IsAccessPointOrder.Equals(input.IsAccessPointOrder))
                ) &&
                (
                    MarketplaceTaxInfo == input.MarketplaceTaxInfo ||
                    (MarketplaceTaxInfo != null &&
                     MarketplaceTaxInfo.Equals(input.MarketplaceTaxInfo))
                ) &&
                (
                    SellerDisplayName == input.SellerDisplayName ||
                    (SellerDisplayName != null &&
                     SellerDisplayName.Equals(input.SellerDisplayName))
                ) &&
                (
                    ShippingAddress == input.ShippingAddress ||
                    (ShippingAddress != null &&
                     ShippingAddress.Equals(input.ShippingAddress))
                ) &&
                (
                    BuyerInfo == input.BuyerInfo ||
                    (BuyerInfo != null &&
                     BuyerInfo.Equals(input.BuyerInfo))
                ) &&
                (
                    AutomatedShippingSettings == input.AutomatedShippingSettings ||
                    (AutomatedShippingSettings != null &&
                     AutomatedShippingSettings.Equals(input.AutomatedShippingSettings))
                ) &&
                (
                    HasRegulatedItems == input.HasRegulatedItems ||
                    (HasRegulatedItems != null &&
                     HasRegulatedItems.Equals(input.HasRegulatedItems))
                ) &&
                (
                    ElectronicInvoiceStatus == input.ElectronicInvoiceStatus ||
                    (ElectronicInvoiceStatus != null &&
                     ElectronicInvoiceStatus.Equals(input.ElectronicInvoiceStatus))
                ) &&
                (
                    ItemApprovalTypes == input.ItemApprovalTypes ||
                    ItemApprovalTypes != null
                ) &&
                (
                    ItemApprovalStatus == input.ItemApprovalStatus ||
                    ItemApprovalStatus != null
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  SalesChannel: ").Append(SalesChannel).Append("\n");
            sb.Append("  OrderChannel: ").Append(OrderChannel).Append("\n");
            sb.Append("  ShipServiceLevel: ").Append(ShipServiceLevel).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  NumberOfItemsShipped: ").Append(NumberOfItemsShipped).Append("\n");
            sb.Append("  NumberOfItemsUnshipped: ").Append(NumberOfItemsUnshipped).Append("\n");
            sb.Append("  PaymentExecutionDetail: ").Append(PaymentExecutionDetail).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentMethodDetails: ").Append(PaymentMethodDetails).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  ShipmentServiceLevelCategory: ").Append(ShipmentServiceLevelCategory).Append("\n");
            sb.Append("  EasyShipShipmentStatus: ").Append(EasyShipShipmentStatus).Append("\n");
            sb.Append("  CbaDisplayableShippingLabel: ").Append(CbaDisplayableShippingLabel).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  EarliestShipDate: ").Append(EarliestShipDate).Append("\n");
            sb.Append("  LatestShipDate: ").Append(LatestShipDate).Append("\n");
            sb.Append("  EarliestDeliveryDate: ").Append(EarliestDeliveryDate).Append("\n");
            sb.Append("  LatestDeliveryDate: ").Append(LatestDeliveryDate).Append("\n");
            sb.Append("  IsBusinessOrder: ").Append(IsBusinessOrder).Append("\n");
            sb.Append("  IsPrime: ").Append(IsPrime).Append("\n");
            sb.Append("  IsPremiumOrder: ").Append(IsPremiumOrder).Append("\n");
            sb.Append("  IsGlobalExpressEnabled: ").Append(IsGlobalExpressEnabled).Append("\n");
            sb.Append("  ReplacedOrderId: ").Append(ReplacedOrderId).Append("\n");
            sb.Append("  IsReplacementOrder: ").Append(IsReplacementOrder).Append("\n");
            sb.Append("  PromiseResponseDueDate: ").Append(PromiseResponseDueDate).Append("\n");
            sb.Append("  IsEstimatedShipDateSet: ").Append(IsEstimatedShipDateSet).Append("\n");
            sb.Append("  IsSoldByAB: ").Append(IsSoldByAB).Append("\n");
            sb.Append("  IsIBA: ").Append(IsIBA).Append("\n");
            sb.Append("  DefaultShipFromLocationAddress: ").Append(DefaultShipFromLocationAddress).Append("\n");
            sb.Append("  BuyerInvoicePreference: ").Append(BuyerInvoicePreference).Append("\n");
            sb.Append("  BuyerTaxInformation: ").Append(BuyerTaxInformation).Append("\n");
            sb.Append("  FulfillmentInstruction: ").Append(FulfillmentInstruction).Append("\n");
            sb.Append("  IsISPU: ").Append(IsISPU).Append("\n");
            sb.Append("  IsAccessPointOrder: ").Append(IsAccessPointOrder).Append("\n");
            sb.Append("  MarketplaceTaxInfo: ").Append(MarketplaceTaxInfo).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  BuyerInfo: ").Append(BuyerInfo).Append("\n");
            sb.Append("  AutomatedShippingSettings: ").Append(AutomatedShippingSettings).Append("\n");
            sb.Append("  HasRegulatedItems: ").Append(HasRegulatedItems).Append("\n");
            sb.Append("  ElectronicInvoiceStatus: ").Append(ElectronicInvoiceStatus).Append("\n");
            sb.Append("  ItemApprovalTypes: ").Append(ItemApprovalTypes).Append("\n");
            sb.Append("  ItemApprovalStatus: ").Append(ItemApprovalStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Order);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (AmazonOrderId != null)
                    hashCode = hashCode * 59 + AmazonOrderId.GetHashCode();
                if (SellerOrderId != null)
                    hashCode = hashCode * 59 + SellerOrderId.GetHashCode();
                if (PurchaseDate != null)
                    hashCode = hashCode * 59 + PurchaseDate.GetHashCode();
                if (LastUpdateDate != null)
                    hashCode = hashCode * 59 + LastUpdateDate.GetHashCode();
                if (OrderStatus != null)
                    hashCode = hashCode * 59 + OrderStatus.GetHashCode();
                if (FulfillmentChannel != null)
                    hashCode = hashCode * 59 + FulfillmentChannel.GetHashCode();
                if (SalesChannel != null)
                    hashCode = hashCode * 59 + SalesChannel.GetHashCode();
                if (OrderChannel != null)
                    hashCode = hashCode * 59 + OrderChannel.GetHashCode();
                if (ShipServiceLevel != null)
                    hashCode = hashCode * 59 + ShipServiceLevel.GetHashCode();
                if (OrderTotal != null)
                    hashCode = hashCode * 59 + OrderTotal.GetHashCode();
                if (NumberOfItemsShipped != null)
                    hashCode = hashCode * 59 + NumberOfItemsShipped.GetHashCode();
                if (NumberOfItemsUnshipped != null)
                    hashCode = hashCode * 59 + NumberOfItemsUnshipped.GetHashCode();
                if (PaymentExecutionDetail != null)
                    hashCode = hashCode * 59 + PaymentExecutionDetail.GetHashCode();
                if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                if (PaymentMethodDetails != null)
                    hashCode = hashCode * 59 + PaymentMethodDetails.GetHashCode();
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (ShipmentServiceLevelCategory != null)
                    hashCode = hashCode * 59 + ShipmentServiceLevelCategory.GetHashCode();
                if (EasyShipShipmentStatus != null)
                    hashCode = hashCode * 59 + EasyShipShipmentStatus.GetHashCode();
                if (CbaDisplayableShippingLabel != null)
                    hashCode = hashCode * 59 + CbaDisplayableShippingLabel.GetHashCode();
                if (OrderType != null)
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                if (EarliestShipDate != null)
                    hashCode = hashCode * 59 + EarliestShipDate.GetHashCode();
                if (LatestShipDate != null)
                    hashCode = hashCode * 59 + LatestShipDate.GetHashCode();
                if (EarliestDeliveryDate != null)
                    hashCode = hashCode * 59 + EarliestDeliveryDate.GetHashCode();
                if (LatestDeliveryDate != null)
                    hashCode = hashCode * 59 + LatestDeliveryDate.GetHashCode();
                if (IsBusinessOrder != null)
                    hashCode = hashCode * 59 + IsBusinessOrder.GetHashCode();
                if (IsPrime != null)
                    hashCode = hashCode * 59 + IsPrime.GetHashCode();
                if (IsPremiumOrder != null)
                    hashCode = hashCode * 59 + IsPremiumOrder.GetHashCode();
                if (IsGlobalExpressEnabled != null)
                    hashCode = hashCode * 59 + IsGlobalExpressEnabled.GetHashCode();
                if (ReplacedOrderId != null)
                    hashCode = hashCode * 59 + ReplacedOrderId.GetHashCode();
                if (IsReplacementOrder != null)
                    hashCode = hashCode * 59 + IsReplacementOrder.GetHashCode();
                if (PromiseResponseDueDate != null)
                    hashCode = hashCode * 59 + PromiseResponseDueDate.GetHashCode();
                if (IsEstimatedShipDateSet != null)
                    hashCode = hashCode * 59 + IsEstimatedShipDateSet.GetHashCode();
                if (IsSoldByAB != null)
                    hashCode = hashCode * 59 + IsSoldByAB.GetHashCode();
                if (IsIBA != null)
                    hashCode = hashCode * 59 + IsIBA.GetHashCode();
                if (DefaultShipFromLocationAddress != null)
                    hashCode = hashCode * 59 + DefaultShipFromLocationAddress.GetHashCode();
                if (BuyerInvoicePreference != null)
                    hashCode = hashCode * 59 + BuyerInvoicePreference.GetHashCode();
                if (BuyerTaxInformation != null)
                    hashCode = hashCode * 59 + BuyerTaxInformation.GetHashCode();
                if (FulfillmentInstruction != null)
                    hashCode = hashCode * 59 + FulfillmentInstruction.GetHashCode();
                if (IsISPU != null)
                    hashCode = hashCode * 59 + IsISPU.GetHashCode();
                if (IsAccessPointOrder != null)
                    hashCode = hashCode * 59 + IsAccessPointOrder.GetHashCode();
                if (MarketplaceTaxInfo != null)
                    hashCode = hashCode * 59 + MarketplaceTaxInfo.GetHashCode();
                if (SellerDisplayName != null)
                    hashCode = hashCode * 59 + SellerDisplayName.GetHashCode();
                if (ShippingAddress != null)
                    hashCode = hashCode * 59 + ShippingAddress.GetHashCode();
                if (BuyerInfo != null)
                    hashCode = hashCode * 59 + BuyerInfo.GetHashCode();
                if (AutomatedShippingSettings != null)
                    hashCode = hashCode * 59 + AutomatedShippingSettings.GetHashCode();
                if (HasRegulatedItems != null)
                    hashCode = hashCode * 59 + HasRegulatedItems.GetHashCode();
                if (ElectronicInvoiceStatus != null)
                    hashCode = hashCode * 59 + ElectronicInvoiceStatus.GetHashCode();
                if (ItemApprovalTypes != null)
                    hashCode = hashCode * 59 + ItemApprovalTypes.GetHashCode();
                if (ItemApprovalStatus != null)
                    hashCode = hashCode * 59 + ItemApprovalStatus.GetHashCode();
                return hashCode;
            }
        }
    }
}