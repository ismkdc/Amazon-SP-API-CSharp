/*
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Orders
{
    /// <summary>
    ///     Information about a sub-payment method used to pay for a COD order.
    /// </summary>
    [DataContract]
    public class PaymentExecutionDetailItem : IEquatable<PaymentExecutionDetailItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PaymentExecutionDetailItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PaymentExecutionDetailItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PaymentExecutionDetailItem" /> class.
        /// </summary>
        /// <param name="payment">payment (required).</param>
        /// <param name="paymentMethod">
        ///     A sub-payment method for a COD order.  Possible values:  * COD - Cash On Delivery.  * GC -
        ///     Gift Card.  * PointsAccount - Amazon Points. (required).
        /// </param>
        public PaymentExecutionDetailItem(Money payment = default, string paymentMethod = default)
        {
            // to ensure "payment" is required (not null)
            if (payment == null)
                throw new InvalidDataException(
                    "payment is a required property for PaymentExecutionDetailItem and cannot be null");
            Payment = payment;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
                throw new InvalidDataException(
                    "paymentMethod is a required property for PaymentExecutionDetailItem and cannot be null");
            PaymentMethod = paymentMethod;
        }

        /// <summary>
        ///     Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "Payment", EmitDefaultValue = false)]
        public Money Payment { get; set; }

        /// <summary>
        ///     A sub-payment method for a COD order.  Possible values:  * COD - Cash On Delivery.  * GC - Gift Card.  *
        ///     PointsAccount - Amazon Points.
        /// </summary>
        /// <value>
        ///     A sub-payment method for a COD order.  Possible values:  * COD - Cash On Delivery.  * GC - Gift Card.  *
        ///     PointsAccount - Amazon Points.
        /// </value>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        ///     Returns true if PaymentExecutionDetailItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentExecutionDetailItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentExecutionDetailItem input)
        {
            if (input == null)
                return false;

            return
                (
                    Payment == input.Payment ||
                    (Payment != null &&
                     Payment.Equals(input.Payment))
                ) &&
                (
                    PaymentMethod == input.PaymentMethod ||
                    (PaymentMethod != null &&
                     PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentExecutionDetailItem {\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PaymentExecutionDetailItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Payment != null)
                    hashCode = hashCode * 59 + Payment.GetHashCode();
                if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                return hashCode;
            }
        }
    }
}