/*
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Orders
{
    /// <summary>
    ///     A list of orders along with additional information to make subsequent API calls.
    /// </summary>
    [DataContract]
    public class OrdersList : IEquatable<OrdersList>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="OrdersList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OrdersList()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrdersList" /> class.
        /// </summary>
        /// <param name="orders">orders (required).</param>
        /// <param name="nextToken">
        ///     When present and not empty, pass this string token in the next request to return the next
        ///     response page..
        /// </param>
        /// <param name="lastUpdatedBefore">
        ///     A date used for selecting orders that were last updated before (or at) a specified
        ///     time. An update is defined as any change in order status, including the creation of a new order. Includes updates
        ///     made by Amazon and by the seller. All dates must be in ISO 8601 format..
        /// </param>
        /// <param name="createdBefore">
        ///     A date used for selecting orders created before (or at) a specified time. Only orders
        ///     placed before the specified time are returned. The date must be in ISO 8601 format..
        /// </param>
        public OrdersList(OrderList orders = default, string nextToken = default, string lastUpdatedBefore = default,
            string createdBefore = default)
        {
            // to ensure "orders" is required (not null)
            if (orders == null)
                throw new InvalidDataException("orders is a required property for OrdersList and cannot be null");
            Orders = orders;
            NextToken = nextToken;
            LastUpdatedBefore = lastUpdatedBefore;
            CreatedBefore = createdBefore;
        }

        /// <summary>
        ///     Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "Orders", EmitDefaultValue = false)]
        public OrderList Orders { get; set; }

        /// <summary>
        ///     When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        /// <value>When present and not empty, pass this string token in the next request to return the next response page.</value>
        [DataMember(Name = "NextToken", EmitDefaultValue = false)]
        public string NextToken { get; set; }

        /// <summary>
        ///     A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as
        ///     any change in order status, including the creation of a new order. Includes updates made by Amazon and by the
        ///     seller. All dates must be in ISO 8601 format.
        /// </summary>
        /// <value>
        ///     A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as
        ///     any change in order status, including the creation of a new order. Includes updates made by Amazon and by the
        ///     seller. All dates must be in ISO 8601 format.
        /// </value>
        [DataMember(Name = "LastUpdatedBefore", EmitDefaultValue = false)]
        public string LastUpdatedBefore { get; set; }

        /// <summary>
        ///     A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified
        ///     time are returned. The date must be in ISO 8601 format.
        /// </summary>
        /// <value>
        ///     A date used for selecting orders created before (or at) a specified time. Only orders placed before the
        ///     specified time are returned. The date must be in ISO 8601 format.
        /// </value>
        [DataMember(Name = "CreatedBefore", EmitDefaultValue = false)]
        public string CreatedBefore { get; set; }

        /// <summary>
        ///     Returns true if OrdersList instances are equal
        /// </summary>
        /// <param name="input">Instance of OrdersList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersList input)
        {
            if (input == null)
                return false;

            return
                (
                    Orders == input.Orders ||
                    (Orders != null &&
                     Orders.Equals(input.Orders))
                ) &&
                (
                    NextToken == input.NextToken ||
                    (NextToken != null &&
                     NextToken.Equals(input.NextToken))
                ) &&
                (
                    LastUpdatedBefore == input.LastUpdatedBefore ||
                    (LastUpdatedBefore != null &&
                     LastUpdatedBefore.Equals(input.LastUpdatedBefore))
                ) &&
                (
                    CreatedBefore == input.CreatedBefore ||
                    (CreatedBefore != null &&
                     CreatedBefore.Equals(input.CreatedBefore))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersList {\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("  LastUpdatedBefore: ").Append(LastUpdatedBefore).Append("\n");
            sb.Append("  CreatedBefore: ").Append(CreatedBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OrdersList);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Orders != null)
                    hashCode = hashCode * 59 + Orders.GetHashCode();
                if (NextToken != null)
                    hashCode = hashCode * 59 + NextToken.GetHashCode();
                if (LastUpdatedBefore != null)
                    hashCode = hashCode * 59 + LastUpdatedBefore.GetHashCode();
                if (CreatedBefore != null)
                    hashCode = hashCode * 59 + CreatedBefore.GetHashCode();
                return hashCode;
            }
        }
    }
}