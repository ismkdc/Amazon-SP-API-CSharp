/*
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Orders
{
    /// <summary>
    ///     A single order item.
    /// </summary>
    [DataContract]
    public class OrderItem : IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        ///     The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help
        ///     them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// </summary>
        /// <value>
        ///     The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to
        ///     help them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeemedResellerCategoryEnum
        {
            /// <summary>
            ///     Enum IOSS for value: IOSS
            /// </summary>
            [EnumMember(Value = "IOSS")] IOSS = 1,

            /// <summary>
            ///     Enum UOSS for value: UOSS
            /// </summary>
            [EnumMember(Value = "UOSS")] UOSS = 2,

            /// <summary>
            ///     Enum NO_VOEC for value: NO_VOEC
            /// </summary>
            [EnumMember(Value = "NO_VOEC")] NO_VOEC = 3,

            /// <summary>
            ///     Enum GB_VOEC for value: GB_VOEC
            /// </summary>
            [EnumMember(Value = "GB_VOEC")] GB_VOEC = 4,

            /// <summary>
            ///     Enum CA_MPF for value: CA_MPF
            /// </summary>
            [EnumMember(Value = "CA_MPF")] CA_MPF = 5,

            /// <summary>
            ///     Enum AU_VOEC for value: AU_VOEC
            /// </summary>
            [EnumMember(Value = "AU_VOEC")] AU_VOEC = 6,

            /// <summary>
            ///     Enum SG_VOEC for value: SG_VOEC
            /// </summary>
            [EnumMember(Value = "SG_VOEC")] SG_VOEC = 7,

            /// <summary>
            ///     Enum NZ_VOEC for value: NZ_VOEC
            /// </summary>
            [EnumMember(Value = "NZ_VOEC")] NZ_VOEC = 8,

            /// <summary>
            ///     Enum JE_VOEC for value: JE_VOEC
            /// </summary>
            [EnumMember(Value = "JE_VOEC")] JE_VOEC = 9,

            /// <summary>
            ///     Enum JE_VOEC for value: JE_VOEC
            /// </summary>
            [EnumMember(Value = "NG_VOEC")] NG_VOEC = 10,

            /// <summary>
            ///     Enum MY_VOEC for value: MY_VOEC
            /// </summary>
            [EnumMember(Value = "MY_VOEC")] MY_VOEC = 11
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item. (required).</param>
        /// <param name="sellerSKU">The seller stock keeping unit (SKU) of the item..</param>
        /// <param name="orderItemId">An Amazon-defined order item identifier. (required).</param>
        /// <param name="title">The name of the item..</param>
        /// <param name="quantityOrdered">The number of items in the order.  (required).</param>
        /// <param name="quantityShipped">The number of items shipped..</param>
        /// <param name="productInfo">Product information for the item..</param>
        /// <param name="pointsGranted">The number and value of Amazon Points granted with the purchase of an item..</param>
        /// <param name="itemPrice">
        ///     The selling price of the order item. Note that an order item is an item and a quantity. This
        ///     means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered.
        ///     Note that ItemPrice excludes ShippingPrice and GiftWrapPrice..
        /// </param>
        /// <param name="shippingPrice">The shipping price of the item..</param>
        /// <param name="itemTax">The tax on the item price..</param>
        /// <param name="shippingTax">The tax on the shipping price..</param>
        /// <param name="shippingDiscount">The discount on the shipping price..</param>
        /// <param name="shippingDiscountTax">The tax on the discount on the shipping price..</param>
        /// <param name="promotionDiscount">The total of all promotional discounts in the offer..</param>
        /// <param name="promotionDiscountTax">The tax on the total of all promotional discounts in the offer..</param>
        /// <param name="promotionIds">promotionIds.</param>
        /// <param name="cODFee">The fee charged for COD service..</param>
        /// <param name="cODFeeDiscount">The discount on the COD fee..</param>
        /// <param name="isGift">When true, the item is a gift..</param>
        /// <param name="conditionNote">The condition of the item as described by the seller..</param>
        /// <param name="conditionId">
        ///     The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder,
        ///     Club..
        /// </param>
        /// <param name="conditionSubtypeId">
        ///     The subcondition of the item.  Possible values: New, Mint, Very Good, Good,
        ///     Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other..
        /// </param>
        /// <param name="scheduledDeliveryStartDate">
        ///     The start date of the scheduled delivery window in the time zone of the order
        ///     destination. In ISO 8601 date time format..
        /// </param>
        /// <param name="scheduledDeliveryEndDate">
        ///     The end date of the scheduled delivery window in the time zone of the order
        ///     destination. In ISO 8601 date time format..
        /// </param>
        /// <param name="priceDesignation">
        ///     Indicates that the selling price is a special price that is available only for Amazon
        ///     Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business
        ///     website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that
        ///     is available only for Amazon Business orders..
        /// </param>
        /// <param name="taxCollection">Information about withheld taxes..</param>
        /// <param name="serialNumberRequired">
        ///     When true, the product type for this item has a serial number.  Returned only for
        ///     Amazon Easy Ship orders..
        /// </param>
        /// <param name="isTransparency">When true, transparency codes are required..</param>
        /// <param name="iossNumber">
        ///     The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside
        ///     of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale..
        /// </param>
        /// <param name="storeChainStoreId">The store chain store identifier. Linked to a specific store in a store chain..</param>
        /// <param name="deemedResellerCategory">
        ///     The category of deemed reseller. This applies to selling partners that are not
        ///     based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK..
        /// </param>
        /// <param name="buyerInfo">buyerInfo.</param>
        /// <param name="buyerRequestedCancel">Information about whether or not a buyer requested cancellation..</param>
        /// <param name="itemApprovalContext">
        ///     Item approval context containing the information regarding the status and progress of
        ///     the item approval..
        /// </param>
        /// <param name="serialNumbers">
        ///     A list of serial numbers for electronic products that are shipped to customers. Returned
        ///     for FBA orders only..
        /// </param>
        public OrderItem(string aSIN = default, string sellerSKU = default, string orderItemId = default,
            string title = default, int? quantityOrdered = default, int? quantityShipped = default,
            ProductInfoDetail productInfo = default, PointsGrantedDetail pointsGranted = default,
            Money itemPrice = default, Money shippingPrice = default, Money itemTax = default,
            Money shippingTax = default, Money shippingDiscount = default, Money shippingDiscountTax = default,
            Money promotionDiscount = default, Money promotionDiscountTax = default,
            PromotionIdList promotionIds = default, Money cODFee = default, Money cODFeeDiscount = default,
            bool? isGift = default, string conditionNote = default, string conditionId = default,
            string conditionSubtypeId = default, string scheduledDeliveryStartDate = default,
            string scheduledDeliveryEndDate = default, string priceDesignation = default,
            TaxCollection taxCollection = default, bool? serialNumberRequired = default, bool? isTransparency = default,
            string iossNumber = default, string storeChainStoreId = default,
            DeemedResellerCategoryEnum? deemedResellerCategory = default, ItemBuyerInfo buyerInfo = default,
            BuyerRequestedCancel buyerRequestedCancel = default, ItemApprovalContext itemApprovalContext = default,
            List<string> serialNumbers = default)
        {
            // to ensure "aSIN" is required (not null)
            if (aSIN == null)
                throw new InvalidDataException("aSIN is a required property for OrderItem and cannot be null");
            ASIN = aSIN;
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
                throw new InvalidDataException("orderItemId is a required property for OrderItem and cannot be null");
            OrderItemId = orderItemId;
            // to ensure "quantityOrdered" is required (not null)
            if (quantityOrdered == null)
                throw new InvalidDataException(
                    "quantityOrdered is a required property for OrderItem and cannot be null");
            QuantityOrdered = quantityOrdered;
            SellerSKU = sellerSKU;
            Title = title;
            QuantityShipped = quantityShipped;
            ProductInfo = productInfo;
            PointsGranted = pointsGranted;
            ItemPrice = itemPrice;
            ShippingPrice = shippingPrice;
            ItemTax = itemTax;
            ShippingTax = shippingTax;
            ShippingDiscount = shippingDiscount;
            ShippingDiscountTax = shippingDiscountTax;
            PromotionDiscount = promotionDiscount;
            PromotionDiscountTax = promotionDiscountTax;
            PromotionIds = promotionIds;
            CODFee = cODFee;
            CODFeeDiscount = cODFeeDiscount;
            IsGift = isGift;
            ConditionNote = conditionNote;
            ConditionId = conditionId;
            ConditionSubtypeId = conditionSubtypeId;
            ScheduledDeliveryStartDate = scheduledDeliveryStartDate;
            ScheduledDeliveryEndDate = scheduledDeliveryEndDate;
            PriceDesignation = priceDesignation;
            TaxCollection = taxCollection;
            SerialNumberRequired = serialNumberRequired;
            IsTransparency = isTransparency;
            IossNumber = iossNumber;
            StoreChainStoreId = storeChainStoreId;
            DeemedResellerCategory = deemedResellerCategory;
            BuyerInfo = buyerInfo;
            BuyerRequestedCancel = buyerRequestedCancel;
            ItemApprovalContext = itemApprovalContext;
            SerialNumbers = serialNumbers;
        }

        /// <summary>
        ///     The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help
        ///     them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// </summary>
        /// <value>
        ///     The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to
        ///     help them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// </value>
        [DataMember(Name = "DeemedResellerCategory", EmitDefaultValue = false)]
        public DeemedResellerCategoryEnum? DeemedResellerCategory { get; set; }

        /// <summary>
        ///     The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        ///     The seller stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>The seller stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        ///     An Amazon-defined order item identifier.
        /// </summary>
        /// <value>An Amazon-defined order item identifier.</value>
        [DataMember(Name = "OrderItemId", EmitDefaultValue = false)]
        public string OrderItemId { get; set; }

        /// <summary>
        ///     The name of the item.
        /// </summary>
        /// <value>The name of the item.</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        ///     The number of items in the order.
        /// </summary>
        /// <value>The number of items in the order. </value>
        [DataMember(Name = "QuantityOrdered", EmitDefaultValue = false)]
        public int? QuantityOrdered { get; set; }

        /// <summary>
        ///     The number of items shipped.
        /// </summary>
        /// <value>The number of items shipped.</value>
        [DataMember(Name = "QuantityShipped", EmitDefaultValue = false)]
        public int? QuantityShipped { get; set; }

        /// <summary>
        ///     Product information for the item.
        /// </summary>
        /// <value>Product information for the item.</value>
        [DataMember(Name = "ProductInfo", EmitDefaultValue = false)]
        public ProductInfoDetail ProductInfo { get; set; }

        /// <summary>
        ///     The number and value of Amazon Points granted with the purchase of an item.
        /// </summary>
        /// <value>The number and value of Amazon Points granted with the purchase of an item.</value>
        [DataMember(Name = "PointsGranted", EmitDefaultValue = false)]
        public PointsGrantedDetail PointsGranted { get; set; }

        /// <summary>
        ///     The selling price of the order item. Note that an order item is an item and a quantity. This means that the value
        ///     of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. Note that ItemPrice
        ///     excludes ShippingPrice and GiftWrapPrice.
        /// </summary>
        /// <value>
        ///     The selling price of the order item. Note that an order item is an item and a quantity. This means that the
        ///     value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. Note that
        ///     ItemPrice excludes ShippingPrice and GiftWrapPrice.
        /// </value>
        [DataMember(Name = "ItemPrice", EmitDefaultValue = false)]
        public Money ItemPrice { get; set; }

        /// <summary>
        ///     The shipping price of the item.
        /// </summary>
        /// <value>The shipping price of the item.</value>
        [DataMember(Name = "ShippingPrice", EmitDefaultValue = false)]
        public Money ShippingPrice { get; set; }

        /// <summary>
        ///     The tax on the item price.
        /// </summary>
        /// <value>The tax on the item price.</value>
        [DataMember(Name = "ItemTax", EmitDefaultValue = false)]
        public Money ItemTax { get; set; }

        /// <summary>
        ///     The tax on the shipping price.
        /// </summary>
        /// <value>The tax on the shipping price.</value>
        [DataMember(Name = "ShippingTax", EmitDefaultValue = false)]
        public Money ShippingTax { get; set; }

        /// <summary>
        ///     The discount on the shipping price.
        /// </summary>
        /// <value>The discount on the shipping price.</value>
        [DataMember(Name = "ShippingDiscount", EmitDefaultValue = false)]
        public Money ShippingDiscount { get; set; }

        /// <summary>
        ///     The tax on the discount on the shipping price.
        /// </summary>
        /// <value>The tax on the discount on the shipping price.</value>
        [DataMember(Name = "ShippingDiscountTax", EmitDefaultValue = false)]
        public Money ShippingDiscountTax { get; set; }

        /// <summary>
        ///     The total of all promotional discounts in the offer.
        /// </summary>
        /// <value>The total of all promotional discounts in the offer.</value>
        [DataMember(Name = "PromotionDiscount", EmitDefaultValue = false)]
        public Money PromotionDiscount { get; set; }

        /// <summary>
        ///     The tax on the total of all promotional discounts in the offer.
        /// </summary>
        /// <value>The tax on the total of all promotional discounts in the offer.</value>
        [DataMember(Name = "PromotionDiscountTax", EmitDefaultValue = false)]
        public Money PromotionDiscountTax { get; set; }

        /// <summary>
        ///     Gets or Sets PromotionIds
        /// </summary>
        [DataMember(Name = "PromotionIds", EmitDefaultValue = false)]
        public PromotionIdList PromotionIds { get; set; }

        /// <summary>
        ///     The fee charged for COD service.
        /// </summary>
        /// <value>The fee charged for COD service.</value>
        [DataMember(Name = "CODFee", EmitDefaultValue = false)]
        public Money CODFee { get; set; }

        /// <summary>
        ///     The discount on the COD fee.
        /// </summary>
        /// <value>The discount on the COD fee.</value>
        [DataMember(Name = "CODFeeDiscount", EmitDefaultValue = false)]
        public Money CODFeeDiscount { get; set; }

        /// <summary>
        ///     When true, the item is a gift.
        /// </summary>
        /// <value>When true, the item is a gift.</value>
        [DataMember(Name = "IsGift", EmitDefaultValue = false)]
        public bool? IsGift { get; set; }

        /// <summary>
        ///     The condition of the item as described by the seller.
        /// </summary>
        /// <value>The condition of the item as described by the seller.</value>
        [DataMember(Name = "ConditionNote", EmitDefaultValue = false)]
        public string ConditionNote { get; set; }

        /// <summary>
        ///     The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
        /// </summary>
        /// <value>The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.</value>
        [DataMember(Name = "ConditionId", EmitDefaultValue = false)]
        public string ConditionId { get; set; }

        /// <summary>
        ///     The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty,
        ///     Refurbished Warranty, Refurbished, Open Box, Any, Other.
        /// </summary>
        /// <value>
        ///     The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM,
        ///     Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
        /// </value>
        [DataMember(Name = "ConditionSubtypeId", EmitDefaultValue = false)]
        public string ConditionSubtypeId { get; set; }

        /// <summary>
        ///     The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time
        ///     format.
        /// </summary>
        /// <value>
        ///     The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time
        ///     format.
        /// </value>
        [DataMember(Name = "ScheduledDeliveryStartDate", EmitDefaultValue = false)]
        public string ScheduledDeliveryStartDate { get; set; }

        /// <summary>
        ///     The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time
        ///     format.
        /// </summary>
        /// <value>
        ///     The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time
        ///     format.
        /// </value>
        [DataMember(Name = "ScheduledDeliveryEndDate", EmitDefaultValue = false)]
        public string ScheduledDeliveryEndDate { get; set; }

        /// <summary>
        ///     Indicates that the selling price is a special price that is available only for Amazon Business orders. For more
        ///     information about the Amazon Business Seller Program, see the [Amazon Business
        ///     website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that
        ///     is available only for Amazon Business orders.
        /// </summary>
        /// <value>
        ///     Indicates that the selling price is a special price that is available only for Amazon Business orders. For more
        ///     information about the Amazon Business Seller Program, see the [Amazon Business
        ///     website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that
        ///     is available only for Amazon Business orders.
        /// </value>
        [DataMember(Name = "PriceDesignation", EmitDefaultValue = false)]
        public string PriceDesignation { get; set; }

        /// <summary>
        ///     Information about withheld taxes.
        /// </summary>
        /// <value>Information about withheld taxes.</value>
        [DataMember(Name = "TaxCollection", EmitDefaultValue = false)]
        public TaxCollection TaxCollection { get; set; }

        /// <summary>
        ///     When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
        /// </summary>
        /// <value>When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.</value>
        [DataMember(Name = "SerialNumberRequired", EmitDefaultValue = false)]
        public bool? SerialNumberRequired { get; set; }

        /// <summary>
        ///     When true, transparency codes are required.
        /// </summary>
        /// <value>When true, transparency codes are required.</value>
        [DataMember(Name = "IsTransparency", EmitDefaultValue = false)]
        public bool? IsTransparency { get; set; }

        /// <summary>
        ///     The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must
        ///     provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
        /// </summary>
        /// <value>
        ///     The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must
        ///     provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
        /// </value>
        [DataMember(Name = "IossNumber", EmitDefaultValue = false)]
        public string IossNumber { get; set; }

        /// <summary>
        ///     The store chain store identifier. Linked to a specific store in a store chain.
        /// </summary>
        /// <value>The store chain store identifier. Linked to a specific store in a store chain.</value>
        [DataMember(Name = "StoreChainStoreId", EmitDefaultValue = false)]
        public string StoreChainStoreId { get; set; }


        /// <summary>
        ///     Gets or Sets BuyerInfo
        /// </summary>
        [DataMember(Name = "BuyerInfo", EmitDefaultValue = false)]
        public ItemBuyerInfo BuyerInfo { get; set; }

        /// <summary>
        ///     Information about whether or not a buyer requested cancellation.
        /// </summary>
        /// <value>Information about whether or not a buyer requested cancellation.</value>
        [DataMember(Name = "BuyerRequestedCancel", EmitDefaultValue = false)]
        public BuyerRequestedCancel BuyerRequestedCancel { get; set; }

        /// <summary>
        ///     Item approval context containing the information regarding the status and progress of the item approval.
        /// </summary>
        /// <value>Item approval context containing the information regarding the status and progress of the item approval.</value>
        [DataMember(Name = "ItemApprovalContext", EmitDefaultValue = false)]
        public ItemApprovalContext ItemApprovalContext { get; set; }

        /// <summary>
        ///     A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.
        /// </summary>
        /// <value>A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.</value>
        [DataMember(Name = "SerialNumbers", EmitDefaultValue = false)]
        public List<string> SerialNumbers { get; set; }

        /// <summary>
        ///     Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;

            return
                (
                    ASIN == input.ASIN ||
                    (ASIN != null &&
                     ASIN.Equals(input.ASIN))
                ) &&
                (
                    SellerSKU == input.SellerSKU ||
                    (SellerSKU != null &&
                     SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    OrderItemId == input.OrderItemId ||
                    (OrderItemId != null &&
                     OrderItemId.Equals(input.OrderItemId))
                ) &&
                (
                    Title == input.Title ||
                    (Title != null &&
                     Title.Equals(input.Title))
                ) &&
                (
                    QuantityOrdered == input.QuantityOrdered ||
                    (QuantityOrdered != null &&
                     QuantityOrdered.Equals(input.QuantityOrdered))
                ) &&
                (
                    QuantityShipped == input.QuantityShipped ||
                    (QuantityShipped != null &&
                     QuantityShipped.Equals(input.QuantityShipped))
                ) &&
                (
                    ProductInfo == input.ProductInfo ||
                    (ProductInfo != null &&
                     ProductInfo.Equals(input.ProductInfo))
                ) &&
                (
                    PointsGranted == input.PointsGranted ||
                    (PointsGranted != null &&
                     PointsGranted.Equals(input.PointsGranted))
                ) &&
                (
                    ItemPrice == input.ItemPrice ||
                    (ItemPrice != null &&
                     ItemPrice.Equals(input.ItemPrice))
                ) &&
                (
                    ShippingPrice == input.ShippingPrice ||
                    (ShippingPrice != null &&
                     ShippingPrice.Equals(input.ShippingPrice))
                ) &&
                (
                    ItemTax == input.ItemTax ||
                    (ItemTax != null &&
                     ItemTax.Equals(input.ItemTax))
                ) &&
                (
                    ShippingTax == input.ShippingTax ||
                    (ShippingTax != null &&
                     ShippingTax.Equals(input.ShippingTax))
                ) &&
                (
                    ShippingDiscount == input.ShippingDiscount ||
                    (ShippingDiscount != null &&
                     ShippingDiscount.Equals(input.ShippingDiscount))
                ) &&
                (
                    ShippingDiscountTax == input.ShippingDiscountTax ||
                    (ShippingDiscountTax != null &&
                     ShippingDiscountTax.Equals(input.ShippingDiscountTax))
                ) &&
                (
                    PromotionDiscount == input.PromotionDiscount ||
                    (PromotionDiscount != null &&
                     PromotionDiscount.Equals(input.PromotionDiscount))
                ) &&
                (
                    PromotionDiscountTax == input.PromotionDiscountTax ||
                    (PromotionDiscountTax != null &&
                     PromotionDiscountTax.Equals(input.PromotionDiscountTax))
                ) &&
                (
                    PromotionIds == input.PromotionIds ||
                    (PromotionIds != null &&
                     PromotionIds.Equals(input.PromotionIds))
                ) &&
                (
                    CODFee == input.CODFee ||
                    (CODFee != null &&
                     CODFee.Equals(input.CODFee))
                ) &&
                (
                    CODFeeDiscount == input.CODFeeDiscount ||
                    (CODFeeDiscount != null &&
                     CODFeeDiscount.Equals(input.CODFeeDiscount))
                ) &&
                (
                    IsGift == input.IsGift ||
                    (IsGift != null &&
                     IsGift.Equals(input.IsGift))
                ) &&
                (
                    ConditionNote == input.ConditionNote ||
                    (ConditionNote != null &&
                     ConditionNote.Equals(input.ConditionNote))
                ) &&
                (
                    ConditionId == input.ConditionId ||
                    (ConditionId != null &&
                     ConditionId.Equals(input.ConditionId))
                ) &&
                (
                    ConditionSubtypeId == input.ConditionSubtypeId ||
                    (ConditionSubtypeId != null &&
                     ConditionSubtypeId.Equals(input.ConditionSubtypeId))
                ) &&
                (
                    ScheduledDeliveryStartDate == input.ScheduledDeliveryStartDate ||
                    (ScheduledDeliveryStartDate != null &&
                     ScheduledDeliveryStartDate.Equals(input.ScheduledDeliveryStartDate))
                ) &&
                (
                    ScheduledDeliveryEndDate == input.ScheduledDeliveryEndDate ||
                    (ScheduledDeliveryEndDate != null &&
                     ScheduledDeliveryEndDate.Equals(input.ScheduledDeliveryEndDate))
                ) &&
                (
                    PriceDesignation == input.PriceDesignation ||
                    (PriceDesignation != null &&
                     PriceDesignation.Equals(input.PriceDesignation))
                ) &&
                (
                    TaxCollection == input.TaxCollection ||
                    (TaxCollection != null &&
                     TaxCollection.Equals(input.TaxCollection))
                ) &&
                (
                    SerialNumberRequired == input.SerialNumberRequired ||
                    (SerialNumberRequired != null &&
                     SerialNumberRequired.Equals(input.SerialNumberRequired))
                ) &&
                (
                    IsTransparency == input.IsTransparency ||
                    (IsTransparency != null &&
                     IsTransparency.Equals(input.IsTransparency))
                ) &&
                (
                    IossNumber == input.IossNumber ||
                    (IossNumber != null &&
                     IossNumber.Equals(input.IossNumber))
                ) &&
                (
                    StoreChainStoreId == input.StoreChainStoreId ||
                    (StoreChainStoreId != null &&
                     StoreChainStoreId.Equals(input.StoreChainStoreId))
                ) &&
                (
                    DeemedResellerCategory == input.DeemedResellerCategory ||
                    (DeemedResellerCategory != null &&
                     DeemedResellerCategory.Equals(input.DeemedResellerCategory))
                ) &&
                (
                    BuyerInfo == input.BuyerInfo ||
                    (BuyerInfo != null &&
                     BuyerInfo.Equals(input.BuyerInfo))
                ) &&
                (
                    BuyerRequestedCancel == input.BuyerRequestedCancel ||
                    (BuyerRequestedCancel != null &&
                     BuyerRequestedCancel.Equals(input.BuyerRequestedCancel))
                ) &&
                (
                    ItemApprovalContext == input.ItemApprovalContext ||
                    (ItemApprovalContext != null &&
                     ItemApprovalContext.Equals(input.ItemApprovalContext))
                ) &&
                (
                    SerialNumbers == input.SerialNumbers ||
                    SerialNumbers != null
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  ProductInfo: ").Append(ProductInfo).Append("\n");
            sb.Append("  PointsGranted: ").Append(PointsGranted).Append("\n");
            sb.Append("  ItemPrice: ").Append(ItemPrice).Append("\n");
            sb.Append("  ShippingPrice: ").Append(ShippingPrice).Append("\n");
            sb.Append("  ItemTax: ").Append(ItemTax).Append("\n");
            sb.Append("  ShippingTax: ").Append(ShippingTax).Append("\n");
            sb.Append("  ShippingDiscount: ").Append(ShippingDiscount).Append("\n");
            sb.Append("  ShippingDiscountTax: ").Append(ShippingDiscountTax).Append("\n");
            sb.Append("  PromotionDiscount: ").Append(PromotionDiscount).Append("\n");
            sb.Append("  PromotionDiscountTax: ").Append(PromotionDiscountTax).Append("\n");
            sb.Append("  PromotionIds: ").Append(PromotionIds).Append("\n");
            sb.Append("  CODFee: ").Append(CODFee).Append("\n");
            sb.Append("  CODFeeDiscount: ").Append(CODFeeDiscount).Append("\n");
            sb.Append("  IsGift: ").Append(IsGift).Append("\n");
            sb.Append("  ConditionNote: ").Append(ConditionNote).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  ConditionSubtypeId: ").Append(ConditionSubtypeId).Append("\n");
            sb.Append("  ScheduledDeliveryStartDate: ").Append(ScheduledDeliveryStartDate).Append("\n");
            sb.Append("  ScheduledDeliveryEndDate: ").Append(ScheduledDeliveryEndDate).Append("\n");
            sb.Append("  PriceDesignation: ").Append(PriceDesignation).Append("\n");
            sb.Append("  TaxCollection: ").Append(TaxCollection).Append("\n");
            sb.Append("  SerialNumberRequired: ").Append(SerialNumberRequired).Append("\n");
            sb.Append("  IsTransparency: ").Append(IsTransparency).Append("\n");
            sb.Append("  IossNumber: ").Append(IossNumber).Append("\n");
            sb.Append("  StoreChainStoreId: ").Append(StoreChainStoreId).Append("\n");
            sb.Append("  DeemedResellerCategory: ").Append(DeemedResellerCategory).Append("\n");
            sb.Append("  BuyerInfo: ").Append(BuyerInfo).Append("\n");
            sb.Append("  BuyerRequestedCancel: ").Append(BuyerRequestedCancel).Append("\n");
            sb.Append("  ItemApprovalContext: ").Append(ItemApprovalContext).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OrderItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ASIN != null)
                    hashCode = hashCode * 59 + ASIN.GetHashCode();
                if (SellerSKU != null)
                    hashCode = hashCode * 59 + SellerSKU.GetHashCode();
                if (OrderItemId != null)
                    hashCode = hashCode * 59 + OrderItemId.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (QuantityOrdered != null)
                    hashCode = hashCode * 59 + QuantityOrdered.GetHashCode();
                if (QuantityShipped != null)
                    hashCode = hashCode * 59 + QuantityShipped.GetHashCode();
                if (ProductInfo != null)
                    hashCode = hashCode * 59 + ProductInfo.GetHashCode();
                if (PointsGranted != null)
                    hashCode = hashCode * 59 + PointsGranted.GetHashCode();
                if (ItemPrice != null)
                    hashCode = hashCode * 59 + ItemPrice.GetHashCode();
                if (ShippingPrice != null)
                    hashCode = hashCode * 59 + ShippingPrice.GetHashCode();
                if (ItemTax != null)
                    hashCode = hashCode * 59 + ItemTax.GetHashCode();
                if (ShippingTax != null)
                    hashCode = hashCode * 59 + ShippingTax.GetHashCode();
                if (ShippingDiscount != null)
                    hashCode = hashCode * 59 + ShippingDiscount.GetHashCode();
                if (ShippingDiscountTax != null)
                    hashCode = hashCode * 59 + ShippingDiscountTax.GetHashCode();
                if (PromotionDiscount != null)
                    hashCode = hashCode * 59 + PromotionDiscount.GetHashCode();
                if (PromotionDiscountTax != null)
                    hashCode = hashCode * 59 + PromotionDiscountTax.GetHashCode();
                if (PromotionIds != null)
                    hashCode = hashCode * 59 + PromotionIds.GetHashCode();
                if (CODFee != null)
                    hashCode = hashCode * 59 + CODFee.GetHashCode();
                if (CODFeeDiscount != null)
                    hashCode = hashCode * 59 + CODFeeDiscount.GetHashCode();
                if (IsGift != null)
                    hashCode = hashCode * 59 + IsGift.GetHashCode();
                if (ConditionNote != null)
                    hashCode = hashCode * 59 + ConditionNote.GetHashCode();
                if (ConditionId != null)
                    hashCode = hashCode * 59 + ConditionId.GetHashCode();
                if (ConditionSubtypeId != null)
                    hashCode = hashCode * 59 + ConditionSubtypeId.GetHashCode();
                if (ScheduledDeliveryStartDate != null)
                    hashCode = hashCode * 59 + ScheduledDeliveryStartDate.GetHashCode();
                if (ScheduledDeliveryEndDate != null)
                    hashCode = hashCode * 59 + ScheduledDeliveryEndDate.GetHashCode();
                if (PriceDesignation != null)
                    hashCode = hashCode * 59 + PriceDesignation.GetHashCode();
                if (TaxCollection != null)
                    hashCode = hashCode * 59 + TaxCollection.GetHashCode();
                if (SerialNumberRequired != null)
                    hashCode = hashCode * 59 + SerialNumberRequired.GetHashCode();
                if (IsTransparency != null)
                    hashCode = hashCode * 59 + IsTransparency.GetHashCode();
                if (IossNumber != null)
                    hashCode = hashCode * 59 + IossNumber.GetHashCode();
                if (StoreChainStoreId != null)
                    hashCode = hashCode * 59 + StoreChainStoreId.GetHashCode();
                if (DeemedResellerCategory != null)
                    hashCode = hashCode * 59 + DeemedResellerCategory.GetHashCode();
                if (BuyerInfo != null)
                    hashCode = hashCode * 59 + BuyerInfo.GetHashCode();
                if (BuyerRequestedCancel != null)
                    hashCode = hashCode * 59 + BuyerRequestedCancel.GetHashCode();
                if (ItemApprovalContext != null)
                    hashCode = hashCode * 59 + ItemApprovalContext.GetHashCode();
                if (SerialNumbers != null)
                    hashCode = hashCode * 59 + SerialNumbers.GetHashCode();
                return hashCode;
            }
        }
    }
}