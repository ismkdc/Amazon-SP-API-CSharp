/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    ///     Information about the buyer.
    /// </summary>
    [DataContract]
    public class Buyer : IEquatable<Buyer>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Buyer" /> class.
        /// </summary>
        /// <param name="BuyerId">The identifier of the buyer..</param>
        /// <param name="Name">The name of the buyer..</param>
        /// <param name="Phone">The phone number of the buyer..</param>
        /// <param name="IsPrimeMember">When true, the service is for an Amazon Prime buyer..</param>
        public Buyer(string BuyerId = default, string Name = default, string Phone = default,
            bool? IsPrimeMember = default)
        {
            this.BuyerId = BuyerId;
            this.Name = Name;
            this.Phone = Phone;
            this.IsPrimeMember = IsPrimeMember;
        }

        /// <summary>
        ///     The identifier of the buyer.
        /// </summary>
        /// <value>The identifier of the buyer.</value>
        [DataMember(Name = "buyerId", EmitDefaultValue = false)]
        public string BuyerId { get; set; }

        /// <summary>
        ///     The name of the buyer.
        /// </summary>
        /// <value>The name of the buyer.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     The phone number of the buyer.
        /// </summary>
        /// <value>The phone number of the buyer.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        ///     When true, the service is for an Amazon Prime buyer.
        /// </summary>
        /// <value>When true, the service is for an Amazon Prime buyer.</value>
        [DataMember(Name = "isPrimeMember", EmitDefaultValue = false)]
        public bool? IsPrimeMember { get; set; }

        /// <summary>
        ///     Returns true if Buyer instances are equal
        /// </summary>
        /// <param name="input">Instance of Buyer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Buyer input)
        {
            if (input == null)
                return false;

            return
                (
                    BuyerId == input.BuyerId ||
                    (BuyerId != null &&
                     BuyerId.Equals(input.BuyerId))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Phone == input.Phone ||
                    (Phone != null &&
                     Phone.Equals(input.Phone))
                ) &&
                (
                    IsPrimeMember == input.IsPrimeMember ||
                    (IsPrimeMember != null &&
                     IsPrimeMember.Equals(input.IsPrimeMember))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BuyerId (string) pattern
            var regexBuyerId = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexBuyerId.Match(BuyerId).Success)
                yield return new ValidationResult("Invalid value for BuyerId, must match a pattern of " + regexBuyerId,
                    new[] { "BuyerId" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Buyer {\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  IsPrimeMember: ").Append(IsPrimeMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Buyer);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BuyerId != null)
                    hashCode = hashCode * 59 + BuyerId.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                if (IsPrimeMember != null)
                    hashCode = hashCode * 59 + IsPrimeMember.GetHashCode();
                return hashCode;
            }
        }
    }
}