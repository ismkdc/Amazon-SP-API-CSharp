/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    ///     Information about an item associated with the service job.
    /// </summary>
    [DataContract]
    public class AssociatedItem : IEquatable<AssociatedItem>, IValidatableObject
    {
        /// <summary>
        ///     The status of the item.
        /// </summary>
        /// <value>The status of the item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemStatusEnum
        {
            /// <summary>
            ///     Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")] ACTIVE = 1,

            /// <summary>
            ///     Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")] CANCELLED = 2,

            /// <summary>
            ///     Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")] SHIPPED = 3,

            /// <summary>
            ///     Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")] DELIVERED = 4
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="AssociatedItem" /> class.
        /// </summary>
        /// <param name="Asin">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="Title">The title of the item..</param>
        /// <param name="Quantity">The total number of items included in the order..</param>
        /// <param name="OrderId">The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format..</param>
        /// <param name="ItemStatus">The status of the item..</param>
        /// <param name="BrandName">The brand name of the item..</param>
        /// <param name="ItemDelivery">Delivery information for the item..</param>
        public AssociatedItem(string Asin = default, string Title = default, int? Quantity = default,
            OrderId OrderId = default, ItemStatusEnum? ItemStatus = default, string BrandName = default,
            ItemDelivery ItemDelivery = default)
        {
            this.Asin = Asin;
            this.Title = Title;
            this.Quantity = Quantity;
            this.OrderId = OrderId;
            this.ItemStatus = ItemStatus;
            this.BrandName = BrandName;
            this.ItemDelivery = ItemDelivery;
        }

        /// <summary>
        ///     The status of the item.
        /// </summary>
        /// <value>The status of the item.</value>
        [DataMember(Name = "itemStatus", EmitDefaultValue = false)]
        public ItemStatusEnum? ItemStatus { get; set; }

        /// <summary>
        ///     The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        ///     The title of the item.
        /// </summary>
        /// <value>The title of the item.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        ///     The total number of items included in the order.
        /// </summary>
        /// <value>The total number of items included in the order.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
        /// </summary>
        /// <value>The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public OrderId OrderId { get; set; }


        /// <summary>
        ///     The brand name of the item.
        /// </summary>
        /// <value>The brand name of the item.</value>
        [DataMember(Name = "brandName", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        ///     Delivery information for the item.
        /// </summary>
        /// <value>Delivery information for the item.</value>
        [DataMember(Name = "itemDelivery", EmitDefaultValue = false)]
        public ItemDelivery ItemDelivery { get; set; }

        /// <summary>
        ///     Returns true if AssociatedItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociatedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociatedItem input)
        {
            if (input == null)
                return false;

            return
                (
                    Asin == input.Asin ||
                    (Asin != null &&
                     Asin.Equals(input.Asin))
                ) &&
                (
                    Title == input.Title ||
                    (Title != null &&
                     Title.Equals(input.Title))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    OrderId == input.OrderId ||
                    (OrderId != null &&
                     OrderId.Equals(input.OrderId))
                ) &&
                (
                    ItemStatus == input.ItemStatus ||
                    (ItemStatus != null &&
                     ItemStatus.Equals(input.ItemStatus))
                ) &&
                (
                    BrandName == input.BrandName ||
                    (BrandName != null &&
                     BrandName.Equals(input.BrandName))
                ) &&
                (
                    ItemDelivery == input.ItemDelivery ||
                    (ItemDelivery != null &&
                     ItemDelivery.Equals(input.ItemDelivery))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssociatedItem {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  ItemDelivery: ").Append(ItemDelivery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AssociatedItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Asin != null)
                    hashCode = hashCode * 59 + Asin.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                if (ItemStatus != null)
                    hashCode = hashCode * 59 + ItemStatus.GetHashCode();
                if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                if (ItemDelivery != null)
                    hashCode = hashCode * 59 + ItemDelivery.GetHashCode();
                return hashCode;
            }
        }
    }
}