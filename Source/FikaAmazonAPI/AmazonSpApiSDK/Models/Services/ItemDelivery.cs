/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    ///     Delivery information for the item.
    /// </summary>
    [DataContract]
    public class ItemDelivery : IEquatable<ItemDelivery>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemDelivery" /> class.
        /// </summary>
        /// <param name="EstimatedDeliveryDate">
        ///     The date and time of the latest Estimated Delivery Date (EDD) of all the items with
        ///     an EDD. In ISO 8601 format..
        /// </param>
        /// <param name="ItemDeliveryPromise">Promised delivery information for the item..</param>
        public ItemDelivery(DateTime? EstimatedDeliveryDate = default,
            ItemDeliveryPromise ItemDeliveryPromise = default)
        {
            this.EstimatedDeliveryDate = EstimatedDeliveryDate;
            this.ItemDeliveryPromise = ItemDeliveryPromise;
        }

        /// <summary>
        ///     The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
        /// </summary>
        /// <value>The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.</value>
        [DataMember(Name = "estimatedDeliveryDate", EmitDefaultValue = false)]
        public DateTime? EstimatedDeliveryDate { get; set; }

        /// <summary>
        ///     Promised delivery information for the item.
        /// </summary>
        /// <value>Promised delivery information for the item.</value>
        [DataMember(Name = "itemDeliveryPromise", EmitDefaultValue = false)]
        public ItemDeliveryPromise ItemDeliveryPromise { get; set; }

        /// <summary>
        ///     Returns true if ItemDelivery instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemDelivery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemDelivery input)
        {
            if (input == null)
                return false;

            return
                (
                    EstimatedDeliveryDate == input.EstimatedDeliveryDate ||
                    (EstimatedDeliveryDate != null &&
                     EstimatedDeliveryDate.Equals(input.EstimatedDeliveryDate))
                ) &&
                (
                    ItemDeliveryPromise == input.ItemDeliveryPromise ||
                    (ItemDeliveryPromise != null &&
                     ItemDeliveryPromise.Equals(input.ItemDeliveryPromise))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemDelivery {\n");
            sb.Append("  EstimatedDeliveryDate: ").Append(EstimatedDeliveryDate).Append("\n");
            sb.Append("  ItemDeliveryPromise: ").Append(ItemDeliveryPromise).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ItemDelivery);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (EstimatedDeliveryDate != null)
                    hashCode = hashCode * 59 + EstimatedDeliveryDate.GetHashCode();
                if (ItemDeliveryPromise != null)
                    hashCode = hashCode * 59 + ItemDeliveryPromise.GetHashCode();
                return hashCode;
            }
        }
    }
}