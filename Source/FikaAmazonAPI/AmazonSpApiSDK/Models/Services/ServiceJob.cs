/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    ///     The job details of a service.
    /// </summary>
    [DataContract]
    public class ServiceJob : IEquatable<ServiceJob>, IValidatableObject
    {
        /// <summary>
        ///     The status of the service job.
        /// </summary>
        /// <value>The status of the service job.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceJobStatusEnum
        {
            /// <summary>
            ///     Enum NOTSERVICED for value: NOT_SERVICED
            /// </summary>
            [EnumMember(Value = "NOT_SERVICED")] NOTSERVICED = 1,

            /// <summary>
            ///     Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")] CANCELLED = 2,

            /// <summary>
            ///     Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")] COMPLETED = 3,

            /// <summary>
            ///     Enum PENDINGSCHEDULE for value: PENDING_SCHEDULE
            /// </summary>
            [EnumMember(Value = "PENDING_SCHEDULE")]
            PENDINGSCHEDULE = 4,

            /// <summary>
            ///     Enum NOTFULFILLABLE for value: NOT_FULFILLABLE
            /// </summary>
            [EnumMember(Value = "NOT_FULFILLABLE")]
            NOTFULFILLABLE = 5,

            /// <summary>
            ///     Enum HOLD for value: HOLD
            /// </summary>
            [EnumMember(Value = "HOLD")] HOLD = 6,

            /// <summary>
            ///     Enum PAYMENTDECLINED for value: PAYMENT_DECLINED
            /// </summary>
            [EnumMember(Value = "PAYMENT_DECLINED")]
            PAYMENTDECLINED = 7
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ServiceJob" /> class.
        /// </summary>
        /// <param name="CreateTime">The date and time of the creation of the job, in ISO 8601 format..</param>
        /// <param name="ServiceJobId">The service job identifier..</param>
        /// <param name="ServiceJobStatus">The status of the service job..</param>
        /// <param name="ScopeOfWork">The scope of work for the order..</param>
        /// <param name="Seller">Information about the seller of the service job..</param>
        /// <param name="ServiceJobProvider">Information about the service job provider..</param>
        /// <param name="PreferredAppointmentTimes">
        ///     A list of appointment windows preferred by the buyer. Included only if the
        ///     buyer selected appointment windows when creating the order..
        /// </param>
        /// <param name="Appointments">A list of appointments..</param>
        /// <param name="ServiceOrderId">The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format..</param>
        /// <param name="MarketplaceId">The marketplace identifier..</param>
        /// <param name="Buyer">Information about the buyer..</param>
        /// <param name="AssociatedItems">A list of items associated with the service job..</param>
        /// <param name="ServiceLocation">Information about the location of the service job..</param>
        public ServiceJob(DateTime? CreateTime = default, ServiceJobId ServiceJobId = default,
            ServiceJobStatusEnum? ServiceJobStatus = default, ScopeOfWork ScopeOfWork = default,
            Seller Seller = default, ServiceJobProvider ServiceJobProvider = default,
            List<AppointmentTime> PreferredAppointmentTimes = default, List<Appointment> Appointments = default,
            OrderId ServiceOrderId = default, string MarketplaceId = default, Buyer Buyer = default,
            List<AssociatedItem> AssociatedItems = default, ServiceLocation ServiceLocation = default)
        {
            this.CreateTime = CreateTime;
            this.ServiceJobId = ServiceJobId;
            this.ServiceJobStatus = ServiceJobStatus;
            this.ScopeOfWork = ScopeOfWork;
            this.Seller = Seller;
            this.ServiceJobProvider = ServiceJobProvider;
            this.PreferredAppointmentTimes = PreferredAppointmentTimes;
            this.Appointments = Appointments;
            this.ServiceOrderId = ServiceOrderId;
            this.MarketplaceId = MarketplaceId;
            this.Buyer = Buyer;
            this.AssociatedItems = AssociatedItems;
            this.ServiceLocation = ServiceLocation;
        }

        /// <summary>
        ///     The status of the service job.
        /// </summary>
        /// <value>The status of the service job.</value>
        [DataMember(Name = "serviceJobStatus", EmitDefaultValue = false)]
        public ServiceJobStatusEnum? ServiceJobStatus { get; set; }

        /// <summary>
        ///     The date and time of the creation of the job, in ISO 8601 format.
        /// </summary>
        /// <value>The date and time of the creation of the job, in ISO 8601 format.</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime? CreateTime { get; set; }

        /// <summary>
        ///     The service job identifier.
        /// </summary>
        /// <value>The service job identifier.</value>
        [DataMember(Name = "serviceJobId", EmitDefaultValue = false)]
        public ServiceJobId ServiceJobId { get; set; }


        /// <summary>
        ///     The scope of work for the order.
        /// </summary>
        /// <value>The scope of work for the order.</value>
        [DataMember(Name = "scopeOfWork", EmitDefaultValue = false)]
        public ScopeOfWork ScopeOfWork { get; set; }

        /// <summary>
        ///     Information about the seller of the service job.
        /// </summary>
        /// <value>Information about the seller of the service job.</value>
        [DataMember(Name = "seller", EmitDefaultValue = false)]
        public Seller Seller { get; set; }

        /// <summary>
        ///     Information about the service job provider.
        /// </summary>
        /// <value>Information about the service job provider.</value>
        [DataMember(Name = "serviceJobProvider", EmitDefaultValue = false)]
        public ServiceJobProvider ServiceJobProvider { get; set; }

        /// <summary>
        ///     A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when
        ///     creating the order.
        /// </summary>
        /// <value>
        ///     A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows
        ///     when creating the order.
        /// </value>
        [DataMember(Name = "preferredAppointmentTimes", EmitDefaultValue = false)]
        public List<AppointmentTime> PreferredAppointmentTimes { get; set; }

        /// <summary>
        ///     A list of appointments.
        /// </summary>
        /// <value>A list of appointments.</value>
        [DataMember(Name = "appointments", EmitDefaultValue = false)]
        public List<Appointment> Appointments { get; set; }

        /// <summary>
        ///     The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
        /// </summary>
        /// <value>The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.</value>
        [DataMember(Name = "serviceOrderId", EmitDefaultValue = false)]
        public OrderId ServiceOrderId { get; set; }

        /// <summary>
        ///     The marketplace identifier.
        /// </summary>
        /// <value>The marketplace identifier.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     Information about the buyer.
        /// </summary>
        /// <value>Information about the buyer.</value>
        [DataMember(Name = "buyer", EmitDefaultValue = false)]
        public Buyer Buyer { get; set; }

        /// <summary>
        ///     A list of items associated with the service job.
        /// </summary>
        /// <value>A list of items associated with the service job.</value>
        [DataMember(Name = "associatedItems", EmitDefaultValue = false)]
        public List<AssociatedItem> AssociatedItems { get; set; }

        /// <summary>
        ///     Information about the location of the service job.
        /// </summary>
        /// <value>Information about the location of the service job.</value>
        [DataMember(Name = "serviceLocation", EmitDefaultValue = false)]
        public ServiceLocation ServiceLocation { get; set; }

        /// <summary>
        ///     Returns true if ServiceJob instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceJob input)
        {
            if (input == null)
                return false;

            return
                (
                    CreateTime == input.CreateTime ||
                    (CreateTime != null &&
                     CreateTime.Equals(input.CreateTime))
                ) &&
                (
                    ServiceJobId == input.ServiceJobId ||
                    (ServiceJobId != null &&
                     ServiceJobId.Equals(input.ServiceJobId))
                ) &&
                (
                    ServiceJobStatus == input.ServiceJobStatus ||
                    (ServiceJobStatus != null &&
                     ServiceJobStatus.Equals(input.ServiceJobStatus))
                ) &&
                (
                    ScopeOfWork == input.ScopeOfWork ||
                    (ScopeOfWork != null &&
                     ScopeOfWork.Equals(input.ScopeOfWork))
                ) &&
                (
                    Seller == input.Seller ||
                    (Seller != null &&
                     Seller.Equals(input.Seller))
                ) &&
                (
                    ServiceJobProvider == input.ServiceJobProvider ||
                    (ServiceJobProvider != null &&
                     ServiceJobProvider.Equals(input.ServiceJobProvider))
                ) &&
                (
                    PreferredAppointmentTimes == input.PreferredAppointmentTimes ||
                    (PreferredAppointmentTimes != null &&
                     PreferredAppointmentTimes.SequenceEqual(input.PreferredAppointmentTimes))
                ) &&
                (
                    Appointments == input.Appointments ||
                    (Appointments != null &&
                     Appointments.SequenceEqual(input.Appointments))
                ) &&
                (
                    ServiceOrderId == input.ServiceOrderId ||
                    (ServiceOrderId != null &&
                     ServiceOrderId.Equals(input.ServiceOrderId))
                ) &&
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    Buyer == input.Buyer ||
                    (Buyer != null &&
                     Buyer.Equals(input.Buyer))
                ) &&
                (
                    AssociatedItems == input.AssociatedItems ||
                    (AssociatedItems != null &&
                     AssociatedItems.SequenceEqual(input.AssociatedItems))
                ) &&
                (
                    ServiceLocation == input.ServiceLocation ||
                    (ServiceLocation != null &&
                     ServiceLocation.Equals(input.ServiceLocation))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MarketplaceId (string) pattern
            var regexMarketplaceId = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexMarketplaceId.Match(MarketplaceId).Success)
                yield return new ValidationResult(
                    "Invalid value for MarketplaceId, must match a pattern of " + regexMarketplaceId,
                    new[] { "MarketplaceId" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceJob {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ServiceJobId: ").Append(ServiceJobId).Append("\n");
            sb.Append("  ServiceJobStatus: ").Append(ServiceJobStatus).Append("\n");
            sb.Append("  ScopeOfWork: ").Append(ScopeOfWork).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  ServiceJobProvider: ").Append(ServiceJobProvider).Append("\n");
            sb.Append("  PreferredAppointmentTimes: ").Append(PreferredAppointmentTimes).Append("\n");
            sb.Append("  Appointments: ").Append(Appointments).Append("\n");
            sb.Append("  ServiceOrderId: ").Append(ServiceOrderId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  AssociatedItems: ").Append(AssociatedItems).Append("\n");
            sb.Append("  ServiceLocation: ").Append(ServiceLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ServiceJob);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CreateTime != null)
                    hashCode = hashCode * 59 + CreateTime.GetHashCode();
                if (ServiceJobId != null)
                    hashCode = hashCode * 59 + ServiceJobId.GetHashCode();
                if (ServiceJobStatus != null)
                    hashCode = hashCode * 59 + ServiceJobStatus.GetHashCode();
                if (ScopeOfWork != null)
                    hashCode = hashCode * 59 + ScopeOfWork.GetHashCode();
                if (Seller != null)
                    hashCode = hashCode * 59 + Seller.GetHashCode();
                if (ServiceJobProvider != null)
                    hashCode = hashCode * 59 + ServiceJobProvider.GetHashCode();
                if (PreferredAppointmentTimes != null)
                    hashCode = hashCode * 59 + PreferredAppointmentTimes.GetHashCode();
                if (Appointments != null)
                    hashCode = hashCode * 59 + Appointments.GetHashCode();
                if (ServiceOrderId != null)
                    hashCode = hashCode * 59 + ServiceOrderId.GetHashCode();
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (Buyer != null)
                    hashCode = hashCode * 59 + Buyer.GetHashCode();
                if (AssociatedItems != null)
                    hashCode = hashCode * 59 + AssociatedItems.GetHashCode();
                if (ServiceLocation != null)
                    hashCode = hashCode * 59 + ServiceLocation.GetHashCode();
                return hashCode;
            }
        }
    }
}