/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using static FikaAmazonAPI.Utils.Constants;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     OfferDetail
    /// </summary>
    [DataContract]
    public class OfferDetail : IEquatable<OfferDetail>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="OfferDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OfferDetail()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OfferDetail" /> class.
        /// </summary>
        /// <param name="myOffer">When true, this is the seller&#39;s offer..</param>
        /// <param name="offerType">Indicates the type of customer that the offer is valid for..</param>
        /// <param name="subCondition">
        ///     The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable,
        ///     Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. (required).
        /// </param>
        /// <param name="sellerId">The seller identifier for the offer..</param>
        /// <param name="conditionNotes">Information about the condition of the item..</param>
        /// <param name="sellerFeedbackRating">
        ///     Information about the seller&#39;s feedback, including the percentage of positive
        ///     feedback, and the total number of ratings received..
        /// </param>
        /// <param name="shippingTime">
        ///     The maximum time within which the item will likely be shipped once an order has been placed.
        ///     (required).
        /// </param>
        /// <param name="listingPrice">The price of the item. (required).</param>
        /// <param name="quantityDiscountPrices">quantityDiscountPrices.</param>
        /// <param name="points">The number of Amazon Points offered with the purchase of an item..</param>
        /// <param name="shipping">The shipping cost. (required).</param>
        /// <param name="shipsFrom">The state and country from where the item is shipped..</param>
        /// <param name="isFulfilledByAmazon">When true, the offer is fulfilled by Amazon. (required).</param>
        /// <param name="primeInformation">Amazon Prime information..</param>
        /// <param name="isBuyBoxWinner">
        ///     When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners
        ///     at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime..
        /// </param>
        /// <param name="isFeaturedMerchant">When true, the seller of the item is eligible to win the Buy Box..</param>
        public OfferDetail(bool? myOffer = default, OfferTypeEnum? offerType = default, string subCondition = default,
            string sellerId = default, string conditionNotes = default,
            SellerFeedbackType sellerFeedbackRating = default, DetailedShippingTimeType shippingTime = default,
            MoneyType listingPrice = default, List<QuantityDiscountPriceType> quantityDiscountPrices = default,
            Points points = default, MoneyType shipping = default, ShipsFromType shipsFrom = default,
            bool? isFulfilledByAmazon = default, PrimeInformationType primeInformation = default,
            bool? isBuyBoxWinner = default, bool? isFeaturedMerchant = default)
        {
            // to ensure "subCondition" is required (not null)
            if (subCondition == null)
                throw new InvalidDataException(
                    "subCondition is a required property for OfferDetail and cannot be null");
            SubCondition = subCondition;
            // to ensure "shippingTime" is required (not null)
            if (shippingTime == null)
                throw new InvalidDataException(
                    "shippingTime is a required property for OfferDetail and cannot be null");
            ShippingTime = shippingTime;
            // to ensure "listingPrice" is required (not null)
            if (listingPrice == null)
                throw new InvalidDataException(
                    "listingPrice is a required property for OfferDetail and cannot be null");
            ListingPrice = listingPrice;
            // to ensure "shipping" is required (not null)
            if (shipping == null)
                throw new InvalidDataException("shipping is a required property for OfferDetail and cannot be null");
            Shipping = shipping;
            // to ensure "isFulfilledByAmazon" is required (not null)
            if (isFulfilledByAmazon == null)
                throw new InvalidDataException(
                    "isFulfilledByAmazon is a required property for OfferDetail and cannot be null");
            IsFulfilledByAmazon = isFulfilledByAmazon;
            MyOffer = myOffer;
            OfferType = offerType;
            SellerId = sellerId;
            ConditionNotes = conditionNotes;
            SellerFeedbackRating = sellerFeedbackRating;
            QuantityDiscountPrices = quantityDiscountPrices;
            Points = points;
            ShipsFrom = shipsFrom;
            PrimeInformation = primeInformation;
            IsBuyBoxWinner = isBuyBoxWinner;
            IsFeaturedMerchant = isFeaturedMerchant;
        }

        /// <summary>
        ///     Indicates the type of customer that the offer is valid for.
        /// </summary>
        /// <value>Indicates the type of customer that the offer is valid for.</value>
        [DataMember(Name = "offerType", EmitDefaultValue = false)]
        public OfferTypeEnum? OfferType { get; set; }

        /// <summary>
        ///     When true, this is the seller&#39;s offer.
        /// </summary>
        /// <value>When true, this is the seller&#39;s offer.</value>
        [DataMember(Name = "MyOffer", EmitDefaultValue = false)]
        public bool? MyOffer { get; set; }


        /// <summary>
        ///     The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM,
        ///     Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        /// <value>
        ///     The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM,
        ///     Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </value>
        [DataMember(Name = "SubCondition", EmitDefaultValue = false)]
        public string SubCondition { get; set; }

        /// <summary>
        ///     The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name = "SellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        ///     Information about the condition of the item.
        /// </summary>
        /// <value>Information about the condition of the item.</value>
        [DataMember(Name = "ConditionNotes", EmitDefaultValue = false)]
        public string ConditionNotes { get; set; }

        /// <summary>
        ///     Information about the seller&#39;s feedback, including the percentage of positive feedback, and the total number of
        ///     ratings received.
        /// </summary>
        /// <value>
        ///     Information about the seller&#39;s feedback, including the percentage of positive feedback, and the total number
        ///     of ratings received.
        /// </value>
        [DataMember(Name = "SellerFeedbackRating", EmitDefaultValue = false)]
        public SellerFeedbackType SellerFeedbackRating { get; set; }

        /// <summary>
        ///     The maximum time within which the item will likely be shipped once an order has been placed.
        /// </summary>
        /// <value>The maximum time within which the item will likely be shipped once an order has been placed.</value>
        [DataMember(Name = "ShippingTime", EmitDefaultValue = false)]
        public DetailedShippingTimeType ShippingTime { get; set; }

        /// <summary>
        ///     The price of the item.
        /// </summary>
        /// <value>The price of the item.</value>
        [DataMember(Name = "ListingPrice", EmitDefaultValue = false)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        ///     Gets or Sets QuantityDiscountPrices
        /// </summary>
        [DataMember(Name = "quantityDiscountPrices", EmitDefaultValue = false)]
        public List<QuantityDiscountPriceType> QuantityDiscountPrices { get; set; }

        /// <summary>
        ///     The number of Amazon Points offered with the purchase of an item.
        /// </summary>
        /// <value>The number of Amazon Points offered with the purchase of an item.</value>
        [DataMember(Name = "Points", EmitDefaultValue = false)]
        public Points Points { get; set; }

        /// <summary>
        ///     The shipping cost.
        /// </summary>
        /// <value>The shipping cost.</value>
        [DataMember(Name = "Shipping", EmitDefaultValue = false)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        ///     The state and country from where the item is shipped.
        /// </summary>
        /// <value>The state and country from where the item is shipped.</value>
        [DataMember(Name = "ShipsFrom", EmitDefaultValue = false)]
        public ShipsFromType ShipsFrom { get; set; }

        /// <summary>
        ///     When true, the offer is fulfilled by Amazon.
        /// </summary>
        /// <value>When true, the offer is fulfilled by Amazon.</value>
        [DataMember(Name = "IsFulfilledByAmazon", EmitDefaultValue = false)]
        public bool? IsFulfilledByAmazon { get; set; }

        /// <summary>
        ///     Amazon Prime information.
        /// </summary>
        /// <value>Amazon Prime information.</value>
        [DataMember(Name = "PrimeInformation", EmitDefaultValue = false)]
        public PrimeInformationType PrimeInformation { get; set; }

        /// <summary>
        ///     When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one
        ///     that is eligible for Prime and one that is not eligible for Prime.
        /// </summary>
        /// <value>
        ///     When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN,
        ///     one that is eligible for Prime and one that is not eligible for Prime.
        /// </value>
        [DataMember(Name = "IsBuyBoxWinner", EmitDefaultValue = false)]
        public bool? IsBuyBoxWinner { get; set; }

        /// <summary>
        ///     When true, the seller of the item is eligible to win the Buy Box.
        /// </summary>
        /// <value>When true, the seller of the item is eligible to win the Buy Box.</value>
        [DataMember(Name = "IsFeaturedMerchant", EmitDefaultValue = false)]
        public bool? IsFeaturedMerchant { get; set; }

        /// <summary>
        ///     Returns true if OfferDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferDetail input)
        {
            if (input == null)
                return false;

            return
                (
                    MyOffer == input.MyOffer ||
                    (MyOffer != null &&
                     MyOffer.Equals(input.MyOffer))
                ) &&
                (
                    OfferType == input.OfferType ||
                    (OfferType != null &&
                     OfferType.Equals(input.OfferType))
                ) &&
                (
                    SubCondition == input.SubCondition ||
                    (SubCondition != null &&
                     SubCondition.Equals(input.SubCondition))
                ) &&
                (
                    SellerId == input.SellerId ||
                    (SellerId != null &&
                     SellerId.Equals(input.SellerId))
                ) &&
                (
                    ConditionNotes == input.ConditionNotes ||
                    (ConditionNotes != null &&
                     ConditionNotes.Equals(input.ConditionNotes))
                ) &&
                (
                    SellerFeedbackRating == input.SellerFeedbackRating ||
                    (SellerFeedbackRating != null &&
                     SellerFeedbackRating.Equals(input.SellerFeedbackRating))
                ) &&
                (
                    ShippingTime == input.ShippingTime ||
                    (ShippingTime != null &&
                     ShippingTime.Equals(input.ShippingTime))
                ) &&
                (
                    ListingPrice == input.ListingPrice ||
                    (ListingPrice != null &&
                     ListingPrice.Equals(input.ListingPrice))
                ) &&
                (
                    QuantityDiscountPrices == input.QuantityDiscountPrices ||
                    QuantityDiscountPrices != null
                ) &&
                (
                    Points == input.Points ||
                    (Points != null &&
                     Points.Equals(input.Points))
                ) &&
                (
                    Shipping == input.Shipping ||
                    (Shipping != null &&
                     Shipping.Equals(input.Shipping))
                ) &&
                (
                    ShipsFrom == input.ShipsFrom ||
                    (ShipsFrom != null &&
                     ShipsFrom.Equals(input.ShipsFrom))
                ) &&
                (
                    IsFulfilledByAmazon == input.IsFulfilledByAmazon ||
                    (IsFulfilledByAmazon != null &&
                     IsFulfilledByAmazon.Equals(input.IsFulfilledByAmazon))
                ) &&
                (
                    PrimeInformation == input.PrimeInformation ||
                    (PrimeInformation != null &&
                     PrimeInformation.Equals(input.PrimeInformation))
                ) &&
                (
                    IsBuyBoxWinner == input.IsBuyBoxWinner ||
                    (IsBuyBoxWinner != null &&
                     IsBuyBoxWinner.Equals(input.IsBuyBoxWinner))
                ) &&
                (
                    IsFeaturedMerchant == input.IsFeaturedMerchant ||
                    (IsFeaturedMerchant != null &&
                     IsFeaturedMerchant.Equals(input.IsFeaturedMerchant))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferDetail {\n");
            sb.Append("  MyOffer: ").Append(MyOffer).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("  SubCondition: ").Append(SubCondition).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  ConditionNotes: ").Append(ConditionNotes).Append("\n");
            sb.Append("  SellerFeedbackRating: ").Append(SellerFeedbackRating).Append("\n");
            sb.Append("  ShippingTime: ").Append(ShippingTime).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  QuantityDiscountPrices: ").Append(QuantityDiscountPrices).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  ShipsFrom: ").Append(ShipsFrom).Append("\n");
            sb.Append("  IsFulfilledByAmazon: ").Append(IsFulfilledByAmazon).Append("\n");
            sb.Append("  PrimeInformation: ").Append(PrimeInformation).Append("\n");
            sb.Append("  IsBuyBoxWinner: ").Append(IsBuyBoxWinner).Append("\n");
            sb.Append("  IsFeaturedMerchant: ").Append(IsFeaturedMerchant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OfferDetail);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MyOffer != null)
                    hashCode = hashCode * 59 + MyOffer.GetHashCode();
                if (OfferType != null)
                    hashCode = hashCode * 59 + OfferType.GetHashCode();
                if (SubCondition != null)
                    hashCode = hashCode * 59 + SubCondition.GetHashCode();
                if (SellerId != null)
                    hashCode = hashCode * 59 + SellerId.GetHashCode();
                if (ConditionNotes != null)
                    hashCode = hashCode * 59 + ConditionNotes.GetHashCode();
                if (SellerFeedbackRating != null)
                    hashCode = hashCode * 59 + SellerFeedbackRating.GetHashCode();
                if (ShippingTime != null)
                    hashCode = hashCode * 59 + ShippingTime.GetHashCode();
                if (ListingPrice != null)
                    hashCode = hashCode * 59 + ListingPrice.GetHashCode();
                if (QuantityDiscountPrices != null)
                    hashCode = hashCode * 59 + QuantityDiscountPrices.GetHashCode();
                if (Points != null)
                    hashCode = hashCode * 59 + Points.GetHashCode();
                if (Shipping != null)
                    hashCode = hashCode * 59 + Shipping.GetHashCode();
                if (ShipsFrom != null)
                    hashCode = hashCode * 59 + ShipsFrom.GetHashCode();
                if (IsFulfilledByAmazon != null)
                    hashCode = hashCode * 59 + IsFulfilledByAmazon.GetHashCode();
                if (PrimeInformation != null)
                    hashCode = hashCode * 59 + PrimeInformation.GetHashCode();
                if (IsBuyBoxWinner != null)
                    hashCode = hashCode * 59 + IsBuyBoxWinner.GetHashCode();
                if (IsFeaturedMerchant != null)
                    hashCode = hashCode * 59 + IsFeaturedMerchant.GetHashCode();
                return hashCode;
            }
        }
    }
}