/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     The time range in which an item will likely be shipped once an order has been placed.
    /// </summary>
    [DataContract]
    public class DetailedShippingTimeType : IEquatable<DetailedShippingTimeType>, IValidatableObject
    {
        /// <summary>
        ///     Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known,
        ///     the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW,
        ///     FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </summary>
        /// <value>
        ///     Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If
        ///     known, the availableDate property indicates the date that the item will be available for shipping. Possible values:
        ///     NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityTypeEnum
        {
            /// <summary>
            ///     Enum NOW for value: NOW
            /// </summary>
            [EnumMember(Value = "NOW")] NOW = 1,

            /// <summary>
            ///     Enum FUTUREWITHOUTDATE for value: FUTURE_WITHOUT_DATE
            /// </summary>
            [EnumMember(Value = "FUTURE_WITHOUT_DATE")]
            FUTUREWITHOUTDATE = 2,

            /// <summary>
            ///     Enum FUTUREWITHDATE for value: FUTURE_WITH_DATE
            /// </summary>
            [EnumMember(Value = "FUTURE_WITH_DATE")]
            FUTUREWITHDATE = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DetailedShippingTimeType" /> class.
        /// </summary>
        /// <param name="MinimumHours">
        ///     The minimum time, in hours, that the item will likely be shipped after the order has been
        ///     placed..
        /// </param>
        /// <param name="MaximumHours">
        ///     The maximum time, in hours, that the item will likely be shipped after the order has been
        ///     placed..
        /// </param>
        /// <param name="AvailableDate">
        ///     The date when the item will be available for shipping. Only displayed for items that are
        ///     not currently available for shipping..
        /// </param>
        /// <param name="AvailabilityType">
        ///     Indicates whether the item is available for shipping now, or on a known or an unknown
        ///     date in the future. If known, the availableDate property indicates the date that the item will be available for
        ///     shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE..
        /// </param>
        public DetailedShippingTimeType(long? MinimumHours = default, long? MaximumHours = default,
            DateTime? AvailableDate = default, AvailabilityTypeEnum? AvailabilityType = default)
        {
            this.MinimumHours = MinimumHours;
            this.MaximumHours = MaximumHours;
            this.AvailableDate = AvailableDate;
            this.AvailabilityType = AvailabilityType;
        }

        /// <summary>
        ///     Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known,
        ///     the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW,
        ///     FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </summary>
        /// <value>
        ///     Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If
        ///     known, the availableDate property indicates the date that the item will be available for shipping. Possible values:
        ///     NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </value>
        [DataMember(Name = "availabilityType", EmitDefaultValue = false)]
        public AvailabilityTypeEnum? AvailabilityType { get; set; }

        /// <summary>
        ///     The minimum time, in hours, that the item will likely be shipped after the order has been placed.
        /// </summary>
        /// <value>The minimum time, in hours, that the item will likely be shipped after the order has been placed.</value>
        [DataMember(Name = "minimumHours", EmitDefaultValue = false)]
        public long? MinimumHours { get; set; }

        /// <summary>
        ///     The maximum time, in hours, that the item will likely be shipped after the order has been placed.
        /// </summary>
        /// <value>The maximum time, in hours, that the item will likely be shipped after the order has been placed.</value>
        [DataMember(Name = "maximumHours", EmitDefaultValue = false)]
        public long? MaximumHours { get; set; }

        /// <summary>
        ///     The date when the item will be available for shipping. Only displayed for items that are not currently available
        ///     for shipping.
        /// </summary>
        /// <value>
        ///     The date when the item will be available for shipping. Only displayed for items that are not currently available
        ///     for shipping.
        /// </value>
        [DataMember(Name = "availableDate", EmitDefaultValue = false)]
        public DateTime? AvailableDate { get; set; }

        /// <summary>
        ///     Returns true if DetailedShippingTimeType instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedShippingTimeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedShippingTimeType input)
        {
            if (input == null)
                return false;

            return
                (
                    MinimumHours == input.MinimumHours ||
                    (MinimumHours != null &&
                     MinimumHours.Equals(input.MinimumHours))
                ) &&
                (
                    MaximumHours == input.MaximumHours ||
                    (MaximumHours != null &&
                     MaximumHours.Equals(input.MaximumHours))
                ) &&
                (
                    AvailableDate == input.AvailableDate ||
                    (AvailableDate != null &&
                     AvailableDate.Equals(input.AvailableDate))
                ) &&
                (
                    AvailabilityType == input.AvailabilityType ||
                    (AvailabilityType != null &&
                     AvailabilityType.Equals(input.AvailabilityType))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedShippingTimeType {\n");
            sb.Append("  MinimumHours: ").Append(MinimumHours).Append("\n");
            sb.Append("  MaximumHours: ").Append(MaximumHours).Append("\n");
            sb.Append("  AvailableDate: ").Append(AvailableDate).Append("\n");
            sb.Append("  AvailabilityType: ").Append(AvailabilityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DetailedShippingTimeType);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MinimumHours != null)
                    hashCode = hashCode * 59 + MinimumHours.GetHashCode();
                if (MaximumHours != null)
                    hashCode = hashCode * 59 + MaximumHours.GetHashCode();
                if (AvailableDate != null)
                    hashCode = hashCode * 59 + AvailableDate.GetHashCode();
                if (AvailabilityType != null)
                    hashCode = hashCode * 59 + AvailabilityType.GetHashCode();
                return hashCode;
            }
        }
    }
}