/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     GetOffersResult
    /// </summary>
    [DataContract]
    public class GetOffersResult : IEquatable<GetOffersResult>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="GetOffersResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetOffersResult()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GetOffersResult" /> class.
        /// </summary>
        /// <param name="MarketplaceID">A marketplace identifier. (required).</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="SKU">The stock keeping unit (SKU) of the item..</param>
        /// <param name="ItemCondition">The condition of the item. (required).</param>
        /// <param name="Status">The status of the operation. (required).</param>
        /// <param name="Identifier">Metadata that identifies the item. (required).</param>
        /// <param name="Summary">Pricing information about the item. (required).</param>
        /// <param name="Offers">
        ///     A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20,
        ///     whichever is less. (required).
        /// </param>
        public GetOffersResult(string MarketplaceID = default, string ASIN = default, string SKU = default,
            ConditionType ItemCondition = default, string Status = default, ItemIdentifier Identifier = default,
            Summary Summary = default, OfferDetailList Offers = default)
        {
            // to ensure "MarketplaceID" is required (not null)
            if (MarketplaceID == null)
                throw new InvalidDataException(
                    "MarketplaceID is a required property for GetOffersResult and cannot be null");
            this.MarketplaceID = MarketplaceID;
            // to ensure "ItemCondition" is required (not null)
            if (ItemCondition == null)
                throw new InvalidDataException(
                    "ItemCondition is a required property for GetOffersResult and cannot be null");
            this.ItemCondition = ItemCondition;
            // to ensure "Status" is required (not null)
            if (Status == null)
                throw new InvalidDataException("Status is a required property for GetOffersResult and cannot be null");
            this.Status = Status;
            // to ensure "Identifier" is required (not null)
            if (Identifier == null)
                throw new InvalidDataException(
                    "Identifier is a required property for GetOffersResult and cannot be null");
            this.Identifier = Identifier;
            // to ensure "Summary" is required (not null)
            if (Summary == null)
                throw new InvalidDataException("Summary is a required property for GetOffersResult and cannot be null");
            this.Summary = Summary;
            // to ensure "Offers" is required (not null)
            if (Offers == null)
                throw new InvalidDataException("Offers is a required property for GetOffersResult and cannot be null");
            this.Offers = Offers;
            this.ASIN = ASIN;
            this.SKU = SKU;
        }

        /// <summary>
        ///     The condition of the item.
        /// </summary>
        /// <value>The condition of the item.</value>
        [DataMember(Name = "ItemCondition", EmitDefaultValue = false)]
        public ConditionType ItemCondition { get; set; }

        /// <summary>
        ///     A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name = "MarketplaceID", EmitDefaultValue = false)]
        public string MarketplaceID { get; set; }

        /// <summary>
        ///     The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        ///     The stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>The stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "SKU", EmitDefaultValue = false)]
        public string SKU { get; set; }


        /// <summary>
        ///     The status of the operation.
        /// </summary>
        /// <value>The status of the operation.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        ///     Metadata that identifies the item.
        /// </summary>
        /// <value>Metadata that identifies the item.</value>
        [DataMember(Name = "Identifier", EmitDefaultValue = false)]
        public ItemIdentifier Identifier { get; set; }

        /// <summary>
        ///     Pricing information about the item.
        /// </summary>
        /// <value>Pricing information about the item.</value>
        [DataMember(Name = "Summary", EmitDefaultValue = false)]
        public Summary Summary { get; set; }

        /// <summary>
        ///     A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is
        ///     less.
        /// </summary>
        /// <value>
        ///     A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is
        ///     less.
        /// </value>
        [DataMember(Name = "Offers", EmitDefaultValue = false)]
        public OfferDetailList Offers { get; set; }

        /// <summary>
        ///     Returns true if GetOffersResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOffersResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOffersResult input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceID == input.MarketplaceID ||
                    (MarketplaceID != null &&
                     MarketplaceID.Equals(input.MarketplaceID))
                ) &&
                (
                    ASIN == input.ASIN ||
                    (ASIN != null &&
                     ASIN.Equals(input.ASIN))
                ) &&
                (
                    SKU == input.SKU ||
                    (SKU != null &&
                     SKU.Equals(input.SKU))
                ) &&
                (
                    ItemCondition == input.ItemCondition ||
                    (ItemCondition != null &&
                     ItemCondition.Equals(input.ItemCondition))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    Identifier == input.Identifier ||
                    (Identifier != null &&
                     Identifier.Equals(input.Identifier))
                ) &&
                (
                    Summary == input.Summary ||
                    (Summary != null &&
                     Summary.Equals(input.Summary))
                ) &&
                (
                    Offers == input.Offers ||
                    (Offers != null &&
                     Offers.Equals(input.Offers))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOffersResult {\n");
            sb.Append("  MarketplaceID: ").Append(MarketplaceID).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  SKU: ").Append(SKU).Append("\n");
            sb.Append("  ItemCondition: ").Append(ItemCondition).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GetOffersResult);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceID != null)
                    hashCode = hashCode * 59 + MarketplaceID.GetHashCode();
                if (ASIN != null)
                    hashCode = hashCode * 59 + ASIN.GetHashCode();
                if (SKU != null)
                    hashCode = hashCode * 59 + SKU.GetHashCode();
                if (ItemCondition != null)
                    hashCode = hashCode * 59 + ItemCondition.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                if (Offers != null)
                    hashCode = hashCode * 59 + Offers.GetHashCode();
                return hashCode;
            }
        }
    }
}