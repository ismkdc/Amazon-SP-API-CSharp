/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     SalesRankType
    /// </summary>
    [DataContract]
    public class SalesRankType : IEquatable<SalesRankType>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SalesRankType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SalesRankType()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SalesRankType" /> class.
        /// </summary>
        /// <param name="ProductCategoryId"> Identifies the item category from which the sales rank is taken. (required).</param>
        /// <param name="Rank">The sales rank of the item within the item category. (required).</param>
        public SalesRankType(string ProductCategoryId = default, int? Rank = default)
        {
            // to ensure "ProductCategoryId" is required (not null)
            if (ProductCategoryId == null)
                throw new InvalidDataException(
                    "ProductCategoryId is a required property for SalesRankType and cannot be null");
            this.ProductCategoryId = ProductCategoryId;
            // to ensure "Rank" is required (not null)
            if (Rank == null)
                throw new InvalidDataException("Rank is a required property for SalesRankType and cannot be null");
            this.Rank = Rank;
        }

        /// <summary>
        ///     Identifies the item category from which the sales rank is taken.
        /// </summary>
        /// <value> Identifies the item category from which the sales rank is taken.</value>
        [DataMember(Name = "ProductCategoryId", EmitDefaultValue = false)]
        public string ProductCategoryId { get; set; }

        /// <summary>
        ///     The sales rank of the item within the item category.
        /// </summary>
        /// <value>The sales rank of the item within the item category.</value>
        [DataMember(Name = "Rank", EmitDefaultValue = false)]
        public int? Rank { get; set; }

        /// <summary>
        ///     Returns true if SalesRankType instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesRankType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesRankType input)
        {
            if (input == null)
                return false;

            return
                (
                    ProductCategoryId == input.ProductCategoryId ||
                    (ProductCategoryId != null &&
                     ProductCategoryId.Equals(input.ProductCategoryId))
                ) &&
                (
                    Rank == input.Rank ||
                    (Rank != null &&
                     Rank.Equals(input.Rank))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesRankType {\n");
            sb.Append("  ProductCategoryId: ").Append(ProductCategoryId).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SalesRankType);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ProductCategoryId != null)
                    hashCode = hashCode * 59 + ProductCategoryId.GetHashCode();
                if (Rank != null)
                    hashCode = hashCode * 59 + Rank.GetHashCode();
                return hashCode;
            }
        }
    }
}