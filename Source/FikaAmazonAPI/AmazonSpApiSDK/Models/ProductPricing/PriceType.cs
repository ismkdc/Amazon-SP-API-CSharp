/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     PriceType
    /// </summary>
    [DataContract]
    public class PriceType : IEquatable<PriceType>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PriceType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PriceType()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PriceType" /> class.
        /// </summary>
        /// <param name="LandedPrice">
        ///     The value calculated by adding ListingPrice + Shipping - Points. Note that if the landed
        ///     price is not returned, the listing price represents the product with the lowest landed price..
        /// </param>
        /// <param name="ListingPrice">The listing price of the item including any promotions that apply. (required).</param>
        /// <param name="Shipping">The shipping cost of the product. Note that the shipping cost is not always available..</param>
        /// <param name="Points">The number of Amazon Points offered with the purchase of an item, and their monetary value..</param>
        public PriceType(MoneyType LandedPrice = default, MoneyType ListingPrice = default,
            MoneyType Shipping = default, Points Points = default)
        {
            // to ensure "ListingPrice" is required (not null)
            if (ListingPrice == null)
                throw new InvalidDataException("ListingPrice is a required property for PriceType and cannot be null");
            this.ListingPrice = ListingPrice;
            this.LandedPrice = LandedPrice;
            this.Shipping = Shipping;
            this.Points = Points;
        }

        /// <summary>
        ///     The value calculated by adding ListingPrice + Shipping - Points. Note that if the landed price is not returned, the
        ///     listing price represents the product with the lowest landed price.
        /// </summary>
        /// <value>
        ///     The value calculated by adding ListingPrice + Shipping - Points. Note that if the landed price is not returned,
        ///     the listing price represents the product with the lowest landed price.
        /// </value>
        [DataMember(Name = "LandedPrice", EmitDefaultValue = false)]
        public MoneyType LandedPrice { get; set; }

        /// <summary>
        ///     The listing price of the item including any promotions that apply.
        /// </summary>
        /// <value>The listing price of the item including any promotions that apply.</value>
        [DataMember(Name = "ListingPrice", EmitDefaultValue = false)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        ///     The shipping cost of the product. Note that the shipping cost is not always available.
        /// </summary>
        /// <value>The shipping cost of the product. Note that the shipping cost is not always available.</value>
        [DataMember(Name = "Shipping", EmitDefaultValue = false)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        ///     The number of Amazon Points offered with the purchase of an item, and their monetary value.
        /// </summary>
        /// <value>The number of Amazon Points offered with the purchase of an item, and their monetary value.</value>
        [DataMember(Name = "Points", EmitDefaultValue = false)]
        public Points Points { get; set; }

        /// <summary>
        ///     Returns true if PriceType instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceType input)
        {
            if (input == null)
                return false;

            return
                (
                    LandedPrice == input.LandedPrice ||
                    (LandedPrice != null &&
                     LandedPrice.Equals(input.LandedPrice))
                ) &&
                (
                    ListingPrice == input.ListingPrice ||
                    (ListingPrice != null &&
                     ListingPrice.Equals(input.ListingPrice))
                ) &&
                (
                    Shipping == input.Shipping ||
                    (Shipping != null &&
                     Shipping.Equals(input.Shipping))
                ) &&
                (
                    Points == input.Points ||
                    (Points != null &&
                     Points.Equals(input.Points))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceType {\n");
            sb.Append("  LandedPrice: ").Append(LandedPrice).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PriceType);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LandedPrice != null)
                    hashCode = hashCode * 59 + LandedPrice.GetHashCode();
                if (ListingPrice != null)
                    hashCode = hashCode * 59 + ListingPrice.GetHashCode();
                if (Shipping != null)
                    hashCode = hashCode * 59 + Shipping.GetHashCode();
                if (Points != null)
                    hashCode = hashCode * 59 + Points.GetHashCode();
                return hashCode;
            }
        }
    }
}