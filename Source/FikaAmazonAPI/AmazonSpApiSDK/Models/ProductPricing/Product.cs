/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     An item.
    /// </summary>
    [DataContract]
    public class Product : IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Product()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="Identifiers">Identifiers (required).</param>
        /// <param name="AttributeSets">AttributeSets.</param>
        /// <param name="Relationships">Relationships.</param>
        /// <param name="CompetitivePricing">CompetitivePricing.</param>
        /// <param name="SalesRankings">SalesRankings.</param>
        /// <param name="Offers">Offers.</param>
        public Product(IdentifierType Identifiers = default, AttributeSetList AttributeSets = default,
            RelationshipList Relationships = default, CompetitivePricingType CompetitivePricing = default,
            SalesRankList SalesRankings = default, OffersList Offers = default)
        {
            // to ensure "Identifiers" is required (not null)
            if (Identifiers == null)
                throw new InvalidDataException("Identifiers is a required property for Product and cannot be null");
            this.Identifiers = Identifiers;
            this.AttributeSets = AttributeSets;
            this.Relationships = Relationships;
            this.CompetitivePricing = CompetitivePricing;
            this.SalesRankings = SalesRankings;
            this.Offers = Offers;
        }

        /// <summary>
        ///     Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "Identifiers", EmitDefaultValue = false)]
        public IdentifierType Identifiers { get; set; }

        /// <summary>
        ///     Gets or Sets AttributeSets
        /// </summary>
        [DataMember(Name = "AttributeSets", EmitDefaultValue = false)]
        public AttributeSetList AttributeSets { get; set; }

        /// <summary>
        ///     Gets or Sets Relationships
        /// </summary>
        [DataMember(Name = "Relationships", EmitDefaultValue = false)]
        public RelationshipList Relationships { get; set; }

        /// <summary>
        ///     Gets or Sets CompetitivePricing
        /// </summary>
        [DataMember(Name = "CompetitivePricing", EmitDefaultValue = false)]
        public CompetitivePricingType CompetitivePricing { get; set; }

        /// <summary>
        ///     Gets or Sets SalesRankings
        /// </summary>
        [DataMember(Name = "SalesRankings", EmitDefaultValue = false)]
        public SalesRankList SalesRankings { get; set; }

        /// <summary>
        ///     Gets or Sets Offers
        /// </summary>
        [DataMember(Name = "Offers", EmitDefaultValue = false)]
        public OffersList Offers { get; set; }

        /// <summary>
        ///     Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return
                (
                    Identifiers == input.Identifiers ||
                    (Identifiers != null &&
                     Identifiers.Equals(input.Identifiers))
                ) &&
                (
                    AttributeSets == input.AttributeSets ||
                    (AttributeSets != null &&
                     AttributeSets.Equals(input.AttributeSets))
                ) &&
                (
                    Relationships == input.Relationships ||
                    (Relationships != null &&
                     Relationships.Equals(input.Relationships))
                ) &&
                (
                    CompetitivePricing == input.CompetitivePricing ||
                    (CompetitivePricing != null &&
                     CompetitivePricing.Equals(input.CompetitivePricing))
                ) &&
                (
                    SalesRankings == input.SalesRankings ||
                    (SalesRankings != null &&
                     SalesRankings.Equals(input.SalesRankings))
                ) &&
                (
                    Offers == input.Offers ||
                    (Offers != null &&
                     Offers.Equals(input.Offers))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  AttributeSets: ").Append(AttributeSets).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  CompetitivePricing: ").Append(CompetitivePricing).Append("\n");
            sb.Append("  SalesRankings: ").Append(SalesRankings).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Product);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Identifiers != null)
                    hashCode = hashCode * 59 + Identifiers.GetHashCode();
                if (AttributeSets != null)
                    hashCode = hashCode * 59 + AttributeSets.GetHashCode();
                if (Relationships != null)
                    hashCode = hashCode * 59 + Relationships.GetHashCode();
                if (CompetitivePricing != null)
                    hashCode = hashCode * 59 + CompetitivePricing.GetHashCode();
                if (SalesRankings != null)
                    hashCode = hashCode * 59 + SalesRankings.GetHashCode();
                if (Offers != null)
                    hashCode = hashCode * 59 + Offers.GetHashCode();
                return hashCode;
            }
        }
    }
}