/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    ///     Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the
    ///     SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
    /// </summary>
    [DataContract]
    public class Summary : IEquatable<Summary>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Summary()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        /// <param name="totalOfferCount">The number of unique offers contained in NumberOfOffers. (required).</param>
        /// <param name="numberOfOffers">
        ///     A list that contains the total number of offers for the item for the given conditions and
        ///     fulfillment channels..
        /// </param>
        /// <param name="lowestPrices">A list of the lowest prices for the item..</param>
        /// <param name="buyBoxPrices">A list of item prices..</param>
        /// <param name="listPrice">The list price of the item as suggested by the manufacturer..</param>
        /// <param name="competitivePriceThreshold">
        ///     This price is based on competitive prices from other retailers (excluding other
        ///     Amazon sellers). The offer may be ineligible for the Buy Box if the seller&#39;s price + shipping (minus Amazon
        ///     Points) is greater than this competitive price..
        /// </param>
        /// <param name="suggestedLowerPricePlusShipping">
        ///     The suggested lower price of the item, including shipping and Amazon
        ///     Points. The suggested lower price is based on a range of factors, including historical selling prices, recent Buy
        ///     Box-eligible prices, and input from customers for your products..
        /// </param>
        /// <param name="salesRankings">A list that contains the sales rank of the item in the given product categories..</param>
        /// <param name="buyBoxEligibleOffers">
        ///     A list that contains the total number of offers that are eligible for the Buy Box
        ///     for the given conditions and fulfillment channels..
        /// </param>
        /// <param name="offersAvailableTime">
        ///     When the status is ActiveButTooSoonForProcessing, this is the time when the offers
        ///     will be available for processing..
        /// </param>
        public Summary(int? totalOfferCount = default, NumberOfOffers numberOfOffers = default,
            LowestPrices lowestPrices = default, BuyBoxPrices buyBoxPrices = default, MoneyType listPrice = default,
            MoneyType competitivePriceThreshold = default, MoneyType suggestedLowerPricePlusShipping = default,
            SalesRankList salesRankings = default, BuyBoxEligibleOffers buyBoxEligibleOffers = default,
            DateTime? offersAvailableTime = default)
        {
            // to ensure "totalOfferCount" is required (not null)
            if (totalOfferCount == null)
                throw new InvalidDataException("totalOfferCount is a required property for Summary and cannot be null");
            TotalOfferCount = totalOfferCount;
            NumberOfOffers = numberOfOffers;
            LowestPrices = lowestPrices;
            BuyBoxPrices = buyBoxPrices;
            ListPrice = listPrice;
            CompetitivePriceThreshold = competitivePriceThreshold;
            SuggestedLowerPricePlusShipping = suggestedLowerPricePlusShipping;
            SalesRankings = salesRankings;
            BuyBoxEligibleOffers = buyBoxEligibleOffers;
            OffersAvailableTime = offersAvailableTime;
        }

        /// <summary>
        ///     The number of unique offers contained in NumberOfOffers.
        /// </summary>
        /// <value>The number of unique offers contained in NumberOfOffers.</value>
        [DataMember(Name = "TotalOfferCount", EmitDefaultValue = false)]
        public int? TotalOfferCount { get; set; }

        /// <summary>
        ///     A list that contains the total number of offers for the item for the given conditions and fulfillment channels.
        /// </summary>
        /// <value>A list that contains the total number of offers for the item for the given conditions and fulfillment channels.</value>
        [DataMember(Name = "NumberOfOffers", EmitDefaultValue = false)]
        public NumberOfOffers NumberOfOffers { get; set; }

        /// <summary>
        ///     A list of the lowest prices for the item.
        /// </summary>
        /// <value>A list of the lowest prices for the item.</value>
        [DataMember(Name = "LowestPrices", EmitDefaultValue = false)]
        public LowestPrices LowestPrices { get; set; }

        /// <summary>
        ///     A list of item prices.
        /// </summary>
        /// <value>A list of item prices.</value>
        [DataMember(Name = "BuyBoxPrices", EmitDefaultValue = false)]
        public BuyBoxPrices BuyBoxPrices { get; set; }

        /// <summary>
        ///     The list price of the item as suggested by the manufacturer.
        /// </summary>
        /// <value>The list price of the item as suggested by the manufacturer.</value>
        [DataMember(Name = "ListPrice", EmitDefaultValue = false)]
        public MoneyType ListPrice { get; set; }

        /// <summary>
        ///     This price is based on competitive prices from other retailers (excluding other Amazon sellers). The offer may be
        ///     ineligible for the Buy Box if the seller&#39;s price + shipping (minus Amazon Points) is greater than this
        ///     competitive price.
        /// </summary>
        /// <value>
        ///     This price is based on competitive prices from other retailers (excluding other Amazon sellers). The offer may
        ///     be ineligible for the Buy Box if the seller&#39;s price + shipping (minus Amazon Points) is greater than this
        ///     competitive price.
        /// </value>
        [DataMember(Name = "CompetitivePriceThreshold", EmitDefaultValue = false)]
        public MoneyType CompetitivePriceThreshold { get; set; }

        /// <summary>
        ///     The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based on
        ///     a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from customers
        ///     for your products.
        /// </summary>
        /// <value>
        ///     The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based
        ///     on a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from
        ///     customers for your products.
        /// </value>
        [DataMember(Name = "SuggestedLowerPricePlusShipping", EmitDefaultValue = false)]
        public MoneyType SuggestedLowerPricePlusShipping { get; set; }

        /// <summary>
        ///     A list that contains the sales rank of the item in the given product categories.
        /// </summary>
        /// <value>A list that contains the sales rank of the item in the given product categories.</value>
        [DataMember(Name = "SalesRankings", EmitDefaultValue = false)]
        public SalesRankList SalesRankings { get; set; }

        /// <summary>
        ///     A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and
        ///     fulfillment channels.
        /// </summary>
        /// <value>
        ///     A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and
        ///     fulfillment channels.
        /// </value>
        [DataMember(Name = "BuyBoxEligibleOffers", EmitDefaultValue = false)]
        public BuyBoxEligibleOffers BuyBoxEligibleOffers { get; set; }

        /// <summary>
        ///     When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for
        ///     processing.
        /// </summary>
        /// <value>
        ///     When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for
        ///     processing.
        /// </value>
        [DataMember(Name = "OffersAvailableTime", EmitDefaultValue = false)]
        public DateTime? OffersAvailableTime { get; set; }

        /// <summary>
        ///     Returns true if Summary instances are equal
        /// </summary>
        /// <param name="input">Instance of Summary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Summary input)
        {
            if (input == null)
                return false;

            return
                (
                    TotalOfferCount == input.TotalOfferCount ||
                    (TotalOfferCount != null &&
                     TotalOfferCount.Equals(input.TotalOfferCount))
                ) &&
                (
                    NumberOfOffers == input.NumberOfOffers ||
                    (NumberOfOffers != null &&
                     NumberOfOffers.Equals(input.NumberOfOffers))
                ) &&
                (
                    LowestPrices == input.LowestPrices ||
                    (LowestPrices != null &&
                     LowestPrices.Equals(input.LowestPrices))
                ) &&
                (
                    BuyBoxPrices == input.BuyBoxPrices ||
                    (BuyBoxPrices != null &&
                     BuyBoxPrices.Equals(input.BuyBoxPrices))
                ) &&
                (
                    ListPrice == input.ListPrice ||
                    (ListPrice != null &&
                     ListPrice.Equals(input.ListPrice))
                ) &&
                (
                    CompetitivePriceThreshold == input.CompetitivePriceThreshold ||
                    (CompetitivePriceThreshold != null &&
                     CompetitivePriceThreshold.Equals(input.CompetitivePriceThreshold))
                ) &&
                (
                    SuggestedLowerPricePlusShipping == input.SuggestedLowerPricePlusShipping ||
                    (SuggestedLowerPricePlusShipping != null &&
                     SuggestedLowerPricePlusShipping.Equals(input.SuggestedLowerPricePlusShipping))
                ) &&
                (
                    SalesRankings == input.SalesRankings ||
                    (SalesRankings != null &&
                     SalesRankings.Equals(input.SalesRankings))
                ) &&
                (
                    BuyBoxEligibleOffers == input.BuyBoxEligibleOffers ||
                    (BuyBoxEligibleOffers != null &&
                     BuyBoxEligibleOffers.Equals(input.BuyBoxEligibleOffers))
                ) &&
                (
                    OffersAvailableTime == input.OffersAvailableTime ||
                    (OffersAvailableTime != null &&
                     OffersAvailableTime.Equals(input.OffersAvailableTime))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Summary {\n");
            sb.Append("  TotalOfferCount: ").Append(TotalOfferCount).Append("\n");
            sb.Append("  NumberOfOffers: ").Append(NumberOfOffers).Append("\n");
            sb.Append("  LowestPrices: ").Append(LowestPrices).Append("\n");
            sb.Append("  BuyBoxPrices: ").Append(BuyBoxPrices).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  CompetitivePriceThreshold: ").Append(CompetitivePriceThreshold).Append("\n");
            sb.Append("  SuggestedLowerPricePlusShipping: ").Append(SuggestedLowerPricePlusShipping).Append("\n");
            sb.Append("  SalesRankings: ").Append(SalesRankings).Append("\n");
            sb.Append("  BuyBoxEligibleOffers: ").Append(BuyBoxEligibleOffers).Append("\n");
            sb.Append("  OffersAvailableTime: ").Append(OffersAvailableTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Summary);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (TotalOfferCount != null)
                    hashCode = hashCode * 59 + TotalOfferCount.GetHashCode();
                if (NumberOfOffers != null)
                    hashCode = hashCode * 59 + NumberOfOffers.GetHashCode();
                if (LowestPrices != null)
                    hashCode = hashCode * 59 + LowestPrices.GetHashCode();
                if (BuyBoxPrices != null)
                    hashCode = hashCode * 59 + BuyBoxPrices.GetHashCode();
                if (ListPrice != null)
                    hashCode = hashCode * 59 + ListPrice.GetHashCode();
                if (CompetitivePriceThreshold != null)
                    hashCode = hashCode * 59 + CompetitivePriceThreshold.GetHashCode();
                if (SuggestedLowerPricePlusShipping != null)
                    hashCode = hashCode * 59 + SuggestedLowerPricePlusShipping.GetHashCode();
                if (SalesRankings != null)
                    hashCode = hashCode * 59 + SalesRankings.GetHashCode();
                if (BuyBoxEligibleOffers != null)
                    hashCode = hashCode * 59 + BuyBoxEligibleOffers.GetHashCode();
                if (OffersAvailableTime != null)
                    hashCode = hashCode * 59 + OffersAvailableTime.GetHashCode();
                return hashCode;
            }
        }
    }
}