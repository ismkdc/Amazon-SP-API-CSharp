/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    ///     Specific variations of the item.
    /// </summary>
    [DataContract]
    public class RelationshipType : IEquatable<RelationshipType>, IValidatableObject
    {
        public RelationshipType()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RelationshipType" /> class.
        /// </summary>
        /// <param name="Color">The color variation of the item..</param>
        /// <param name="Edition">The edition variation of the item..</param>
        /// <param name="Flavor">The flavor variation of the item..</param>
        /// <param name="GemType">The gem type variations of the item..</param>
        /// <param name="GolfClubFlex">The golf club flex variation of an item..</param>
        /// <param name="HandOrientation">The hand orientation variation of an item..</param>
        /// <param name="HardwarePlatform">The hardware platform variation of an item..</param>
        /// <param name="MaterialType">The material type variations of an item..</param>
        /// <param name="MetalType">The metal type variation of an item..</param>
        /// <param name="Model">The model variation of an item..</param>
        /// <param name="OperatingSystem">The operating system variations of an item..</param>
        /// <param name="ProductTypeSubcategory">The product type subcategory variation of an item..</param>
        /// <param name="RingSize">The ring size variation of an item..</param>
        /// <param name="ShaftMaterial">The shaft material variation of an item..</param>
        /// <param name="Scent">The scent variation of an item..</param>
        /// <param name="Size">The size variation of an item..</param>
        /// <param name="SizePerPearl">The size per pearl variation of an item..</param>
        /// <param name="GolfClubLoft">The golf club loft variation of an item..</param>
        /// <param name="TotalDiamondWeight">The total diamond weight variation of an item..</param>
        /// <param name="TotalGemWeight">The total gem weight variation of an item..</param>
        /// <param name="PackageQuantity">The package quantity variation of an item..</param>
        /// <param name="ItemDimensions">The item dimensions relationship of an item..</param>
        /// <param name="Identifiers">The item Identifiers relationship of an item..</param>
        public RelationshipType(string Color = default, string Edition = default, string Flavor = default,
            List<string> GemType = default, string GolfClubFlex = default, string HandOrientation = default,
            string HardwarePlatform = default, List<string> MaterialType = default, string MetalType = default,
            string Model = default, List<string> OperatingSystem = default, string ProductTypeSubcategory = default,
            string RingSize = default, string ShaftMaterial = default, string Scent = default, string Size = default,
            string SizePerPearl = default, DecimalWithUnits GolfClubLoft = default,
            DecimalWithUnits TotalDiamondWeight = default, DecimalWithUnits TotalGemWeight = default,
            int? PackageQuantity = default, DimensionType ItemDimensions = default,
            IdentifierType Identifiers = default)
        {
            this.Color = Color;
            this.Edition = Edition;
            this.Flavor = Flavor;
            this.GemType = GemType;
            this.GolfClubFlex = GolfClubFlex;
            this.HandOrientation = HandOrientation;
            this.HardwarePlatform = HardwarePlatform;
            this.MaterialType = MaterialType;
            this.MetalType = MetalType;
            this.Model = Model;
            this.OperatingSystem = OperatingSystem;
            this.ProductTypeSubcategory = ProductTypeSubcategory;
            this.RingSize = RingSize;
            this.ShaftMaterial = ShaftMaterial;
            this.Scent = Scent;
            this.Size = Size;
            this.SizePerPearl = SizePerPearl;
            this.GolfClubLoft = GolfClubLoft;
            this.TotalDiamondWeight = TotalDiamondWeight;
            this.TotalGemWeight = TotalGemWeight;
            this.PackageQuantity = PackageQuantity;
            this.ItemDimensions = ItemDimensions;
            this.Identifiers = Identifiers;
        }

        /// <summary>
        ///     The color variation of the item.
        /// </summary>
        /// <value>The color variation of the item.</value>
        [DataMember(Name = "Color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        ///     The edition variation of the item.
        /// </summary>
        /// <value>The edition variation of the item.</value>
        [DataMember(Name = "Edition", EmitDefaultValue = false)]
        public string Edition { get; set; }

        /// <summary>
        ///     The flavor variation of the item.
        /// </summary>
        /// <value>The flavor variation of the item.</value>
        [DataMember(Name = "Flavor", EmitDefaultValue = false)]
        public string Flavor { get; set; }

        /// <summary>
        ///     The gem type variations of the item.
        /// </summary>
        /// <value>The gem type variations of the item.</value>
        [DataMember(Name = "GemType", EmitDefaultValue = false)]
        public List<string> GemType { get; set; }

        /// <summary>
        ///     The golf club flex variation of an item.
        /// </summary>
        /// <value>The golf club flex variation of an item.</value>
        [DataMember(Name = "GolfClubFlex", EmitDefaultValue = false)]
        public string GolfClubFlex { get; set; }

        /// <summary>
        ///     The hand orientation variation of an item.
        /// </summary>
        /// <value>The hand orientation variation of an item.</value>
        [DataMember(Name = "HandOrientation", EmitDefaultValue = false)]
        public string HandOrientation { get; set; }

        /// <summary>
        ///     The hardware platform variation of an item.
        /// </summary>
        /// <value>The hardware platform variation of an item.</value>
        [DataMember(Name = "HardwarePlatform", EmitDefaultValue = false)]
        public string HardwarePlatform { get; set; }

        /// <summary>
        ///     The material type variations of an item.
        /// </summary>
        /// <value>The material type variations of an item.</value>
        [DataMember(Name = "MaterialType", EmitDefaultValue = false)]
        public List<string> MaterialType { get; set; }

        /// <summary>
        ///     The metal type variation of an item.
        /// </summary>
        /// <value>The metal type variation of an item.</value>
        [DataMember(Name = "MetalType", EmitDefaultValue = false)]
        public string MetalType { get; set; }

        /// <summary>
        ///     The model variation of an item.
        /// </summary>
        /// <value>The model variation of an item.</value>
        [DataMember(Name = "Model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        ///     The operating system variations of an item.
        /// </summary>
        /// <value>The operating system variations of an item.</value>
        [DataMember(Name = "OperatingSystem", EmitDefaultValue = false)]
        public List<string> OperatingSystem { get; set; }

        /// <summary>
        ///     The product type subcategory variation of an item.
        /// </summary>
        /// <value>The product type subcategory variation of an item.</value>
        [DataMember(Name = "ProductTypeSubcategory", EmitDefaultValue = false)]
        public string ProductTypeSubcategory { get; set; }

        /// <summary>
        ///     The ring size variation of an item.
        /// </summary>
        /// <value>The ring size variation of an item.</value>
        [DataMember(Name = "RingSize", EmitDefaultValue = false)]
        public string RingSize { get; set; }

        /// <summary>
        ///     The shaft material variation of an item.
        /// </summary>
        /// <value>The shaft material variation of an item.</value>
        [DataMember(Name = "ShaftMaterial", EmitDefaultValue = false)]
        public string ShaftMaterial { get; set; }

        /// <summary>
        ///     The scent variation of an item.
        /// </summary>
        /// <value>The scent variation of an item.</value>
        [DataMember(Name = "Scent", EmitDefaultValue = false)]
        public string Scent { get; set; }

        /// <summary>
        ///     The size variation of an item.
        /// </summary>
        /// <value>The size variation of an item.</value>
        [DataMember(Name = "Size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        ///     The size per pearl variation of an item.
        /// </summary>
        /// <value>The size per pearl variation of an item.</value>
        [DataMember(Name = "SizePerPearl", EmitDefaultValue = false)]
        public string SizePerPearl { get; set; }

        /// <summary>
        ///     The golf club loft variation of an item.
        /// </summary>
        /// <value>The golf club loft variation of an item.</value>
        [DataMember(Name = "GolfClubLoft", EmitDefaultValue = false)]
        public DecimalWithUnits GolfClubLoft { get; set; }

        /// <summary>
        ///     The total diamond weight variation of an item.
        /// </summary>
        /// <value>The total diamond weight variation of an item.</value>
        [DataMember(Name = "TotalDiamondWeight", EmitDefaultValue = false)]
        public DecimalWithUnits TotalDiamondWeight { get; set; }

        /// <summary>
        ///     The total gem weight variation of an item.
        /// </summary>
        /// <value>The total gem weight variation of an item.</value>
        [DataMember(Name = "TotalGemWeight", EmitDefaultValue = false)]
        public DecimalWithUnits TotalGemWeight { get; set; }

        /// <summary>
        ///     The package quantity variation of an item.
        /// </summary>
        /// <value>The package quantity variation of an item.</value>
        [DataMember(Name = "PackageQuantity", EmitDefaultValue = false)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        ///     The item dimensions relationship of an item.
        /// </summary>
        /// <value>The item dimensions relationship of an item.</value>
        [DataMember(Name = "ItemDimensions", EmitDefaultValue = false)]
        public DimensionType ItemDimensions { get; set; }

        /// <summary>
        ///     The identifiers that uniquely identify the item.
        /// </summary>
        /// <value>The identifiers that uniquely identify the item.</value>
        [DataMember(Name = "Identifiers", EmitDefaultValue = false)]
        public IdentifierType Identifiers { get; set; }

        /// <summary>
        ///     Returns true if RelationshipType instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationshipType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationshipType input)
        {
            if (input == null)
                return false;

            return
                (
                    Color == input.Color ||
                    (Color != null &&
                     Color.Equals(input.Color))
                ) &&
                (
                    Edition == input.Edition ||
                    (Edition != null &&
                     Edition.Equals(input.Edition))
                ) &&
                (
                    Flavor == input.Flavor ||
                    (Flavor != null &&
                     Flavor.Equals(input.Flavor))
                ) &&
                (
                    GemType == input.GemType ||
                    (GemType != null &&
                     GemType.SequenceEqual(input.GemType))
                ) &&
                (
                    GolfClubFlex == input.GolfClubFlex ||
                    (GolfClubFlex != null &&
                     GolfClubFlex.Equals(input.GolfClubFlex))
                ) &&
                (
                    HandOrientation == input.HandOrientation ||
                    (HandOrientation != null &&
                     HandOrientation.Equals(input.HandOrientation))
                ) &&
                (
                    HardwarePlatform == input.HardwarePlatform ||
                    (HardwarePlatform != null &&
                     HardwarePlatform.Equals(input.HardwarePlatform))
                ) &&
                (
                    MaterialType == input.MaterialType ||
                    (MaterialType != null &&
                     MaterialType.SequenceEqual(input.MaterialType))
                ) &&
                (
                    MetalType == input.MetalType ||
                    (MetalType != null &&
                     MetalType.Equals(input.MetalType))
                ) &&
                (
                    Model == input.Model ||
                    (Model != null &&
                     Model.Equals(input.Model))
                ) &&
                (
                    OperatingSystem == input.OperatingSystem ||
                    (OperatingSystem != null &&
                     OperatingSystem.SequenceEqual(input.OperatingSystem))
                ) &&
                (
                    ProductTypeSubcategory == input.ProductTypeSubcategory ||
                    (ProductTypeSubcategory != null &&
                     ProductTypeSubcategory.Equals(input.ProductTypeSubcategory))
                ) &&
                (
                    RingSize == input.RingSize ||
                    (RingSize != null &&
                     RingSize.Equals(input.RingSize))
                ) &&
                (
                    ShaftMaterial == input.ShaftMaterial ||
                    (ShaftMaterial != null &&
                     ShaftMaterial.Equals(input.ShaftMaterial))
                ) &&
                (
                    Scent == input.Scent ||
                    (Scent != null &&
                     Scent.Equals(input.Scent))
                ) &&
                (
                    Size == input.Size ||
                    (Size != null &&
                     Size.Equals(input.Size))
                ) &&
                (
                    SizePerPearl == input.SizePerPearl ||
                    (SizePerPearl != null &&
                     SizePerPearl.Equals(input.SizePerPearl))
                ) &&
                (
                    GolfClubLoft == input.GolfClubLoft ||
                    (GolfClubLoft != null &&
                     GolfClubLoft.Equals(input.GolfClubLoft))
                ) &&
                (
                    TotalDiamondWeight == input.TotalDiamondWeight ||
                    (TotalDiamondWeight != null &&
                     TotalDiamondWeight.Equals(input.TotalDiamondWeight))
                ) &&
                (
                    TotalGemWeight == input.TotalGemWeight ||
                    (TotalGemWeight != null &&
                     TotalGemWeight.Equals(input.TotalGemWeight))
                ) &&
                (
                    PackageQuantity == input.PackageQuantity ||
                    (PackageQuantity != null &&
                     PackageQuantity.Equals(input.PackageQuantity))
                ) &&
                (
                    ItemDimensions == input.ItemDimensions ||
                    (ItemDimensions != null &&
                     ItemDimensions.Equals(input.ItemDimensions))
                ) &&
                (
                    Identifiers == input.Identifiers ||
                    (Identifiers != null &&
                     Identifiers.Equals(input.Identifiers))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelationshipType {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Flavor: ").Append(Flavor).Append("\n");
            sb.Append("  GemType: ").Append(GemType).Append("\n");
            sb.Append("  GolfClubFlex: ").Append(GolfClubFlex).Append("\n");
            sb.Append("  HandOrientation: ").Append(HandOrientation).Append("\n");
            sb.Append("  HardwarePlatform: ").Append(HardwarePlatform).Append("\n");
            sb.Append("  MaterialType: ").Append(MaterialType).Append("\n");
            sb.Append("  MetalType: ").Append(MetalType).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  ProductTypeSubcategory: ").Append(ProductTypeSubcategory).Append("\n");
            sb.Append("  RingSize: ").Append(RingSize).Append("\n");
            sb.Append("  ShaftMaterial: ").Append(ShaftMaterial).Append("\n");
            sb.Append("  Scent: ").Append(Scent).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizePerPearl: ").Append(SizePerPearl).Append("\n");
            sb.Append("  GolfClubLoft: ").Append(GolfClubLoft).Append("\n");
            sb.Append("  TotalDiamondWeight: ").Append(TotalDiamondWeight).Append("\n");
            sb.Append("  TotalGemWeight: ").Append(TotalGemWeight).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  ItemDimensions: ").Append(ItemDimensions).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RelationshipType);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                if (Edition != null)
                    hashCode = hashCode * 59 + Edition.GetHashCode();
                if (Flavor != null)
                    hashCode = hashCode * 59 + Flavor.GetHashCode();
                if (GemType != null)
                    hashCode = hashCode * 59 + GemType.GetHashCode();
                if (GolfClubFlex != null)
                    hashCode = hashCode * 59 + GolfClubFlex.GetHashCode();
                if (HandOrientation != null)
                    hashCode = hashCode * 59 + HandOrientation.GetHashCode();
                if (HardwarePlatform != null)
                    hashCode = hashCode * 59 + HardwarePlatform.GetHashCode();
                if (MaterialType != null)
                    hashCode = hashCode * 59 + MaterialType.GetHashCode();
                if (MetalType != null)
                    hashCode = hashCode * 59 + MetalType.GetHashCode();
                if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                if (OperatingSystem != null)
                    hashCode = hashCode * 59 + OperatingSystem.GetHashCode();
                if (ProductTypeSubcategory != null)
                    hashCode = hashCode * 59 + ProductTypeSubcategory.GetHashCode();
                if (RingSize != null)
                    hashCode = hashCode * 59 + RingSize.GetHashCode();
                if (ShaftMaterial != null)
                    hashCode = hashCode * 59 + ShaftMaterial.GetHashCode();
                if (Scent != null)
                    hashCode = hashCode * 59 + Scent.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (SizePerPearl != null)
                    hashCode = hashCode * 59 + SizePerPearl.GetHashCode();
                if (GolfClubLoft != null)
                    hashCode = hashCode * 59 + GolfClubLoft.GetHashCode();
                if (TotalDiamondWeight != null)
                    hashCode = hashCode * 59 + TotalDiamondWeight.GetHashCode();
                if (TotalGemWeight != null)
                    hashCode = hashCode * 59 + TotalGemWeight.GetHashCode();
                if (PackageQuantity != null)
                    hashCode = hashCode * 59 + PackageQuantity.GetHashCode();
                if (ItemDimensions != null)
                    hashCode = hashCode * 59 + ItemDimensions.GetHashCode();
                if (Identifiers != null)
                    hashCode = hashCode * 59 + Identifiers.GetHashCode();
                return hashCode;
            }
        }
    }
}