/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    ///     An item in the Amazon catalog.
    /// </summary>
    [DataContract]
    public class Item : IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Item()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="Identifiers">The identifiers that uniquely identify the item. (required).</param>
        /// <param name="AttributeSets">A list of attributes of the item..</param>
        /// <param name="Relationships">A list of variation relationship information for the item..</param>
        /// <param name="SalesRankings">A list of sales rank information for the item by category..</param>
        public Item(IdentifierType Identifiers = default, AttributeSetList AttributeSets = default,
            RelationshipList Relationships = default, SalesRankList SalesRankings = default)
        {
            // to ensure "Identifiers" is required (not null)
            if (Identifiers == null)
                throw new InvalidDataException("Identifiers is a required property for Item and cannot be null");
            this.Identifiers = Identifiers;
            this.AttributeSets = AttributeSets;
            this.Relationships = Relationships;
            this.SalesRankings = SalesRankings;
        }

        /// <summary>
        ///     The identifiers that uniquely identify the item.
        /// </summary>
        /// <value>The identifiers that uniquely identify the item.</value>
        [DataMember(Name = "Identifiers", EmitDefaultValue = false)]
        public IdentifierType Identifiers { get; set; }

        /// <summary>
        ///     A list of attributes of the item.
        /// </summary>
        /// <value>A list of attributes of the item.</value>
        [DataMember(Name = "AttributeSets", EmitDefaultValue = false)]
        public AttributeSetList AttributeSets { get; set; }

        /// <summary>
        ///     A list of variation relationship information for the item.
        /// </summary>
        /// <value>A list of variation relationship information for the item.</value>
        [DataMember(Name = "Relationships", EmitDefaultValue = false)]
        public RelationshipList Relationships { get; set; }

        /// <summary>
        ///     A list of sales rank information for the item by category.
        /// </summary>
        /// <value>A list of sales rank information for the item by category.</value>
        [DataMember(Name = "SalesRankings", EmitDefaultValue = false)]
        public SalesRankList SalesRankings { get; set; }

        /// <summary>
        ///     Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return
                (
                    Identifiers == input.Identifiers ||
                    (Identifiers != null &&
                     Identifiers.Equals(input.Identifiers))
                ) &&
                (
                    AttributeSets == input.AttributeSets ||
                    (AttributeSets != null &&
                     AttributeSets.Equals(input.AttributeSets))
                ) &&
                (
                    Relationships == input.Relationships ||
                    (Relationships != null &&
                     Relationships.Equals(input.Relationships))
                ) &&
                (
                    SalesRankings == input.SalesRankings ||
                    (SalesRankings != null &&
                     SalesRankings.Equals(input.SalesRankings))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  AttributeSets: ").Append(AttributeSets).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  SalesRankings: ").Append(SalesRankings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Item);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Identifiers != null)
                    hashCode = hashCode * 59 + Identifiers.GetHashCode();
                if (AttributeSets != null)
                    hashCode = hashCode * 59 + AttributeSets.GetHashCode();
                if (Relationships != null)
                    hashCode = hashCode * 59 + Relationships.GetHashCode();
                if (SalesRankings != null)
                    hashCode = hashCode * 59 + SalesRankings.GetHashCode();
                return hashCode;
            }
        }
    }
}