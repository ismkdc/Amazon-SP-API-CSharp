/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    ///     The creator type attribute of an item.
    /// </summary>
    [DataContract]
    public class CreatorType : IEquatable<CreatorType>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CreatorType" /> class.
        /// </summary>
        /// <param name="Value">The value of the attribute..</param>
        /// <param name="Role">The role of the value..</param>
        public CreatorType(string Value = default, string Role = default)
        {
            this.Value = Value;
            this.Role = Role;
        }

        /// <summary>
        ///     The value of the attribute.
        /// </summary>
        /// <value>The value of the attribute.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        ///     The role of the value.
        /// </summary>
        /// <value>The role of the value.</value>
        [DataMember(Name = "Role", EmitDefaultValue = false)]
        public string Role { get; set; }

        /// <summary>
        ///     Returns true if CreatorType instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatorType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatorType input)
        {
            if (input == null)
                return false;

            return
                (
                    Value == input.Value ||
                    (Value != null &&
                     Value.Equals(input.Value))
                ) &&
                (
                    Role == input.Role ||
                    (Role != null &&
                     Role.Equals(input.Role))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatorType {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreatorType);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                return hashCode;
            }
        }
    }
}