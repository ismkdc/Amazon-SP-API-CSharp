/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    ///     The attributes of the item.
    /// </summary>
    [DataContract]
    public class AttributeSetListType : IEquatable<AttributeSetListType>, IValidatableObject
    {
        public AttributeSetListType()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="AttributeSetListType" /> class.
        /// </summary>
        /// <param name="Actor">The actor attributes of the item..</param>
        /// <param name="Artist">The artist attributes of the item..</param>
        /// <param name="AspectRatio">The aspect ratio attribute of the item..</param>
        /// <param name="AudienceRating">The audience rating attribute of the item..</param>
        /// <param name="Author">The author attributes of the item..</param>
        /// <param name="BackFinding">The back finding attribute of the item..</param>
        /// <param name="BandMaterialType">The band material type attribute of the item..</param>
        /// <param name="Binding">The binding attribute of the item..</param>
        /// <param name="BlurayRegion">The Bluray region attribute of the item..</param>
        /// <param name="Brand">The brand attribute of the item..</param>
        /// <param name="CeroAgeRating">The CERO age rating attribute of the item..</param>
        /// <param name="ChainType">The chain type attribute of the item..</param>
        /// <param name="ClaspType">The clasp type attribute of the item..</param>
        /// <param name="Color">The color attribute of the item..</param>
        /// <param name="CpuManufacturer">The CPU manufacturer attribute of the item..</param>
        /// <param name="CpuSpeed">The CPU speed attribute of the item..</param>
        /// <param name="CpuType">The CPU type attribute of the item..</param>
        /// <param name="Creator">The creator attributes of the item..</param>
        /// <param name="Department">The department attribute of the item..</param>
        /// <param name="Director">The director attributes of the item..</param>
        /// <param name="DisplaySize">The display size attribute of the item..</param>
        /// <param name="Edition">The edition attribute of the item..</param>
        /// <param name="EpisodeSequence">The episode sequence attribute of the item..</param>
        /// <param name="EsrbAgeRating">The ESRB age rating attribute of the item..</param>
        /// <param name="Feature">The feature attributes of the item.</param>
        /// <param name="Flavor">The flavor attribute of the item..</param>
        /// <param name="Format">The format attributes of the item..</param>
        /// <param name="GemType">The gem type attributes of the item..</param>
        /// <param name="Genre">The genre attribute of the item..</param>
        /// <param name="GolfClubFlex">The golf club flex attribute of the item..</param>
        /// <param name="GolfClubLoft">The golf club loft attribute of the item..</param>
        /// <param name="HandOrientation">The hand orientation attribute of the item..</param>
        /// <param name="HardDiskInterface">The hard disk interface attribute of the item..</param>
        /// <param name="HardDiskSize">The hard disk size attribute of the item..</param>
        /// <param name="HardwarePlatform">The hardware platform attribute of the item..</param>
        /// <param name="HazardousMaterialType">The hazardous material type attribute of the item..</param>
        /// <param name="ItemDimensions">The item dimensions attribute of the item..</param>
        /// <param name="IsAdultProduct">The adult product attribute of the item..</param>
        /// <param name="IsAutographed">The autographed attribute of the item..</param>
        /// <param name="IsEligibleForTradeIn">The is eligible for trade in attribute of the item..</param>
        /// <param name="IsMemorabilia">The is memorabilia attribute of the item..</param>
        /// <param name="IssuesPerYear">The issues per year attribute of the item..</param>
        /// <param name="ItemPartNumber">The item part number attribute of the item..</param>
        /// <param name="Label">The label attribute of the item..</param>
        /// <param name="Languages">The languages attribute of the item..</param>
        /// <param name="LegalDisclaimer">The legal disclaimer attribute of the item..</param>
        /// <param name="ListPrice">The list price attribute of the item..</param>
        /// <param name="Manufacturer">The manufacturer attribute of the item..</param>
        /// <param name="ManufacturerMaximumAge">The manufacturer maximum age attribute of the item..</param>
        /// <param name="ManufacturerMinimumAge">The manufacturer minimum age attribute of the item..</param>
        /// <param name="ManufacturerPartsWarrantyDescription">The manufacturer parts warranty description attribute of the item..</param>
        /// <param name="MaterialType">The material type attributes of the item..</param>
        /// <param name="MaximumResolution">The maximum resolution attribute of the item..</param>
        /// <param name="MediaType">The media type attributes of the item..</param>
        /// <param name="MetalStamp">The metal stamp attribute of the item..</param>
        /// <param name="MetalType">The metal type attribute of the item..</param>
        /// <param name="Model">The model attribute of the item..</param>
        /// <param name="NumberOfDiscs">The number of discs attribute of the item..</param>
        /// <param name="NumberOfIssues">The number of issues attribute of the item..</param>
        /// <param name="NumberOfItems">The number of items attribute of the item..</param>
        /// <param name="NumberOfPages">The number of pages attribute of the item..</param>
        /// <param name="NumberOfTracks">The number of tracks attribute of the item..</param>
        /// <param name="OperatingSystem">The operating system attributes of the item..</param>
        /// <param name="OpticalZoom">The optical zoom attribute of the item..</param>
        /// <param name="PackageDimensions">The package dimensions attribute of the item..</param>
        /// <param name="PackageQuantity">The package quantity attribute of the item..</param>
        /// <param name="PartNumber">The part number attribute of the item..</param>
        /// <param name="PegiRating">The PEGI rating attribute of the item..</param>
        /// <param name="Platform">The platform attributes of the item..</param>
        /// <param name="ProcessorCount">The processor count attribute of the item..</param>
        /// <param name="ProductGroup">The product group attribute of the item..</param>
        /// <param name="ProductTypeName">The product type name attribute of the item..</param>
        /// <param name="ProductTypeSubcategory">The product type subcategory attribute of the item..</param>
        /// <param name="PublicationDate">The publication date attribute of the item..</param>
        /// <param name="Publisher">The publisher attribute of the item..</param>
        /// <param name="RegionCode">The region code attribute of the item..</param>
        /// <param name="ReleaseDate">The release date attribute of the item..</param>
        /// <param name="RingSize">The ring size attribute of the item..</param>
        /// <param name="RunningTime">The running time attribute of the item..</param>
        /// <param name="ShaftMaterial">The shaft material attribute of the item..</param>
        /// <param name="Scent">The scent attribute of the item..</param>
        /// <param name="SeasonSequence">The season sequence attribute of the item..</param>
        /// <param name="SeikodoProductCode">The Seikodo product code attribute of the item..</param>
        /// <param name="Size">The size attribute of the item..</param>
        /// <param name="SizePerPearl">The size per pearl attribute of the item..</param>
        /// <param name="SmallImage">The small image attribute of the item..</param>
        /// <param name="Studio">The studio attribute of the item..</param>
        /// <param name="SubscriptionLength">The subscription length attribute of the item..</param>
        /// <param name="SystemMemorySize">The system memory size attribute of the item..</param>
        /// <param name="SystemMemoryType">The system memory type attribute of the item..</param>
        /// <param name="TheatricalReleaseDate">The theatrical release date attribute of the item..</param>
        /// <param name="Title">The title attribute of the item..</param>
        /// <param name="TotalDiamondWeight">The total diamond weight attribute of the item..</param>
        /// <param name="TotalGemWeight">The total gem weight attribute of the item..</param>
        /// <param name="Warranty">The warranty attribute of the item..</param>
        /// <param name="WeeeTaxValue">The WEEE tax value attribute of the item..</param>
        public AttributeSetListType(List<string> Actor = default, List<string> Artist = default,
            string AspectRatio = default, string AudienceRating = default, List<string> Author = default,
            string BackFinding = default, string BandMaterialType = default, string Binding = default,
            string BlurayRegion = default, string Brand = default, string CeroAgeRating = default,
            string ChainType = default, string ClaspType = default, string Color = default,
            string CpuManufacturer = default, DecimalWithUnits CpuSpeed = default, string CpuType = default,
            List<CreatorType> Creator = default, string Department = default, List<string> Director = default,
            DecimalWithUnits DisplaySize = default, string Edition = default, string EpisodeSequence = default,
            string EsrbAgeRating = default, List<string> Feature = default, string Flavor = default,
            List<string> Format = default, List<string> GemType = default, string Genre = default,
            string GolfClubFlex = default, DecimalWithUnits GolfClubLoft = default, string HandOrientation = default,
            string HardDiskInterface = default, DecimalWithUnits HardDiskSize = default,
            string HardwarePlatform = default, string HazardousMaterialType = default,
            DimensionType ItemDimensions = default, bool? IsAdultProduct = default, bool? IsAutographed = default,
            bool? IsEligibleForTradeIn = default, bool? IsMemorabilia = default, string IssuesPerYear = default,
            string ItemPartNumber = default, string Label = default, List<LanguageType> Languages = default,
            string LegalDisclaimer = default, Price ListPrice = default, string Manufacturer = default,
            DecimalWithUnits ManufacturerMaximumAge = default, DecimalWithUnits ManufacturerMinimumAge = default,
            string ManufacturerPartsWarrantyDescription = default, List<string> MaterialType = default,
            DecimalWithUnits MaximumResolution = default, List<string> MediaType = default, string MetalStamp = default,
            string MetalType = default, string Model = default, int? NumberOfDiscs = default,
            int? NumberOfIssues = default, int? NumberOfItems = default, int? NumberOfPages = default,
            int? NumberOfTracks = default, List<string> OperatingSystem = default,
            DecimalWithUnits OpticalZoom = default, DimensionType PackageDimensions = default,
            int? PackageQuantity = default, string PartNumber = default, string PegiRating = default,
            List<string> Platform = default, int? ProcessorCount = default, string ProductGroup = default,
            string ProductTypeName = default, string ProductTypeSubcategory = default, string PublicationDate = default,
            string Publisher = default, string RegionCode = default, string ReleaseDate = default,
            string RingSize = default, DecimalWithUnits RunningTime = default, string ShaftMaterial = default,
            string Scent = default, string SeasonSequence = default, string SeikodoProductCode = default,
            string Size = default, string SizePerPearl = default, Image SmallImage = default, string Studio = default,
            DecimalWithUnits SubscriptionLength = default, DecimalWithUnits SystemMemorySize = default,
            string SystemMemoryType = default, string TheatricalReleaseDate = default, string Title = default,
            DecimalWithUnits TotalDiamondWeight = default, DecimalWithUnits TotalGemWeight = default,
            string Warranty = default, Price WeeeTaxValue = default)
        {
            this.Actor = Actor;
            this.Artist = Artist;
            this.AspectRatio = AspectRatio;
            this.AudienceRating = AudienceRating;
            this.Author = Author;
            this.BackFinding = BackFinding;
            this.BandMaterialType = BandMaterialType;
            this.Binding = Binding;
            this.BlurayRegion = BlurayRegion;
            this.Brand = Brand;
            this.CeroAgeRating = CeroAgeRating;
            this.ChainType = ChainType;
            this.ClaspType = ClaspType;
            this.Color = Color;
            this.CpuManufacturer = CpuManufacturer;
            this.CpuSpeed = CpuSpeed;
            this.CpuType = CpuType;
            this.Creator = Creator;
            this.Department = Department;
            this.Director = Director;
            this.DisplaySize = DisplaySize;
            this.Edition = Edition;
            this.EpisodeSequence = EpisodeSequence;
            this.EsrbAgeRating = EsrbAgeRating;
            this.Feature = Feature;
            this.Flavor = Flavor;
            this.Format = Format;
            this.GemType = GemType;
            this.Genre = Genre;
            this.GolfClubFlex = GolfClubFlex;
            this.GolfClubLoft = GolfClubLoft;
            this.HandOrientation = HandOrientation;
            this.HardDiskInterface = HardDiskInterface;
            this.HardDiskSize = HardDiskSize;
            this.HardwarePlatform = HardwarePlatform;
            this.HazardousMaterialType = HazardousMaterialType;
            this.ItemDimensions = ItemDimensions;
            this.IsAdultProduct = IsAdultProduct;
            this.IsAutographed = IsAutographed;
            this.IsEligibleForTradeIn = IsEligibleForTradeIn;
            this.IsMemorabilia = IsMemorabilia;
            this.IssuesPerYear = IssuesPerYear;
            this.ItemPartNumber = ItemPartNumber;
            this.Label = Label;
            this.Languages = Languages;
            this.LegalDisclaimer = LegalDisclaimer;
            this.ListPrice = ListPrice;
            this.Manufacturer = Manufacturer;
            this.ManufacturerMaximumAge = ManufacturerMaximumAge;
            this.ManufacturerMinimumAge = ManufacturerMinimumAge;
            this.ManufacturerPartsWarrantyDescription = ManufacturerPartsWarrantyDescription;
            this.MaterialType = MaterialType;
            this.MaximumResolution = MaximumResolution;
            this.MediaType = MediaType;
            this.MetalStamp = MetalStamp;
            this.MetalType = MetalType;
            this.Model = Model;
            this.NumberOfDiscs = NumberOfDiscs;
            this.NumberOfIssues = NumberOfIssues;
            this.NumberOfItems = NumberOfItems;
            this.NumberOfPages = NumberOfPages;
            this.NumberOfTracks = NumberOfTracks;
            this.OperatingSystem = OperatingSystem;
            this.OpticalZoom = OpticalZoom;
            this.PackageDimensions = PackageDimensions;
            this.PackageQuantity = PackageQuantity;
            this.PartNumber = PartNumber;
            this.PegiRating = PegiRating;
            this.Platform = Platform;
            this.ProcessorCount = ProcessorCount;
            this.ProductGroup = ProductGroup;
            this.ProductTypeName = ProductTypeName;
            this.ProductTypeSubcategory = ProductTypeSubcategory;
            this.PublicationDate = PublicationDate;
            this.Publisher = Publisher;
            this.RegionCode = RegionCode;
            this.ReleaseDate = ReleaseDate;
            this.RingSize = RingSize;
            this.RunningTime = RunningTime;
            this.ShaftMaterial = ShaftMaterial;
            this.Scent = Scent;
            this.SeasonSequence = SeasonSequence;
            this.SeikodoProductCode = SeikodoProductCode;
            this.Size = Size;
            this.SizePerPearl = SizePerPearl;
            this.SmallImage = SmallImage;
            this.Studio = Studio;
            this.SubscriptionLength = SubscriptionLength;
            this.SystemMemorySize = SystemMemorySize;
            this.SystemMemoryType = SystemMemoryType;
            this.TheatricalReleaseDate = TheatricalReleaseDate;
            this.Title = Title;
            this.TotalDiamondWeight = TotalDiamondWeight;
            this.TotalGemWeight = TotalGemWeight;
            this.Warranty = Warranty;
            this.WeeeTaxValue = WeeeTaxValue;
        }

        /// <summary>
        ///     The actor attributes of the item.
        /// </summary>
        /// <value>The actor attributes of the item.</value>
        [DataMember(Name = "Actor", EmitDefaultValue = false)]
        public List<string> Actor { get; set; }

        /// <summary>
        ///     The artist attributes of the item.
        /// </summary>
        /// <value>The artist attributes of the item.</value>
        [DataMember(Name = "Artist", EmitDefaultValue = false)]
        public List<string> Artist { get; set; }

        /// <summary>
        ///     The aspect ratio attribute of the item.
        /// </summary>
        /// <value>The aspect ratio attribute of the item.</value>
        [DataMember(Name = "AspectRatio", EmitDefaultValue = false)]
        public string AspectRatio { get; set; }

        /// <summary>
        ///     The audience rating attribute of the item.
        /// </summary>
        /// <value>The audience rating attribute of the item.</value>
        [DataMember(Name = "AudienceRating", EmitDefaultValue = false)]
        public string AudienceRating { get; set; }

        /// <summary>
        ///     The author attributes of the item.
        /// </summary>
        /// <value>The author attributes of the item.</value>
        [DataMember(Name = "Author", EmitDefaultValue = false)]
        public List<string> Author { get; set; }

        /// <summary>
        ///     The back finding attribute of the item.
        /// </summary>
        /// <value>The back finding attribute of the item.</value>
        [DataMember(Name = "BackFinding", EmitDefaultValue = false)]
        public string BackFinding { get; set; }

        /// <summary>
        ///     The band material type attribute of the item.
        /// </summary>
        /// <value>The band material type attribute of the item.</value>
        [DataMember(Name = "BandMaterialType", EmitDefaultValue = false)]
        public string BandMaterialType { get; set; }

        /// <summary>
        ///     The binding attribute of the item.
        /// </summary>
        /// <value>The binding attribute of the item.</value>
        [DataMember(Name = "Binding", EmitDefaultValue = false)]
        public string Binding { get; set; }

        /// <summary>
        ///     The Bluray region attribute of the item.
        /// </summary>
        /// <value>The Bluray region attribute of the item.</value>
        [DataMember(Name = "BlurayRegion", EmitDefaultValue = false)]
        public string BlurayRegion { get; set; }

        /// <summary>
        ///     The brand attribute of the item.
        /// </summary>
        /// <value>The brand attribute of the item.</value>
        [DataMember(Name = "Brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        ///     The CERO age rating attribute of the item.
        /// </summary>
        /// <value>The CERO age rating attribute of the item.</value>
        [DataMember(Name = "CeroAgeRating", EmitDefaultValue = false)]
        public string CeroAgeRating { get; set; }

        /// <summary>
        ///     The chain type attribute of the item.
        /// </summary>
        /// <value>The chain type attribute of the item.</value>
        [DataMember(Name = "ChainType", EmitDefaultValue = false)]
        public string ChainType { get; set; }

        /// <summary>
        ///     The clasp type attribute of the item.
        /// </summary>
        /// <value>The clasp type attribute of the item.</value>
        [DataMember(Name = "ClaspType", EmitDefaultValue = false)]
        public string ClaspType { get; set; }

        /// <summary>
        ///     The color attribute of the item.
        /// </summary>
        /// <value>The color attribute of the item.</value>
        [DataMember(Name = "Color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        ///     The CPU manufacturer attribute of the item.
        /// </summary>
        /// <value>The CPU manufacturer attribute of the item.</value>
        [DataMember(Name = "CpuManufacturer", EmitDefaultValue = false)]
        public string CpuManufacturer { get; set; }

        /// <summary>
        ///     The CPU speed attribute of the item.
        /// </summary>
        /// <value>The CPU speed attribute of the item.</value>
        [DataMember(Name = "CpuSpeed", EmitDefaultValue = false)]
        public DecimalWithUnits CpuSpeed { get; set; }

        /// <summary>
        ///     The CPU type attribute of the item.
        /// </summary>
        /// <value>The CPU type attribute of the item.</value>
        [DataMember(Name = "CpuType", EmitDefaultValue = false)]
        public string CpuType { get; set; }

        /// <summary>
        ///     The creator attributes of the item.
        /// </summary>
        /// <value>The creator attributes of the item.</value>
        [DataMember(Name = "Creator", EmitDefaultValue = false)]
        public List<CreatorType> Creator { get; set; }

        /// <summary>
        ///     The department attribute of the item.
        /// </summary>
        /// <value>The department attribute of the item.</value>
        [DataMember(Name = "Department", EmitDefaultValue = false)]
        public string Department { get; set; }

        /// <summary>
        ///     The director attributes of the item.
        /// </summary>
        /// <value>The director attributes of the item.</value>
        [DataMember(Name = "Director", EmitDefaultValue = false)]
        public List<string> Director { get; set; }

        /// <summary>
        ///     The display size attribute of the item.
        /// </summary>
        /// <value>The display size attribute of the item.</value>
        [DataMember(Name = "DisplaySize", EmitDefaultValue = false)]
        public DecimalWithUnits DisplaySize { get; set; }

        /// <summary>
        ///     The edition attribute of the item.
        /// </summary>
        /// <value>The edition attribute of the item.</value>
        [DataMember(Name = "Edition", EmitDefaultValue = false)]
        public string Edition { get; set; }

        /// <summary>
        ///     The episode sequence attribute of the item.
        /// </summary>
        /// <value>The episode sequence attribute of the item.</value>
        [DataMember(Name = "EpisodeSequence", EmitDefaultValue = false)]
        public string EpisodeSequence { get; set; }

        /// <summary>
        ///     The ESRB age rating attribute of the item.
        /// </summary>
        /// <value>The ESRB age rating attribute of the item.</value>
        [DataMember(Name = "EsrbAgeRating", EmitDefaultValue = false)]
        public string EsrbAgeRating { get; set; }

        /// <summary>
        ///     The feature attributes of the item
        /// </summary>
        /// <value>The feature attributes of the item</value>
        [DataMember(Name = "Feature", EmitDefaultValue = false)]
        public List<string> Feature { get; set; }

        /// <summary>
        ///     The flavor attribute of the item.
        /// </summary>
        /// <value>The flavor attribute of the item.</value>
        [DataMember(Name = "Flavor", EmitDefaultValue = false)]
        public string Flavor { get; set; }

        /// <summary>
        ///     The format attributes of the item.
        /// </summary>
        /// <value>The format attributes of the item.</value>
        [DataMember(Name = "Format", EmitDefaultValue = false)]
        public List<string> Format { get; set; }

        /// <summary>
        ///     The gem type attributes of the item.
        /// </summary>
        /// <value>The gem type attributes of the item.</value>
        [DataMember(Name = "GemType", EmitDefaultValue = false)]
        public List<string> GemType { get; set; }

        /// <summary>
        ///     The genre attribute of the item.
        /// </summary>
        /// <value>The genre attribute of the item.</value>
        [DataMember(Name = "Genre", EmitDefaultValue = false)]
        public string Genre { get; set; }

        /// <summary>
        ///     The golf club flex attribute of the item.
        /// </summary>
        /// <value>The golf club flex attribute of the item.</value>
        [DataMember(Name = "GolfClubFlex", EmitDefaultValue = false)]
        public string GolfClubFlex { get; set; }

        /// <summary>
        ///     The golf club loft attribute of the item.
        /// </summary>
        /// <value>The golf club loft attribute of the item.</value>
        [DataMember(Name = "GolfClubLoft", EmitDefaultValue = false)]
        public DecimalWithUnits GolfClubLoft { get; set; }

        /// <summary>
        ///     The hand orientation attribute of the item.
        /// </summary>
        /// <value>The hand orientation attribute of the item.</value>
        [DataMember(Name = "HandOrientation", EmitDefaultValue = false)]
        public string HandOrientation { get; set; }

        /// <summary>
        ///     The hard disk interface attribute of the item.
        /// </summary>
        /// <value>The hard disk interface attribute of the item.</value>
        [DataMember(Name = "HardDiskInterface", EmitDefaultValue = false)]
        public string HardDiskInterface { get; set; }

        /// <summary>
        ///     The hard disk size attribute of the item.
        /// </summary>
        /// <value>The hard disk size attribute of the item.</value>
        [DataMember(Name = "HardDiskSize", EmitDefaultValue = false)]
        public DecimalWithUnits HardDiskSize { get; set; }

        /// <summary>
        ///     The hardware platform attribute of the item.
        /// </summary>
        /// <value>The hardware platform attribute of the item.</value>
        [DataMember(Name = "HardwarePlatform", EmitDefaultValue = false)]
        public string HardwarePlatform { get; set; }

        /// <summary>
        ///     The hazardous material type attribute of the item.
        /// </summary>
        /// <value>The hazardous material type attribute of the item.</value>
        [DataMember(Name = "HazardousMaterialType", EmitDefaultValue = false)]
        public string HazardousMaterialType { get; set; }

        /// <summary>
        ///     The item dimensions attribute of the item.
        /// </summary>
        /// <value>The item dimensions attribute of the item.</value>
        [DataMember(Name = "ItemDimensions", EmitDefaultValue = false)]
        public DimensionType ItemDimensions { get; set; }

        /// <summary>
        ///     The adult product attribute of the item.
        /// </summary>
        /// <value>The adult product attribute of the item.</value>
        [DataMember(Name = "IsAdultProduct", EmitDefaultValue = false)]
        public bool? IsAdultProduct { get; set; }

        /// <summary>
        ///     The autographed attribute of the item.
        /// </summary>
        /// <value>The autographed attribute of the item.</value>
        [DataMember(Name = "IsAutographed", EmitDefaultValue = false)]
        public bool? IsAutographed { get; set; }

        /// <summary>
        ///     The is eligible for trade in attribute of the item.
        /// </summary>
        /// <value>The is eligible for trade in attribute of the item.</value>
        [DataMember(Name = "IsEligibleForTradeIn", EmitDefaultValue = false)]
        public bool? IsEligibleForTradeIn { get; set; }

        /// <summary>
        ///     The is memorabilia attribute of the item.
        /// </summary>
        /// <value>The is memorabilia attribute of the item.</value>
        [DataMember(Name = "IsMemorabilia", EmitDefaultValue = false)]
        public bool? IsMemorabilia { get; set; }

        /// <summary>
        ///     The issues per year attribute of the item.
        /// </summary>
        /// <value>The issues per year attribute of the item.</value>
        [DataMember(Name = "IssuesPerYear", EmitDefaultValue = false)]
        public string IssuesPerYear { get; set; }

        /// <summary>
        ///     The item part number attribute of the item.
        /// </summary>
        /// <value>The item part number attribute of the item.</value>
        [DataMember(Name = "ItemPartNumber", EmitDefaultValue = false)]
        public string ItemPartNumber { get; set; }

        /// <summary>
        ///     The label attribute of the item.
        /// </summary>
        /// <value>The label attribute of the item.</value>
        [DataMember(Name = "Label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        ///     The languages attribute of the item.
        /// </summary>
        /// <value>The languages attribute of the item.</value>
        [DataMember(Name = "Languages", EmitDefaultValue = false)]
        public List<LanguageType> Languages { get; set; }

        /// <summary>
        ///     The legal disclaimer attribute of the item.
        /// </summary>
        /// <value>The legal disclaimer attribute of the item.</value>
        [DataMember(Name = "LegalDisclaimer", EmitDefaultValue = false)]
        public string LegalDisclaimer { get; set; }

        /// <summary>
        ///     The list price attribute of the item.
        /// </summary>
        /// <value>The list price attribute of the item.</value>
        [DataMember(Name = "ListPrice", EmitDefaultValue = false)]
        public Price ListPrice { get; set; }

        /// <summary>
        ///     The manufacturer attribute of the item.
        /// </summary>
        /// <value>The manufacturer attribute of the item.</value>
        [DataMember(Name = "Manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        ///     The manufacturer maximum age attribute of the item.
        /// </summary>
        /// <value>The manufacturer maximum age attribute of the item.</value>
        [DataMember(Name = "ManufacturerMaximumAge", EmitDefaultValue = false)]
        public DecimalWithUnits ManufacturerMaximumAge { get; set; }

        /// <summary>
        ///     The manufacturer minimum age attribute of the item.
        /// </summary>
        /// <value>The manufacturer minimum age attribute of the item.</value>
        [DataMember(Name = "ManufacturerMinimumAge", EmitDefaultValue = false)]
        public DecimalWithUnits ManufacturerMinimumAge { get; set; }

        /// <summary>
        ///     The manufacturer parts warranty description attribute of the item.
        /// </summary>
        /// <value>The manufacturer parts warranty description attribute of the item.</value>
        [DataMember(Name = "ManufacturerPartsWarrantyDescription", EmitDefaultValue = false)]
        public string ManufacturerPartsWarrantyDescription { get; set; }

        /// <summary>
        ///     The material type attributes of the item.
        /// </summary>
        /// <value>The material type attributes of the item.</value>
        [DataMember(Name = "MaterialType", EmitDefaultValue = false)]
        public List<string> MaterialType { get; set; }

        /// <summary>
        ///     The maximum resolution attribute of the item.
        /// </summary>
        /// <value>The maximum resolution attribute of the item.</value>
        [DataMember(Name = "MaximumResolution", EmitDefaultValue = false)]
        public DecimalWithUnits MaximumResolution { get; set; }

        /// <summary>
        ///     The media type attributes of the item.
        /// </summary>
        /// <value>The media type attributes of the item.</value>
        [DataMember(Name = "MediaType", EmitDefaultValue = false)]
        public List<string> MediaType { get; set; }

        /// <summary>
        ///     The metal stamp attribute of the item.
        /// </summary>
        /// <value>The metal stamp attribute of the item.</value>
        [DataMember(Name = "MetalStamp", EmitDefaultValue = false)]
        public string MetalStamp { get; set; }

        /// <summary>
        ///     The metal type attribute of the item.
        /// </summary>
        /// <value>The metal type attribute of the item.</value>
        [DataMember(Name = "MetalType", EmitDefaultValue = false)]
        public string MetalType { get; set; }

        /// <summary>
        ///     The model attribute of the item.
        /// </summary>
        /// <value>The model attribute of the item.</value>
        [DataMember(Name = "Model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        ///     The number of discs attribute of the item.
        /// </summary>
        /// <value>The number of discs attribute of the item.</value>
        [DataMember(Name = "NumberOfDiscs", EmitDefaultValue = false)]
        public int? NumberOfDiscs { get; set; }

        /// <summary>
        ///     The number of issues attribute of the item.
        /// </summary>
        /// <value>The number of issues attribute of the item.</value>
        [DataMember(Name = "NumberOfIssues", EmitDefaultValue = false)]
        public int? NumberOfIssues { get; set; }

        /// <summary>
        ///     The number of items attribute of the item.
        /// </summary>
        /// <value>The number of items attribute of the item.</value>
        [DataMember(Name = "NumberOfItems", EmitDefaultValue = false)]
        public int? NumberOfItems { get; set; }

        /// <summary>
        ///     The number of pages attribute of the item.
        /// </summary>
        /// <value>The number of pages attribute of the item.</value>
        [DataMember(Name = "NumberOfPages", EmitDefaultValue = false)]
        public int? NumberOfPages { get; set; }

        /// <summary>
        ///     The number of tracks attribute of the item.
        /// </summary>
        /// <value>The number of tracks attribute of the item.</value>
        [DataMember(Name = "NumberOfTracks", EmitDefaultValue = false)]
        public int? NumberOfTracks { get; set; }

        /// <summary>
        ///     The operating system attributes of the item.
        /// </summary>
        /// <value>The operating system attributes of the item.</value>
        [DataMember(Name = "OperatingSystem", EmitDefaultValue = false)]
        public List<string> OperatingSystem { get; set; }

        /// <summary>
        ///     The optical zoom attribute of the item.
        /// </summary>
        /// <value>The optical zoom attribute of the item.</value>
        [DataMember(Name = "OpticalZoom", EmitDefaultValue = false)]
        public DecimalWithUnits OpticalZoom { get; set; }

        /// <summary>
        ///     The package dimensions attribute of the item.
        /// </summary>
        /// <value>The package dimensions attribute of the item.</value>
        [DataMember(Name = "PackageDimensions", EmitDefaultValue = false)]
        public DimensionType PackageDimensions { get; set; }

        /// <summary>
        ///     The package quantity attribute of the item.
        /// </summary>
        /// <value>The package quantity attribute of the item.</value>
        [DataMember(Name = "PackageQuantity", EmitDefaultValue = false)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        ///     The part number attribute of the item.
        /// </summary>
        /// <value>The part number attribute of the item.</value>
        [DataMember(Name = "PartNumber", EmitDefaultValue = false)]
        public string PartNumber { get; set; }

        /// <summary>
        ///     The PEGI rating attribute of the item.
        /// </summary>
        /// <value>The PEGI rating attribute of the item.</value>
        [DataMember(Name = "PegiRating", EmitDefaultValue = false)]
        public string PegiRating { get; set; }

        /// <summary>
        ///     The platform attributes of the item.
        /// </summary>
        /// <value>The platform attributes of the item.</value>
        [DataMember(Name = "Platform", EmitDefaultValue = false)]
        public List<string> Platform { get; set; }

        /// <summary>
        ///     The processor count attribute of the item.
        /// </summary>
        /// <value>The processor count attribute of the item.</value>
        [DataMember(Name = "ProcessorCount", EmitDefaultValue = false)]
        public int? ProcessorCount { get; set; }

        /// <summary>
        ///     The product group attribute of the item.
        /// </summary>
        /// <value>The product group attribute of the item.</value>
        [DataMember(Name = "ProductGroup", EmitDefaultValue = false)]
        public string ProductGroup { get; set; }

        /// <summary>
        ///     The product type name attribute of the item.
        /// </summary>
        /// <value>The product type name attribute of the item.</value>
        [DataMember(Name = "ProductTypeName", EmitDefaultValue = false)]
        public string ProductTypeName { get; set; }

        /// <summary>
        ///     The product type subcategory attribute of the item.
        /// </summary>
        /// <value>The product type subcategory attribute of the item.</value>
        [DataMember(Name = "ProductTypeSubcategory", EmitDefaultValue = false)]
        public string ProductTypeSubcategory { get; set; }

        /// <summary>
        ///     The publication date attribute of the item.
        /// </summary>
        /// <value>The publication date attribute of the item.</value>
        [DataMember(Name = "PublicationDate", EmitDefaultValue = false)]
        public string PublicationDate { get; set; }

        /// <summary>
        ///     The publisher attribute of the item.
        /// </summary>
        /// <value>The publisher attribute of the item.</value>
        [DataMember(Name = "Publisher", EmitDefaultValue = false)]
        public string Publisher { get; set; }

        /// <summary>
        ///     The region code attribute of the item.
        /// </summary>
        /// <value>The region code attribute of the item.</value>
        [DataMember(Name = "RegionCode", EmitDefaultValue = false)]
        public string RegionCode { get; set; }

        /// <summary>
        ///     The release date attribute of the item.
        /// </summary>
        /// <value>The release date attribute of the item.</value>
        [DataMember(Name = "ReleaseDate", EmitDefaultValue = false)]
        public string ReleaseDate { get; set; }

        /// <summary>
        ///     The ring size attribute of the item.
        /// </summary>
        /// <value>The ring size attribute of the item.</value>
        [DataMember(Name = "RingSize", EmitDefaultValue = false)]
        public string RingSize { get; set; }

        /// <summary>
        ///     The running time attribute of the item.
        /// </summary>
        /// <value>The running time attribute of the item.</value>
        [DataMember(Name = "RunningTime", EmitDefaultValue = false)]
        public DecimalWithUnits RunningTime { get; set; }

        /// <summary>
        ///     The shaft material attribute of the item.
        /// </summary>
        /// <value>The shaft material attribute of the item.</value>
        [DataMember(Name = "ShaftMaterial", EmitDefaultValue = false)]
        public string ShaftMaterial { get; set; }

        /// <summary>
        ///     The scent attribute of the item.
        /// </summary>
        /// <value>The scent attribute of the item.</value>
        [DataMember(Name = "Scent", EmitDefaultValue = false)]
        public string Scent { get; set; }

        /// <summary>
        ///     The season sequence attribute of the item.
        /// </summary>
        /// <value>The season sequence attribute of the item.</value>
        [DataMember(Name = "SeasonSequence", EmitDefaultValue = false)]
        public string SeasonSequence { get; set; }

        /// <summary>
        ///     The Seikodo product code attribute of the item.
        /// </summary>
        /// <value>The Seikodo product code attribute of the item.</value>
        [DataMember(Name = "SeikodoProductCode", EmitDefaultValue = false)]
        public string SeikodoProductCode { get; set; }

        /// <summary>
        ///     The size attribute of the item.
        /// </summary>
        /// <value>The size attribute of the item.</value>
        [DataMember(Name = "Size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        ///     The size per pearl attribute of the item.
        /// </summary>
        /// <value>The size per pearl attribute of the item.</value>
        [DataMember(Name = "SizePerPearl", EmitDefaultValue = false)]
        public string SizePerPearl { get; set; }

        /// <summary>
        ///     The small image attribute of the item.
        /// </summary>
        /// <value>The small image attribute of the item.</value>
        [DataMember(Name = "SmallImage", EmitDefaultValue = false)]
        public Image SmallImage { get; set; }

        /// <summary>
        ///     The studio attribute of the item.
        /// </summary>
        /// <value>The studio attribute of the item.</value>
        [DataMember(Name = "Studio", EmitDefaultValue = false)]
        public string Studio { get; set; }

        /// <summary>
        ///     The subscription length attribute of the item.
        /// </summary>
        /// <value>The subscription length attribute of the item.</value>
        [DataMember(Name = "SubscriptionLength", EmitDefaultValue = false)]
        public DecimalWithUnits SubscriptionLength { get; set; }

        /// <summary>
        ///     The system memory size attribute of the item.
        /// </summary>
        /// <value>The system memory size attribute of the item.</value>
        [DataMember(Name = "SystemMemorySize", EmitDefaultValue = false)]
        public DecimalWithUnits SystemMemorySize { get; set; }

        /// <summary>
        ///     The system memory type attribute of the item.
        /// </summary>
        /// <value>The system memory type attribute of the item.</value>
        [DataMember(Name = "SystemMemoryType", EmitDefaultValue = false)]
        public string SystemMemoryType { get; set; }

        /// <summary>
        ///     The theatrical release date attribute of the item.
        /// </summary>
        /// <value>The theatrical release date attribute of the item.</value>
        [DataMember(Name = "TheatricalReleaseDate", EmitDefaultValue = false)]
        public string TheatricalReleaseDate { get; set; }

        /// <summary>
        ///     The title attribute of the item.
        /// </summary>
        /// <value>The title attribute of the item.</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        ///     The total diamond weight attribute of the item.
        /// </summary>
        /// <value>The total diamond weight attribute of the item.</value>
        [DataMember(Name = "TotalDiamondWeight", EmitDefaultValue = false)]
        public DecimalWithUnits TotalDiamondWeight { get; set; }

        /// <summary>
        ///     The total gem weight attribute of the item.
        /// </summary>
        /// <value>The total gem weight attribute of the item.</value>
        [DataMember(Name = "TotalGemWeight", EmitDefaultValue = false)]
        public DecimalWithUnits TotalGemWeight { get; set; }

        /// <summary>
        ///     The warranty attribute of the item.
        /// </summary>
        /// <value>The warranty attribute of the item.</value>
        [DataMember(Name = "Warranty", EmitDefaultValue = false)]
        public string Warranty { get; set; }

        /// <summary>
        ///     The WEEE tax value attribute of the item.
        /// </summary>
        /// <value>The WEEE tax value attribute of the item.</value>
        [DataMember(Name = "WeeeTaxValue", EmitDefaultValue = false)]
        public Price WeeeTaxValue { get; set; }

        /// <summary>
        ///     Returns true if AttributeSetListType instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeSetListType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeSetListType input)
        {
            if (input == null)
                return false;

            return
                (
                    Actor == input.Actor ||
                    (Actor != null &&
                     Actor.SequenceEqual(input.Actor))
                ) &&
                (
                    Artist == input.Artist ||
                    (Artist != null &&
                     Artist.SequenceEqual(input.Artist))
                ) &&
                (
                    AspectRatio == input.AspectRatio ||
                    (AspectRatio != null &&
                     AspectRatio.Equals(input.AspectRatio))
                ) &&
                (
                    AudienceRating == input.AudienceRating ||
                    (AudienceRating != null &&
                     AudienceRating.Equals(input.AudienceRating))
                ) &&
                (
                    Author == input.Author ||
                    (Author != null &&
                     Author.SequenceEqual(input.Author))
                ) &&
                (
                    BackFinding == input.BackFinding ||
                    (BackFinding != null &&
                     BackFinding.Equals(input.BackFinding))
                ) &&
                (
                    BandMaterialType == input.BandMaterialType ||
                    (BandMaterialType != null &&
                     BandMaterialType.Equals(input.BandMaterialType))
                ) &&
                (
                    Binding == input.Binding ||
                    (Binding != null &&
                     Binding.Equals(input.Binding))
                ) &&
                (
                    BlurayRegion == input.BlurayRegion ||
                    (BlurayRegion != null &&
                     BlurayRegion.Equals(input.BlurayRegion))
                ) &&
                (
                    Brand == input.Brand ||
                    (Brand != null &&
                     Brand.Equals(input.Brand))
                ) &&
                (
                    CeroAgeRating == input.CeroAgeRating ||
                    (CeroAgeRating != null &&
                     CeroAgeRating.Equals(input.CeroAgeRating))
                ) &&
                (
                    ChainType == input.ChainType ||
                    (ChainType != null &&
                     ChainType.Equals(input.ChainType))
                ) &&
                (
                    ClaspType == input.ClaspType ||
                    (ClaspType != null &&
                     ClaspType.Equals(input.ClaspType))
                ) &&
                (
                    Color == input.Color ||
                    (Color != null &&
                     Color.Equals(input.Color))
                ) &&
                (
                    CpuManufacturer == input.CpuManufacturer ||
                    (CpuManufacturer != null &&
                     CpuManufacturer.Equals(input.CpuManufacturer))
                ) &&
                (
                    CpuSpeed == input.CpuSpeed ||
                    (CpuSpeed != null &&
                     CpuSpeed.Equals(input.CpuSpeed))
                ) &&
                (
                    CpuType == input.CpuType ||
                    (CpuType != null &&
                     CpuType.Equals(input.CpuType))
                ) &&
                (
                    Creator == input.Creator ||
                    (Creator != null &&
                     Creator.SequenceEqual(input.Creator))
                ) &&
                (
                    Department == input.Department ||
                    (Department != null &&
                     Department.Equals(input.Department))
                ) &&
                (
                    Director == input.Director ||
                    (Director != null &&
                     Director.SequenceEqual(input.Director))
                ) &&
                (
                    DisplaySize == input.DisplaySize ||
                    (DisplaySize != null &&
                     DisplaySize.Equals(input.DisplaySize))
                ) &&
                (
                    Edition == input.Edition ||
                    (Edition != null &&
                     Edition.Equals(input.Edition))
                ) &&
                (
                    EpisodeSequence == input.EpisodeSequence ||
                    (EpisodeSequence != null &&
                     EpisodeSequence.Equals(input.EpisodeSequence))
                ) &&
                (
                    EsrbAgeRating == input.EsrbAgeRating ||
                    (EsrbAgeRating != null &&
                     EsrbAgeRating.Equals(input.EsrbAgeRating))
                ) &&
                (
                    Feature == input.Feature ||
                    (Feature != null &&
                     Feature.SequenceEqual(input.Feature))
                ) &&
                (
                    Flavor == input.Flavor ||
                    (Flavor != null &&
                     Flavor.Equals(input.Flavor))
                ) &&
                (
                    Format == input.Format ||
                    (Format != null &&
                     Format.SequenceEqual(input.Format))
                ) &&
                (
                    GemType == input.GemType ||
                    (GemType != null &&
                     GemType.SequenceEqual(input.GemType))
                ) &&
                (
                    Genre == input.Genre ||
                    (Genre != null &&
                     Genre.Equals(input.Genre))
                ) &&
                (
                    GolfClubFlex == input.GolfClubFlex ||
                    (GolfClubFlex != null &&
                     GolfClubFlex.Equals(input.GolfClubFlex))
                ) &&
                (
                    GolfClubLoft == input.GolfClubLoft ||
                    (GolfClubLoft != null &&
                     GolfClubLoft.Equals(input.GolfClubLoft))
                ) &&
                (
                    HandOrientation == input.HandOrientation ||
                    (HandOrientation != null &&
                     HandOrientation.Equals(input.HandOrientation))
                ) &&
                (
                    HardDiskInterface == input.HardDiskInterface ||
                    (HardDiskInterface != null &&
                     HardDiskInterface.Equals(input.HardDiskInterface))
                ) &&
                (
                    HardDiskSize == input.HardDiskSize ||
                    (HardDiskSize != null &&
                     HardDiskSize.Equals(input.HardDiskSize))
                ) &&
                (
                    HardwarePlatform == input.HardwarePlatform ||
                    (HardwarePlatform != null &&
                     HardwarePlatform.Equals(input.HardwarePlatform))
                ) &&
                (
                    HazardousMaterialType == input.HazardousMaterialType ||
                    (HazardousMaterialType != null &&
                     HazardousMaterialType.Equals(input.HazardousMaterialType))
                ) &&
                (
                    ItemDimensions == input.ItemDimensions ||
                    (ItemDimensions != null &&
                     ItemDimensions.Equals(input.ItemDimensions))
                ) &&
                (
                    IsAdultProduct == input.IsAdultProduct ||
                    (IsAdultProduct != null &&
                     IsAdultProduct.Equals(input.IsAdultProduct))
                ) &&
                (
                    IsAutographed == input.IsAutographed ||
                    (IsAutographed != null &&
                     IsAutographed.Equals(input.IsAutographed))
                ) &&
                (
                    IsEligibleForTradeIn == input.IsEligibleForTradeIn ||
                    (IsEligibleForTradeIn != null &&
                     IsEligibleForTradeIn.Equals(input.IsEligibleForTradeIn))
                ) &&
                (
                    IsMemorabilia == input.IsMemorabilia ||
                    (IsMemorabilia != null &&
                     IsMemorabilia.Equals(input.IsMemorabilia))
                ) &&
                (
                    IssuesPerYear == input.IssuesPerYear ||
                    (IssuesPerYear != null &&
                     IssuesPerYear.Equals(input.IssuesPerYear))
                ) &&
                (
                    ItemPartNumber == input.ItemPartNumber ||
                    (ItemPartNumber != null &&
                     ItemPartNumber.Equals(input.ItemPartNumber))
                ) &&
                (
                    Label == input.Label ||
                    (Label != null &&
                     Label.Equals(input.Label))
                ) &&
                (
                    Languages == input.Languages ||
                    (Languages != null &&
                     Languages.SequenceEqual(input.Languages))
                ) &&
                (
                    LegalDisclaimer == input.LegalDisclaimer ||
                    (LegalDisclaimer != null &&
                     LegalDisclaimer.Equals(input.LegalDisclaimer))
                ) &&
                (
                    ListPrice == input.ListPrice ||
                    (ListPrice != null &&
                     ListPrice.Equals(input.ListPrice))
                ) &&
                (
                    Manufacturer == input.Manufacturer ||
                    (Manufacturer != null &&
                     Manufacturer.Equals(input.Manufacturer))
                ) &&
                (
                    ManufacturerMaximumAge == input.ManufacturerMaximumAge ||
                    (ManufacturerMaximumAge != null &&
                     ManufacturerMaximumAge.Equals(input.ManufacturerMaximumAge))
                ) &&
                (
                    ManufacturerMinimumAge == input.ManufacturerMinimumAge ||
                    (ManufacturerMinimumAge != null &&
                     ManufacturerMinimumAge.Equals(input.ManufacturerMinimumAge))
                ) &&
                (
                    ManufacturerPartsWarrantyDescription == input.ManufacturerPartsWarrantyDescription ||
                    (ManufacturerPartsWarrantyDescription != null &&
                     ManufacturerPartsWarrantyDescription.Equals(input.ManufacturerPartsWarrantyDescription))
                ) &&
                (
                    MaterialType == input.MaterialType ||
                    (MaterialType != null &&
                     MaterialType.SequenceEqual(input.MaterialType))
                ) &&
                (
                    MaximumResolution == input.MaximumResolution ||
                    (MaximumResolution != null &&
                     MaximumResolution.Equals(input.MaximumResolution))
                ) &&
                (
                    MediaType == input.MediaType ||
                    (MediaType != null &&
                     MediaType.SequenceEqual(input.MediaType))
                ) &&
                (
                    MetalStamp == input.MetalStamp ||
                    (MetalStamp != null &&
                     MetalStamp.Equals(input.MetalStamp))
                ) &&
                (
                    MetalType == input.MetalType ||
                    (MetalType != null &&
                     MetalType.Equals(input.MetalType))
                ) &&
                (
                    Model == input.Model ||
                    (Model != null &&
                     Model.Equals(input.Model))
                ) &&
                (
                    NumberOfDiscs == input.NumberOfDiscs ||
                    (NumberOfDiscs != null &&
                     NumberOfDiscs.Equals(input.NumberOfDiscs))
                ) &&
                (
                    NumberOfIssues == input.NumberOfIssues ||
                    (NumberOfIssues != null &&
                     NumberOfIssues.Equals(input.NumberOfIssues))
                ) &&
                (
                    NumberOfItems == input.NumberOfItems ||
                    (NumberOfItems != null &&
                     NumberOfItems.Equals(input.NumberOfItems))
                ) &&
                (
                    NumberOfPages == input.NumberOfPages ||
                    (NumberOfPages != null &&
                     NumberOfPages.Equals(input.NumberOfPages))
                ) &&
                (
                    NumberOfTracks == input.NumberOfTracks ||
                    (NumberOfTracks != null &&
                     NumberOfTracks.Equals(input.NumberOfTracks))
                ) &&
                (
                    OperatingSystem == input.OperatingSystem ||
                    (OperatingSystem != null &&
                     OperatingSystem.SequenceEqual(input.OperatingSystem))
                ) &&
                (
                    OpticalZoom == input.OpticalZoom ||
                    (OpticalZoom != null &&
                     OpticalZoom.Equals(input.OpticalZoom))
                ) &&
                (
                    PackageDimensions == input.PackageDimensions ||
                    (PackageDimensions != null &&
                     PackageDimensions.Equals(input.PackageDimensions))
                ) &&
                (
                    PackageQuantity == input.PackageQuantity ||
                    (PackageQuantity != null &&
                     PackageQuantity.Equals(input.PackageQuantity))
                ) &&
                (
                    PartNumber == input.PartNumber ||
                    (PartNumber != null &&
                     PartNumber.Equals(input.PartNumber))
                ) &&
                (
                    PegiRating == input.PegiRating ||
                    (PegiRating != null &&
                     PegiRating.Equals(input.PegiRating))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.SequenceEqual(input.Platform))
                ) &&
                (
                    ProcessorCount == input.ProcessorCount ||
                    (ProcessorCount != null &&
                     ProcessorCount.Equals(input.ProcessorCount))
                ) &&
                (
                    ProductGroup == input.ProductGroup ||
                    (ProductGroup != null &&
                     ProductGroup.Equals(input.ProductGroup))
                ) &&
                (
                    ProductTypeName == input.ProductTypeName ||
                    (ProductTypeName != null &&
                     ProductTypeName.Equals(input.ProductTypeName))
                ) &&
                (
                    ProductTypeSubcategory == input.ProductTypeSubcategory ||
                    (ProductTypeSubcategory != null &&
                     ProductTypeSubcategory.Equals(input.ProductTypeSubcategory))
                ) &&
                (
                    PublicationDate == input.PublicationDate ||
                    (PublicationDate != null &&
                     PublicationDate.Equals(input.PublicationDate))
                ) &&
                (
                    Publisher == input.Publisher ||
                    (Publisher != null &&
                     Publisher.Equals(input.Publisher))
                ) &&
                (
                    RegionCode == input.RegionCode ||
                    (RegionCode != null &&
                     RegionCode.Equals(input.RegionCode))
                ) &&
                (
                    ReleaseDate == input.ReleaseDate ||
                    (ReleaseDate != null &&
                     ReleaseDate.Equals(input.ReleaseDate))
                ) &&
                (
                    RingSize == input.RingSize ||
                    (RingSize != null &&
                     RingSize.Equals(input.RingSize))
                ) &&
                (
                    RunningTime == input.RunningTime ||
                    (RunningTime != null &&
                     RunningTime.Equals(input.RunningTime))
                ) &&
                (
                    ShaftMaterial == input.ShaftMaterial ||
                    (ShaftMaterial != null &&
                     ShaftMaterial.Equals(input.ShaftMaterial))
                ) &&
                (
                    Scent == input.Scent ||
                    (Scent != null &&
                     Scent.Equals(input.Scent))
                ) &&
                (
                    SeasonSequence == input.SeasonSequence ||
                    (SeasonSequence != null &&
                     SeasonSequence.Equals(input.SeasonSequence))
                ) &&
                (
                    SeikodoProductCode == input.SeikodoProductCode ||
                    (SeikodoProductCode != null &&
                     SeikodoProductCode.Equals(input.SeikodoProductCode))
                ) &&
                (
                    Size == input.Size ||
                    (Size != null &&
                     Size.Equals(input.Size))
                ) &&
                (
                    SizePerPearl == input.SizePerPearl ||
                    (SizePerPearl != null &&
                     SizePerPearl.Equals(input.SizePerPearl))
                ) &&
                (
                    SmallImage == input.SmallImage ||
                    (SmallImage != null &&
                     SmallImage.Equals(input.SmallImage))
                ) &&
                (
                    Studio == input.Studio ||
                    (Studio != null &&
                     Studio.Equals(input.Studio))
                ) &&
                (
                    SubscriptionLength == input.SubscriptionLength ||
                    (SubscriptionLength != null &&
                     SubscriptionLength.Equals(input.SubscriptionLength))
                ) &&
                (
                    SystemMemorySize == input.SystemMemorySize ||
                    (SystemMemorySize != null &&
                     SystemMemorySize.Equals(input.SystemMemorySize))
                ) &&
                (
                    SystemMemoryType == input.SystemMemoryType ||
                    (SystemMemoryType != null &&
                     SystemMemoryType.Equals(input.SystemMemoryType))
                ) &&
                (
                    TheatricalReleaseDate == input.TheatricalReleaseDate ||
                    (TheatricalReleaseDate != null &&
                     TheatricalReleaseDate.Equals(input.TheatricalReleaseDate))
                ) &&
                (
                    Title == input.Title ||
                    (Title != null &&
                     Title.Equals(input.Title))
                ) &&
                (
                    TotalDiamondWeight == input.TotalDiamondWeight ||
                    (TotalDiamondWeight != null &&
                     TotalDiamondWeight.Equals(input.TotalDiamondWeight))
                ) &&
                (
                    TotalGemWeight == input.TotalGemWeight ||
                    (TotalGemWeight != null &&
                     TotalGemWeight.Equals(input.TotalGemWeight))
                ) &&
                (
                    Warranty == input.Warranty ||
                    (Warranty != null &&
                     Warranty.Equals(input.Warranty))
                ) &&
                (
                    WeeeTaxValue == input.WeeeTaxValue ||
                    (WeeeTaxValue != null &&
                     WeeeTaxValue.Equals(input.WeeeTaxValue))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeSetListType {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Artist: ").Append(Artist).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AudienceRating: ").Append(AudienceRating).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  BackFinding: ").Append(BackFinding).Append("\n");
            sb.Append("  BandMaterialType: ").Append(BandMaterialType).Append("\n");
            sb.Append("  Binding: ").Append(Binding).Append("\n");
            sb.Append("  BlurayRegion: ").Append(BlurayRegion).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CeroAgeRating: ").Append(CeroAgeRating).Append("\n");
            sb.Append("  ChainType: ").Append(ChainType).Append("\n");
            sb.Append("  ClaspType: ").Append(ClaspType).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CpuManufacturer: ").Append(CpuManufacturer).Append("\n");
            sb.Append("  CpuSpeed: ").Append(CpuSpeed).Append("\n");
            sb.Append("  CpuType: ").Append(CpuType).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Director: ").Append(Director).Append("\n");
            sb.Append("  DisplaySize: ").Append(DisplaySize).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  EpisodeSequence: ").Append(EpisodeSequence).Append("\n");
            sb.Append("  EsrbAgeRating: ").Append(EsrbAgeRating).Append("\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Flavor: ").Append(Flavor).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  GemType: ").Append(GemType).Append("\n");
            sb.Append("  Genre: ").Append(Genre).Append("\n");
            sb.Append("  GolfClubFlex: ").Append(GolfClubFlex).Append("\n");
            sb.Append("  GolfClubLoft: ").Append(GolfClubLoft).Append("\n");
            sb.Append("  HandOrientation: ").Append(HandOrientation).Append("\n");
            sb.Append("  HardDiskInterface: ").Append(HardDiskInterface).Append("\n");
            sb.Append("  HardDiskSize: ").Append(HardDiskSize).Append("\n");
            sb.Append("  HardwarePlatform: ").Append(HardwarePlatform).Append("\n");
            sb.Append("  HazardousMaterialType: ").Append(HazardousMaterialType).Append("\n");
            sb.Append("  ItemDimensions: ").Append(ItemDimensions).Append("\n");
            sb.Append("  IsAdultProduct: ").Append(IsAdultProduct).Append("\n");
            sb.Append("  IsAutographed: ").Append(IsAutographed).Append("\n");
            sb.Append("  IsEligibleForTradeIn: ").Append(IsEligibleForTradeIn).Append("\n");
            sb.Append("  IsMemorabilia: ").Append(IsMemorabilia).Append("\n");
            sb.Append("  IssuesPerYear: ").Append(IssuesPerYear).Append("\n");
            sb.Append("  ItemPartNumber: ").Append(ItemPartNumber).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LegalDisclaimer: ").Append(LegalDisclaimer).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerMaximumAge: ").Append(ManufacturerMaximumAge).Append("\n");
            sb.Append("  ManufacturerMinimumAge: ").Append(ManufacturerMinimumAge).Append("\n");
            sb.Append("  ManufacturerPartsWarrantyDescription: ").Append(ManufacturerPartsWarrantyDescription)
                .Append("\n");
            sb.Append("  MaterialType: ").Append(MaterialType).Append("\n");
            sb.Append("  MaximumResolution: ").Append(MaximumResolution).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  MetalStamp: ").Append(MetalStamp).Append("\n");
            sb.Append("  MetalType: ").Append(MetalType).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  NumberOfDiscs: ").Append(NumberOfDiscs).Append("\n");
            sb.Append("  NumberOfIssues: ").Append(NumberOfIssues).Append("\n");
            sb.Append("  NumberOfItems: ").Append(NumberOfItems).Append("\n");
            sb.Append("  NumberOfPages: ").Append(NumberOfPages).Append("\n");
            sb.Append("  NumberOfTracks: ").Append(NumberOfTracks).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  OpticalZoom: ").Append(OpticalZoom).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  PegiRating: ").Append(PegiRating).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ProcessorCount: ").Append(ProcessorCount).Append("\n");
            sb.Append("  ProductGroup: ").Append(ProductGroup).Append("\n");
            sb.Append("  ProductTypeName: ").Append(ProductTypeName).Append("\n");
            sb.Append("  ProductTypeSubcategory: ").Append(ProductTypeSubcategory).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  RingSize: ").Append(RingSize).Append("\n");
            sb.Append("  RunningTime: ").Append(RunningTime).Append("\n");
            sb.Append("  ShaftMaterial: ").Append(ShaftMaterial).Append("\n");
            sb.Append("  Scent: ").Append(Scent).Append("\n");
            sb.Append("  SeasonSequence: ").Append(SeasonSequence).Append("\n");
            sb.Append("  SeikodoProductCode: ").Append(SeikodoProductCode).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizePerPearl: ").Append(SizePerPearl).Append("\n");
            sb.Append("  SmallImage: ").Append(SmallImage).Append("\n");
            sb.Append("  Studio: ").Append(Studio).Append("\n");
            sb.Append("  SubscriptionLength: ").Append(SubscriptionLength).Append("\n");
            sb.Append("  SystemMemorySize: ").Append(SystemMemorySize).Append("\n");
            sb.Append("  SystemMemoryType: ").Append(SystemMemoryType).Append("\n");
            sb.Append("  TheatricalReleaseDate: ").Append(TheatricalReleaseDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TotalDiamondWeight: ").Append(TotalDiamondWeight).Append("\n");
            sb.Append("  TotalGemWeight: ").Append(TotalGemWeight).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  WeeeTaxValue: ").Append(WeeeTaxValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AttributeSetListType);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Actor != null)
                    hashCode = hashCode * 59 + Actor.GetHashCode();
                if (Artist != null)
                    hashCode = hashCode * 59 + Artist.GetHashCode();
                if (AspectRatio != null)
                    hashCode = hashCode * 59 + AspectRatio.GetHashCode();
                if (AudienceRating != null)
                    hashCode = hashCode * 59 + AudienceRating.GetHashCode();
                if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                if (BackFinding != null)
                    hashCode = hashCode * 59 + BackFinding.GetHashCode();
                if (BandMaterialType != null)
                    hashCode = hashCode * 59 + BandMaterialType.GetHashCode();
                if (Binding != null)
                    hashCode = hashCode * 59 + Binding.GetHashCode();
                if (BlurayRegion != null)
                    hashCode = hashCode * 59 + BlurayRegion.GetHashCode();
                if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                if (CeroAgeRating != null)
                    hashCode = hashCode * 59 + CeroAgeRating.GetHashCode();
                if (ChainType != null)
                    hashCode = hashCode * 59 + ChainType.GetHashCode();
                if (ClaspType != null)
                    hashCode = hashCode * 59 + ClaspType.GetHashCode();
                if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                if (CpuManufacturer != null)
                    hashCode = hashCode * 59 + CpuManufacturer.GetHashCode();
                if (CpuSpeed != null)
                    hashCode = hashCode * 59 + CpuSpeed.GetHashCode();
                if (CpuType != null)
                    hashCode = hashCode * 59 + CpuType.GetHashCode();
                if (Creator != null)
                    hashCode = hashCode * 59 + Creator.GetHashCode();
                if (Department != null)
                    hashCode = hashCode * 59 + Department.GetHashCode();
                if (Director != null)
                    hashCode = hashCode * 59 + Director.GetHashCode();
                if (DisplaySize != null)
                    hashCode = hashCode * 59 + DisplaySize.GetHashCode();
                if (Edition != null)
                    hashCode = hashCode * 59 + Edition.GetHashCode();
                if (EpisodeSequence != null)
                    hashCode = hashCode * 59 + EpisodeSequence.GetHashCode();
                if (EsrbAgeRating != null)
                    hashCode = hashCode * 59 + EsrbAgeRating.GetHashCode();
                if (Feature != null)
                    hashCode = hashCode * 59 + Feature.GetHashCode();
                if (Flavor != null)
                    hashCode = hashCode * 59 + Flavor.GetHashCode();
                if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                if (GemType != null)
                    hashCode = hashCode * 59 + GemType.GetHashCode();
                if (Genre != null)
                    hashCode = hashCode * 59 + Genre.GetHashCode();
                if (GolfClubFlex != null)
                    hashCode = hashCode * 59 + GolfClubFlex.GetHashCode();
                if (GolfClubLoft != null)
                    hashCode = hashCode * 59 + GolfClubLoft.GetHashCode();
                if (HandOrientation != null)
                    hashCode = hashCode * 59 + HandOrientation.GetHashCode();
                if (HardDiskInterface != null)
                    hashCode = hashCode * 59 + HardDiskInterface.GetHashCode();
                if (HardDiskSize != null)
                    hashCode = hashCode * 59 + HardDiskSize.GetHashCode();
                if (HardwarePlatform != null)
                    hashCode = hashCode * 59 + HardwarePlatform.GetHashCode();
                if (HazardousMaterialType != null)
                    hashCode = hashCode * 59 + HazardousMaterialType.GetHashCode();
                if (ItemDimensions != null)
                    hashCode = hashCode * 59 + ItemDimensions.GetHashCode();
                if (IsAdultProduct != null)
                    hashCode = hashCode * 59 + IsAdultProduct.GetHashCode();
                if (IsAutographed != null)
                    hashCode = hashCode * 59 + IsAutographed.GetHashCode();
                if (IsEligibleForTradeIn != null)
                    hashCode = hashCode * 59 + IsEligibleForTradeIn.GetHashCode();
                if (IsMemorabilia != null)
                    hashCode = hashCode * 59 + IsMemorabilia.GetHashCode();
                if (IssuesPerYear != null)
                    hashCode = hashCode * 59 + IssuesPerYear.GetHashCode();
                if (ItemPartNumber != null)
                    hashCode = hashCode * 59 + ItemPartNumber.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Languages != null)
                    hashCode = hashCode * 59 + Languages.GetHashCode();
                if (LegalDisclaimer != null)
                    hashCode = hashCode * 59 + LegalDisclaimer.GetHashCode();
                if (ListPrice != null)
                    hashCode = hashCode * 59 + ListPrice.GetHashCode();
                if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                if (ManufacturerMaximumAge != null)
                    hashCode = hashCode * 59 + ManufacturerMaximumAge.GetHashCode();
                if (ManufacturerMinimumAge != null)
                    hashCode = hashCode * 59 + ManufacturerMinimumAge.GetHashCode();
                if (ManufacturerPartsWarrantyDescription != null)
                    hashCode = hashCode * 59 + ManufacturerPartsWarrantyDescription.GetHashCode();
                if (MaterialType != null)
                    hashCode = hashCode * 59 + MaterialType.GetHashCode();
                if (MaximumResolution != null)
                    hashCode = hashCode * 59 + MaximumResolution.GetHashCode();
                if (MediaType != null)
                    hashCode = hashCode * 59 + MediaType.GetHashCode();
                if (MetalStamp != null)
                    hashCode = hashCode * 59 + MetalStamp.GetHashCode();
                if (MetalType != null)
                    hashCode = hashCode * 59 + MetalType.GetHashCode();
                if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                if (NumberOfDiscs != null)
                    hashCode = hashCode * 59 + NumberOfDiscs.GetHashCode();
                if (NumberOfIssues != null)
                    hashCode = hashCode * 59 + NumberOfIssues.GetHashCode();
                if (NumberOfItems != null)
                    hashCode = hashCode * 59 + NumberOfItems.GetHashCode();
                if (NumberOfPages != null)
                    hashCode = hashCode * 59 + NumberOfPages.GetHashCode();
                if (NumberOfTracks != null)
                    hashCode = hashCode * 59 + NumberOfTracks.GetHashCode();
                if (OperatingSystem != null)
                    hashCode = hashCode * 59 + OperatingSystem.GetHashCode();
                if (OpticalZoom != null)
                    hashCode = hashCode * 59 + OpticalZoom.GetHashCode();
                if (PackageDimensions != null)
                    hashCode = hashCode * 59 + PackageDimensions.GetHashCode();
                if (PackageQuantity != null)
                    hashCode = hashCode * 59 + PackageQuantity.GetHashCode();
                if (PartNumber != null)
                    hashCode = hashCode * 59 + PartNumber.GetHashCode();
                if (PegiRating != null)
                    hashCode = hashCode * 59 + PegiRating.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (ProcessorCount != null)
                    hashCode = hashCode * 59 + ProcessorCount.GetHashCode();
                if (ProductGroup != null)
                    hashCode = hashCode * 59 + ProductGroup.GetHashCode();
                if (ProductTypeName != null)
                    hashCode = hashCode * 59 + ProductTypeName.GetHashCode();
                if (ProductTypeSubcategory != null)
                    hashCode = hashCode * 59 + ProductTypeSubcategory.GetHashCode();
                if (PublicationDate != null)
                    hashCode = hashCode * 59 + PublicationDate.GetHashCode();
                if (Publisher != null)
                    hashCode = hashCode * 59 + Publisher.GetHashCode();
                if (RegionCode != null)
                    hashCode = hashCode * 59 + RegionCode.GetHashCode();
                if (ReleaseDate != null)
                    hashCode = hashCode * 59 + ReleaseDate.GetHashCode();
                if (RingSize != null)
                    hashCode = hashCode * 59 + RingSize.GetHashCode();
                if (RunningTime != null)
                    hashCode = hashCode * 59 + RunningTime.GetHashCode();
                if (ShaftMaterial != null)
                    hashCode = hashCode * 59 + ShaftMaterial.GetHashCode();
                if (Scent != null)
                    hashCode = hashCode * 59 + Scent.GetHashCode();
                if (SeasonSequence != null)
                    hashCode = hashCode * 59 + SeasonSequence.GetHashCode();
                if (SeikodoProductCode != null)
                    hashCode = hashCode * 59 + SeikodoProductCode.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (SizePerPearl != null)
                    hashCode = hashCode * 59 + SizePerPearl.GetHashCode();
                if (SmallImage != null)
                    hashCode = hashCode * 59 + SmallImage.GetHashCode();
                if (Studio != null)
                    hashCode = hashCode * 59 + Studio.GetHashCode();
                if (SubscriptionLength != null)
                    hashCode = hashCode * 59 + SubscriptionLength.GetHashCode();
                if (SystemMemorySize != null)
                    hashCode = hashCode * 59 + SystemMemorySize.GetHashCode();
                if (SystemMemoryType != null)
                    hashCode = hashCode * 59 + SystemMemoryType.GetHashCode();
                if (TheatricalReleaseDate != null)
                    hashCode = hashCode * 59 + TheatricalReleaseDate.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (TotalDiamondWeight != null)
                    hashCode = hashCode * 59 + TotalDiamondWeight.GetHashCode();
                if (TotalGemWeight != null)
                    hashCode = hashCode * 59 + TotalGemWeight.GetHashCode();
                if (Warranty != null)
                    hashCode = hashCode * 59 + Warranty.GetHashCode();
                if (WeeeTaxValue != null)
                    hashCode = hashCode * 59 + WeeeTaxValue.GetHashCode();
                return hashCode;
            }
        }
    }
}