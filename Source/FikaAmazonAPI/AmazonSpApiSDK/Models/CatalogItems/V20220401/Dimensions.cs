/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems.V20220401
{
    /// <summary>
    ///     Dimensions of an Amazon catalog item or item in its packaging.
    /// </summary>
    [DataContract]
    public class Dimensions : IEquatable<Dimensions>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        /// <param name="height">Height of an item or item package..</param>
        /// <param name="length">Length of an item or item package..</param>
        /// <param name="weight">Weight of an item or item package..</param>
        /// <param name="width">Width of an item or item package..</param>
        public Dimensions(Dimension height = default, Dimension length = default, Dimension weight = default,
            Dimension width = default)
        {
            Height = height;
            Length = length;
            Weight = weight;
            Width = width;
        }

        public Dimensions()
        {
            Height = default;
            Length = default;
            Weight = default;
            Width = default;
        }

        /// <summary>
        ///     Height of an item or item package.
        /// </summary>
        /// <value>Height of an item or item package.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public Dimension Height { get; set; }

        /// <summary>
        ///     Length of an item or item package.
        /// </summary>
        /// <value>Length of an item or item package.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public Dimension Length { get; set; }

        /// <summary>
        ///     Weight of an item or item package.
        /// </summary>
        /// <value>Weight of an item or item package.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public Dimension Weight { get; set; }

        /// <summary>
        ///     Width of an item or item package.
        /// </summary>
        /// <value>Width of an item or item package.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public Dimension Width { get; set; }

        /// <summary>
        ///     Returns true if Dimensions instances are equal
        /// </summary>
        /// <param name="input">Instance of Dimensions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dimensions input)
        {
            if (input == null)
                return false;

            return
                (
                    Height == input.Height ||
                    (Height != null &&
                     Height.Equals(input.Height))
                ) &&
                (
                    Length == input.Length ||
                    (Length != null &&
                     Length.Equals(input.Length))
                ) &&
                (
                    Weight == input.Weight ||
                    (Weight != null &&
                     Weight.Equals(input.Weight))
                ) &&
                (
                    Width == input.Width ||
                    (Width != null &&
                     Width.Equals(input.Width))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dimensions {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Dimensions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                if (Weight != null)
                    hashCode = hashCode * 59 + Weight.GetHashCode();
                if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }
    }
}