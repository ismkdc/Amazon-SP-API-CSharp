/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems.V20220401
{
    /// <summary>
    ///     An item in the Amazon catalog.
    /// </summary>
    [DataContract]
    public class Item : IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Item()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="asin">asin (required).</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="identifiers">identifiers.</param>
        /// <param name="images">images.</param>
        /// <param name="productTypes">productTypes.</param>
        /// <param name="relationships">relationships.</param>
        /// <param name="salesRanks">salesRanks.</param>
        /// <param name="summaries">summaries.</param>
        /// <param name="vendorDetails">vendorDetails.</param>
        public Item(string asin = default, ItemAttributes attributes = default, ItemDimensions dimensions = default,
            ItemIdentifiers identifiers = default, ItemImages images = default, ItemProductTypes productTypes = default,
            ItemRelationships relationships = default, ItemSalesRanks salesRanks = default,
            ItemSummaries summaries = default, ItemVendorDetails vendorDetails = default)
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
                throw new InvalidDataException("asin is a required property for Item and cannot be null");
            Asin = asin;
            Attributes = attributes;
            Dimensions = dimensions;
            Identifiers = identifiers;
            Images = images;
            ProductTypes = productTypes;
            Relationships = relationships;
            SalesRanks = salesRanks;
            Summaries = summaries;
            VendorDetails = vendorDetails;
        }

        /// <summary>
        ///     Gets or Sets Asin
        /// </summary>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        ///     Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public ItemAttributes Attributes { get; set; }

        /// <summary>
        ///     Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public ItemDimensions Dimensions { get; set; }

        /// <summary>
        ///     Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "identifiers", EmitDefaultValue = false)]
        public ItemIdentifiers Identifiers { get; set; }

        /// <summary>
        ///     Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public ItemImages Images { get; set; }

        /// <summary>
        ///     Gets or Sets ProductTypes
        /// </summary>
        [DataMember(Name = "productTypes", EmitDefaultValue = false)]
        public ItemProductTypes ProductTypes { get; set; }

        /// <summary>
        ///     Gets or Sets Relationships
        /// </summary>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public ItemRelationships Relationships { get; set; }

        /// <summary>
        ///     Gets or Sets SalesRanks
        /// </summary>
        [DataMember(Name = "salesRanks", EmitDefaultValue = false)]
        public ItemSalesRanks SalesRanks { get; set; }

        /// <summary>
        ///     Gets or Sets Summaries
        /// </summary>
        [DataMember(Name = "summaries", EmitDefaultValue = false)]
        public ItemSummaries Summaries { get; set; }

        /// <summary>
        ///     Gets or Sets VendorDetails
        /// </summary>
        [DataMember(Name = "vendorDetails", EmitDefaultValue = false)]
        public ItemVendorDetails VendorDetails { get; set; }

        /// <summary>
        ///     Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return
                (
                    Asin == input.Asin ||
                    (Asin != null &&
                     Asin.Equals(input.Asin))
                ) &&
                (
                    Attributes == input.Attributes ||
                    (Attributes != null &&
                     Attributes.Equals(input.Attributes))
                ) &&
                (
                    Dimensions == input.Dimensions ||
                    (Dimensions != null &&
                     Dimensions.Equals(input.Dimensions))
                ) &&
                (
                    Identifiers == input.Identifiers ||
                    (Identifiers != null &&
                     Identifiers.Equals(input.Identifiers))
                ) &&
                (
                    Images == input.Images ||
                    (Images != null &&
                     Images.Equals(input.Images))
                ) &&
                (
                    ProductTypes == input.ProductTypes ||
                    (ProductTypes != null &&
                     ProductTypes.Equals(input.ProductTypes))
                ) &&
                (
                    Relationships == input.Relationships ||
                    (Relationships != null &&
                     Relationships.Equals(input.Relationships))
                ) &&
                (
                    SalesRanks == input.SalesRanks ||
                    (SalesRanks != null &&
                     SalesRanks.Equals(input.SalesRanks))
                ) &&
                (
                    Summaries == input.Summaries ||
                    (Summaries != null &&
                     Summaries.Equals(input.Summaries))
                ) &&
                (
                    VendorDetails == input.VendorDetails ||
                    (VendorDetails != null &&
                     VendorDetails.Equals(input.VendorDetails))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  ProductTypes: ").Append(ProductTypes).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  SalesRanks: ").Append(SalesRanks).Append("\n");
            sb.Append("  Summaries: ").Append(Summaries).Append("\n");
            sb.Append("  VendorDetails: ").Append(VendorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Item);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Asin != null)
                    hashCode = hashCode * 59 + Asin.GetHashCode();
                if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                if (Dimensions != null)
                    hashCode = hashCode * 59 + Dimensions.GetHashCode();
                if (Identifiers != null)
                    hashCode = hashCode * 59 + Identifiers.GetHashCode();
                if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                if (ProductTypes != null)
                    hashCode = hashCode * 59 + ProductTypes.GetHashCode();
                if (Relationships != null)
                    hashCode = hashCode * 59 + Relationships.GetHashCode();
                if (SalesRanks != null)
                    hashCode = hashCode * 59 + SalesRanks.GetHashCode();
                if (Summaries != null)
                    hashCode = hashCode * 59 + Summaries.GetHashCode();
                if (VendorDetails != null)
                    hashCode = hashCode * 59 + VendorDetails.GetHashCode();
                return hashCode;
            }
        }
    }
}