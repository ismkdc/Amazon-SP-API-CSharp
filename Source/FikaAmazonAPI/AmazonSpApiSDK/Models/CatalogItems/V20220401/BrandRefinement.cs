/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems.V20220401
{
    /// <summary>
    ///     Description of a brand that can be used to get more fine-grained search results.
    /// </summary>
    [DataContract]
    public class BrandRefinement : IEquatable<BrandRefinement>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="BrandRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public BrandRefinement()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BrandRefinement" /> class.
        /// </summary>
        /// <param name="numberOfResults">
        ///     The estimated number of results that would still be returned if refinement key applied.
        ///     (required).
        /// </param>
        /// <param name="brandName">Brand name. For display and can be used as a search refinement. (required).</param>
        public BrandRefinement(int? numberOfResults = default, string brandName = default)
        {
            // to ensure "numberOfResults" is required (not null)
            if (numberOfResults == null)
                throw new InvalidDataException(
                    "numberOfResults is a required property for BrandRefinement and cannot be null");
            NumberOfResults = numberOfResults;
            // to ensure "brandName" is required (not null)
            if (brandName == null)
                throw new InvalidDataException(
                    "brandName is a required property for BrandRefinement and cannot be null");
            BrandName = brandName;
        }

        /// <summary>
        ///     The estimated number of results that would still be returned if refinement key applied.
        /// </summary>
        /// <value>The estimated number of results that would still be returned if refinement key applied.</value>
        [DataMember(Name = "numberOfResults", EmitDefaultValue = false)]
        public int? NumberOfResults { get; set; }

        /// <summary>
        ///     Brand name. For display and can be used as a search refinement.
        /// </summary>
        /// <value>Brand name. For display and can be used as a search refinement.</value>
        [DataMember(Name = "brandName", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        ///     Returns true if BrandRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandRefinement input)
        {
            if (input == null)
                return false;

            return
                (
                    NumberOfResults == input.NumberOfResults ||
                    (NumberOfResults != null &&
                     NumberOfResults.Equals(input.NumberOfResults))
                ) &&
                (
                    BrandName == input.BrandName ||
                    (BrandName != null &&
                     BrandName.Equals(input.BrandName))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandRefinement {\n");
            sb.Append("  NumberOfResults: ").Append(NumberOfResults).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BrandRefinement);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (NumberOfResults != null)
                    hashCode = hashCode * 59 + NumberOfResults.GetHashCode();
                if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                return hashCode;
            }
        }
    }
}