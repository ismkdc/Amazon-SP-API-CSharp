/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems.V20220401
{
    /// <summary>
    ///     Summary details of an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [DataContract]
    public class ItemSummaryByMarketplace : IEquatable<ItemSummaryByMarketplace>, IValidatableObject
    {
        /// <summary>
        ///     Classification type associated with the Amazon catalog item.
        /// </summary>
        /// <value>Classification type associated with the Amazon catalog item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemClassificationEnum
        {
            /// <summary>
            ///     Enum BASEPRODUCT for value: BASE_PRODUCT
            /// </summary>
            [EnumMember(Value = "BASE_PRODUCT")] BASEPRODUCT = 1,

            /// <summary>
            ///     Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")] OTHER = 2,

            /// <summary>
            ///     Enum PRODUCTBUNDLE for value: PRODUCT_BUNDLE
            /// </summary>
            [EnumMember(Value = "PRODUCT_BUNDLE")] PRODUCTBUNDLE = 3,

            /// <summary>
            ///     Enum VARIATIONPARENT for value: VARIATION_PARENT
            /// </summary>
            [EnumMember(Value = "VARIATION_PARENT")]
            VARIATIONPARENT = 4
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemSummaryByMarketplace()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. (required).</param>
        /// <param name="brand">Name of the brand associated with an Amazon catalog item..</param>
        /// <param name="browseClassification">Classification (browse node) associated with an Amazon catalog item..</param>
        /// <param name="color">Name of the color associated with an Amazon catalog item..</param>
        /// <param name="itemClassification">Classification type associated with the Amazon catalog item..</param>
        /// <param name="itemName">Name, or title, associated with an Amazon catalog item..</param>
        /// <param name="manufacturer">Name of the manufacturer associated with an Amazon catalog item..</param>
        /// <param name="modelNumber">Model number associated with an Amazon catalog item..</param>
        /// <param name="packageQuantity">Quantity of an Amazon catalog item in one package..</param>
        /// <param name="partNumber">Part number associated with an Amazon catalog item..</param>
        /// <param name="releaseDate">First date on which an Amazon catalog item is shippable to customers..</param>
        /// <param name="size">Name of the size associated with an Amazon catalog item..</param>
        /// <param name="style">Name of the style associated with an Amazon catalog item..</param>
        /// <param name="websiteDisplayGroup">Name of the website display group associated with an Amazon catalog item..</param>
        public ItemSummaryByMarketplace(string marketplaceId = default, string brand = default,
            ItemBrowseClassification browseClassification = default,
            string color = default, ItemClassificationEnum? itemClassification = default, string itemName = default,
            string manufacturer = default,
            string modelNumber = default, int? packageQuantity = default, string partNumber = default,
            DateTime? releaseDate = default,
            string size = default, string style = default, string websiteDisplayGroup = default,
            string websiteDisplayGroupName = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
                throw new InvalidDataException(
                    "marketplaceId is a required property for ItemSummaryByMarketplace and cannot be null");
            MarketplaceId = marketplaceId;
            Brand = brand;
            BrowseClassification = browseClassification;
            Color = color;
            ItemClassification = itemClassification;
            ItemName = itemName;
            Manufacturer = manufacturer;
            ModelNumber = modelNumber;
            PackageQuantity = packageQuantity;
            PartNumber = partNumber;
            ReleaseDate = releaseDate;
            Size = size;
            Style = style;
            WebsiteDisplayGroup = websiteDisplayGroup;
            WebsiteDisplayGroupName = websiteDisplayGroupName;
        }

        /// <summary>
        ///     Classification type associated with the Amazon catalog item.
        /// </summary>
        /// <value>Classification type associated with the Amazon catalog item.</value>
        [DataMember(Name = "itemClassification", EmitDefaultValue = false)]
        public ItemClassificationEnum? ItemClassification { get; set; }

        /// <summary>
        ///     Amazon marketplace identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        ///     Name of the brand associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the brand associated with an Amazon catalog item.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        ///     Classification (browse node) associated with an Amazon catalog item.
        /// </summary>
        /// <value>Classification (browse node) associated with an Amazon catalog item.</value>
        [DataMember(Name = "browseClassification", EmitDefaultValue = false)]
        public ItemBrowseClassification BrowseClassification { get; set; }

        /// <summary>
        ///     Name of the color associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the color associated with an Amazon catalog item.</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }


        /// <summary>
        ///     Name, or title, associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name, or title, associated with an Amazon catalog item.</value>
        [DataMember(Name = "itemName", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        ///     Name of the manufacturer associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the manufacturer associated with an Amazon catalog item.</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        ///     Model number associated with an Amazon catalog item.
        /// </summary>
        /// <value>Model number associated with an Amazon catalog item.</value>
        [DataMember(Name = "modelNumber", EmitDefaultValue = false)]
        public string ModelNumber { get; set; }

        /// <summary>
        ///     Quantity of an Amazon catalog item in one package.
        /// </summary>
        /// <value>Quantity of an Amazon catalog item in one package.</value>
        [DataMember(Name = "packageQuantity", EmitDefaultValue = false)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        ///     Part number associated with an Amazon catalog item.
        /// </summary>
        /// <value>Part number associated with an Amazon catalog item.</value>
        [DataMember(Name = "partNumber", EmitDefaultValue = false)]
        public string PartNumber { get; set; }

        /// <summary>
        ///     First date on which an Amazon catalog item is shippable to customers.
        /// </summary>
        /// <value>First date on which an Amazon catalog item is shippable to customers.</value>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        public DateTime? ReleaseDate { get; set; }

        /// <summary>
        ///     Name of the size associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the size associated with an Amazon catalog item.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        ///     Name of the style associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the style associated with an Amazon catalog item.</value>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public string Style { get; set; }

        /// <summary>
        ///     Name of the website display group associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the website display group associated with an Amazon catalog item.</value>
        [DataMember(Name = "websiteDisplayGroup", EmitDefaultValue = false)]
        public string WebsiteDisplayGroup { get; set; }

        /// <summary>
        ///     Name of the website display group associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the website display group associated with an Amazon catalog item.</value>
        [DataMember(Name = "websiteDisplayGroupName", EmitDefaultValue = false)]
        public string WebsiteDisplayGroupName { get; set; }

        /// <summary>
        ///     Returns true if ItemSummaryByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSummaryByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSummaryByMarketplace input)
        {
            if (input == null)
                return false;

            return
                (
                    MarketplaceId == input.MarketplaceId ||
                    (MarketplaceId != null &&
                     MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    Brand == input.Brand ||
                    (Brand != null &&
                     Brand.Equals(input.Brand))
                ) &&
                (
                    BrowseClassification == input.BrowseClassification ||
                    (BrowseClassification != null &&
                     BrowseClassification.Equals(input.BrowseClassification))
                ) &&
                (
                    Color == input.Color ||
                    (Color != null &&
                     Color.Equals(input.Color))
                ) &&
                (
                    ItemClassification == input.ItemClassification ||
                    (ItemClassification != null &&
                     ItemClassification.Equals(input.ItemClassification))
                ) &&
                (
                    ItemName == input.ItemName ||
                    (ItemName != null &&
                     ItemName.Equals(input.ItemName))
                ) &&
                (
                    Manufacturer == input.Manufacturer ||
                    (Manufacturer != null &&
                     Manufacturer.Equals(input.Manufacturer))
                ) &&
                (
                    ModelNumber == input.ModelNumber ||
                    (ModelNumber != null &&
                     ModelNumber.Equals(input.ModelNumber))
                ) &&
                (
                    PackageQuantity == input.PackageQuantity ||
                    (PackageQuantity != null &&
                     PackageQuantity.Equals(input.PackageQuantity))
                ) &&
                (
                    PartNumber == input.PartNumber ||
                    (PartNumber != null &&
                     PartNumber.Equals(input.PartNumber))
                ) &&
                (
                    Size == input.Size ||
                    (Size != null &&
                     Size.Equals(input.Size))
                ) &&
                (
                    Style == input.Style ||
                    (Style != null &&
                     Style.Equals(input.Style))
                ) &&
                (
                    WebsiteDisplayGroup == input.WebsiteDisplayGroup ||
                    (WebsiteDisplayGroup != null &&
                     WebsiteDisplayGroup.Equals(input.WebsiteDisplayGroup))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSummaryByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BrowseClassification: ").Append(BrowseClassification).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ItemClassification: ").Append(ItemClassification).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  WebsiteDisplayGroup: ").Append(WebsiteDisplayGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ItemSummaryByMarketplace);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                if (BrowseClassification != null)
                    hashCode = hashCode * 59 + BrowseClassification.GetHashCode();
                if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                if (ItemClassification != null)
                    hashCode = hashCode * 59 + ItemClassification.GetHashCode();
                if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                if (ModelNumber != null)
                    hashCode = hashCode * 59 + ModelNumber.GetHashCode();
                if (PackageQuantity != null)
                    hashCode = hashCode * 59 + PackageQuantity.GetHashCode();
                if (PartNumber != null)
                    hashCode = hashCode * 59 + PartNumber.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (Style != null)
                    hashCode = hashCode * 59 + Style.GetHashCode();
                if (WebsiteDisplayGroup != null)
                    hashCode = hashCode * 59 + WebsiteDisplayGroup.GetHashCode();
                return hashCode;
            }
        }
    }
}