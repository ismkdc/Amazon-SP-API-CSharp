/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    ///     The image attribute of the item.
    /// </summary>
    [DataContract]
    public class Image : IEquatable<Image>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="URL">The image URL attribute of the item..</param>
        /// <param name="Height">The image height attribute of the item..</param>
        /// <param name="Width">The image width attribute of the item..</param>
        public Image(string URL = default, DecimalWithUnits Height = default, DecimalWithUnits Width = default)
        {
            this.URL = URL;
            this.Height = Height;
            this.Width = Width;
        }

        /// <summary>
        ///     The image URL attribute of the item.
        /// </summary>
        /// <value>The image URL attribute of the item.</value>
        [DataMember(Name = "URL", EmitDefaultValue = false)]
        public string URL { get; set; }

        /// <summary>
        ///     The image height attribute of the item.
        /// </summary>
        /// <value>The image height attribute of the item.</value>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public DecimalWithUnits Height { get; set; }

        /// <summary>
        ///     The image width attribute of the item.
        /// </summary>
        /// <value>The image width attribute of the item.</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public DecimalWithUnits Width { get; set; }

        /// <summary>
        ///     Returns true if Image instances are equal
        /// </summary>
        /// <param name="input">Instance of Image to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Image input)
        {
            if (input == null)
                return false;

            return
                (
                    URL == input.URL ||
                    (URL != null &&
                     URL.Equals(input.URL))
                ) &&
                (
                    Height == input.Height ||
                    (Height != null &&
                     Height.Equals(input.Height))
                ) &&
                (
                    Width == input.Width ||
                    (Width != null &&
                     Width.Equals(input.Width))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Image);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (URL != null)
                    hashCode = hashCode * 59 + URL.GetHashCode();
                if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }
    }
}