/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     Information about the seller&#39;s inbound shipments. Returned by the listInboundShipments operation.
    /// </summary>
    [DataContract]
    public class InboundShipmentInfo : IEquatable<InboundShipmentInfo>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentInfo()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentInfo" /> class.
        /// </summary>
        /// <param name="shipmentId">The shipment identifier submitted in the request..</param>
        /// <param name="shipmentName">The name for the inbound shipment..</param>
        /// <param name="shipFromAddress">The return address. (required).</param>
        /// <param name="destinationFulfillmentCenterId">An Amazon fulfillment center identifier created by Amazon..</param>
        /// <param name="shipmentStatus">shipmentStatus.</param>
        /// <param name="labelPrepType">labelPrepType.</param>
        /// <param name="areCasesRequired">
        ///     Indicates whether or not an inbound shipment contains case-packed boxes. When
        ///     AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed.
        ///     (required).
        /// </param>
        /// <param name="confirmedNeedByDate">
        ///     Date by which the shipment must arrive at the Amazon fulfillment center to avoid
        ///     delivery promise breaks for pre-ordered items..
        /// </param>
        /// <param name="boxContentsSource">boxContentsSource.</param>
        /// <param name="estimatedBoxContentsFee">
        ///     An estimate of the manual processing fee charged by Amazon for boxes without box
        ///     content information. This is only returned when BoxContentsSource is NONE..
        /// </param>
        public InboundShipmentInfo(string shipmentId = default, string shipmentName = default,
            Address shipFromAddress = default, string destinationFulfillmentCenterId = default,
            ShipmentStatus? shipmentStatus = default, LabelPrepType? labelPrepType = default,
            bool? areCasesRequired = default, DateTime? confirmedNeedByDate = default,
            BoxContentsSource? boxContentsSource = default, BoxContentsFeeDetails estimatedBoxContentsFee = default)
        {
            // to ensure "shipFromAddress" is required (not null)
            if (shipFromAddress == null)
                throw new InvalidDataException(
                    "shipFromAddress is a required property for InboundShipmentInfo and cannot be null");
            ShipFromAddress = shipFromAddress;
            // to ensure "areCasesRequired" is required (not null)
            if (areCasesRequired == null)
                throw new InvalidDataException(
                    "areCasesRequired is a required property for InboundShipmentInfo and cannot be null");
            AreCasesRequired = areCasesRequired;
            ShipmentId = shipmentId;
            ShipmentName = shipmentName;
            DestinationFulfillmentCenterId = destinationFulfillmentCenterId;
            ShipmentStatus = shipmentStatus;
            LabelPrepType = labelPrepType;
            ConfirmedNeedByDate = confirmedNeedByDate;
            BoxContentsSource = boxContentsSource;
            EstimatedBoxContentsFee = estimatedBoxContentsFee;
        }

        /// <summary>
        ///     Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "ShipmentStatus", EmitDefaultValue = false)]
        public ShipmentStatus? ShipmentStatus { get; set; }

        /// <summary>
        ///     Gets or Sets LabelPrepType
        /// </summary>
        [DataMember(Name = "LabelPrepType", EmitDefaultValue = false)]
        public LabelPrepType? LabelPrepType { get; set; }

        /// <summary>
        ///     Gets or Sets BoxContentsSource
        /// </summary>
        [DataMember(Name = "BoxContentsSource", EmitDefaultValue = false)]
        public BoxContentsSource? BoxContentsSource { get; set; }

        /// <summary>
        ///     The shipment identifier submitted in the request.
        /// </summary>
        /// <value>The shipment identifier submitted in the request.</value>
        [DataMember(Name = "ShipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        ///     The name for the inbound shipment.
        /// </summary>
        /// <value>The name for the inbound shipment.</value>
        [DataMember(Name = "ShipmentName", EmitDefaultValue = false)]
        public string ShipmentName { get; set; }

        /// <summary>
        ///     The return address.
        /// </summary>
        /// <value>The return address.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        ///     An Amazon fulfillment center identifier created by Amazon.
        /// </summary>
        /// <value>An Amazon fulfillment center identifier created by Amazon.</value>
        [DataMember(Name = "DestinationFulfillmentCenterId", EmitDefaultValue = false)]
        public string DestinationFulfillmentCenterId { get; set; }


        /// <summary>
        ///     Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an
        ///     inbound shipment, all items in the inbound shipment must be case packed.
        /// </summary>
        /// <value>
        ///     Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for
        ///     an inbound shipment, all items in the inbound shipment must be case packed.
        /// </value>
        [DataMember(Name = "AreCasesRequired", EmitDefaultValue = false)]
        public bool? AreCasesRequired { get; set; }

        /// <summary>
        ///     Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for
        ///     pre-ordered items.
        /// </summary>
        /// <value>
        ///     Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for
        ///     pre-ordered items.
        /// </value>
        [DataMember(Name = "ConfirmedNeedByDate", EmitDefaultValue = false)]
        public DateTime? ConfirmedNeedByDate { get; set; }


        /// <summary>
        ///     An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only
        ///     returned when BoxContentsSource is NONE.
        /// </summary>
        /// <value>
        ///     An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is
        ///     only returned when BoxContentsSource is NONE.
        /// </value>
        [DataMember(Name = "EstimatedBoxContentsFee", EmitDefaultValue = false)]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        /// <summary>
        ///     Returns true if InboundShipmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    ShipmentId == input.ShipmentId ||
                    (ShipmentId != null &&
                     ShipmentId.Equals(input.ShipmentId))
                ) &&
                (
                    ShipmentName == input.ShipmentName ||
                    (ShipmentName != null &&
                     ShipmentName.Equals(input.ShipmentName))
                ) &&
                (
                    ShipFromAddress == input.ShipFromAddress ||
                    (ShipFromAddress != null &&
                     ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    DestinationFulfillmentCenterId == input.DestinationFulfillmentCenterId ||
                    (DestinationFulfillmentCenterId != null &&
                     DestinationFulfillmentCenterId.Equals(input.DestinationFulfillmentCenterId))
                ) &&
                (
                    ShipmentStatus == input.ShipmentStatus ||
                    (ShipmentStatus != null &&
                     ShipmentStatus.Equals(input.ShipmentStatus))
                ) &&
                (
                    LabelPrepType == input.LabelPrepType ||
                    (LabelPrepType != null &&
                     LabelPrepType.Equals(input.LabelPrepType))
                ) &&
                (
                    AreCasesRequired == input.AreCasesRequired ||
                    (AreCasesRequired != null &&
                     AreCasesRequired.Equals(input.AreCasesRequired))
                ) &&
                (
                    ConfirmedNeedByDate == input.ConfirmedNeedByDate ||
                    (ConfirmedNeedByDate != null &&
                     ConfirmedNeedByDate.Equals(input.ConfirmedNeedByDate))
                ) &&
                (
                    BoxContentsSource == input.BoxContentsSource ||
                    (BoxContentsSource != null &&
                     BoxContentsSource.Equals(input.BoxContentsSource))
                ) &&
                (
                    EstimatedBoxContentsFee == input.EstimatedBoxContentsFee ||
                    (EstimatedBoxContentsFee != null &&
                     EstimatedBoxContentsFee.Equals(input.EstimatedBoxContentsFee))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentInfo {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentName: ").Append(ShipmentName).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  DestinationFulfillmentCenterId: ").Append(DestinationFulfillmentCenterId).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  LabelPrepType: ").Append(LabelPrepType).Append("\n");
            sb.Append("  AreCasesRequired: ").Append(AreCasesRequired).Append("\n");
            sb.Append("  ConfirmedNeedByDate: ").Append(ConfirmedNeedByDate).Append("\n");
            sb.Append("  BoxContentsSource: ").Append(BoxContentsSource).Append("\n");
            sb.Append("  EstimatedBoxContentsFee: ").Append(EstimatedBoxContentsFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InboundShipmentInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ShipmentId != null)
                    hashCode = hashCode * 59 + ShipmentId.GetHashCode();
                if (ShipmentName != null)
                    hashCode = hashCode * 59 + ShipmentName.GetHashCode();
                if (ShipFromAddress != null)
                    hashCode = hashCode * 59 + ShipFromAddress.GetHashCode();
                if (DestinationFulfillmentCenterId != null)
                    hashCode = hashCode * 59 + DestinationFulfillmentCenterId.GetHashCode();
                if (ShipmentStatus != null)
                    hashCode = hashCode * 59 + ShipmentStatus.GetHashCode();
                if (LabelPrepType != null)
                    hashCode = hashCode * 59 + LabelPrepType.GetHashCode();
                if (AreCasesRequired != null)
                    hashCode = hashCode * 59 + AreCasesRequired.GetHashCode();
                if (ConfirmedNeedByDate != null)
                    hashCode = hashCode * 59 + ConfirmedNeedByDate.GetHashCode();
                if (BoxContentsSource != null)
                    hashCode = hashCode * 59 + BoxContentsSource.GetHashCode();
                if (EstimatedBoxContentsFee != null)
                    hashCode = hashCode * 59 + EstimatedBoxContentsFee.GetHashCode();
                return hashCode;
            }
        }
    }
}