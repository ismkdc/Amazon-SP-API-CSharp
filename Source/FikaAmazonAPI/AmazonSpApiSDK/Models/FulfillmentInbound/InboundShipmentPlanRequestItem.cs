/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan
    ///     operation.
    /// </summary>
    [DataContract]
    public class InboundShipmentPlanRequestItem : IEquatable<InboundShipmentPlanRequestItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentPlanRequestItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentPlanRequestItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentPlanRequestItem" /> class.
        /// </summary>
        /// <param name="sellerSKU">The seller SKU of the item. (required).</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item. (required).</param>
        /// <param name="condition">condition (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="quantityInCase">
        ///     The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied
        ///     by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound
        ///     shipment must either be case packed or individually packed. For that reason, when you submit the
        ///     createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or
        ///     for none of the items in the shipment..
        /// </param>
        /// <param name="prepDetailsList">prepDetailsList.</param>
        public InboundShipmentPlanRequestItem(string sellerSKU = default, string aSIN = default,
            Condition condition = default, int? quantity = default, int? quantityInCase = default,
            PrepDetailsList prepDetailsList = default)
        {
            // to ensure "sellerSKU" is required (not null)
            if (sellerSKU == null)
                throw new InvalidDataException(
                    "sellerSKU is a required property for InboundShipmentPlanRequestItem and cannot be null");
            SellerSKU = sellerSKU;
            // to ensure "aSIN" is required (not null)
            if (aSIN == null)
                throw new InvalidDataException(
                    "aSIN is a required property for InboundShipmentPlanRequestItem and cannot be null");
            ASIN = aSIN;
            // to ensure "condition" is required (not null)
            if (condition == null)
                throw new InvalidDataException(
                    "condition is a required property for InboundShipmentPlanRequestItem and cannot be null");
            Condition = condition;
            // to ensure "quantity" is required (not null)
            if (quantity == null)
                throw new InvalidDataException(
                    "quantity is a required property for InboundShipmentPlanRequestItem and cannot be null");
            Quantity = quantity;
            QuantityInCase = quantityInCase;
            PrepDetailsList = prepDetailsList;
        }

        /// <summary>
        ///     Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "Condition", EmitDefaultValue = false)]
        public Condition Condition { get; set; }

        /// <summary>
        ///     The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        ///     The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }


        /// <summary>
        ///     Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases
        ///     in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case
        ///     packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value
        ///     of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
        /// </summary>
        /// <value>
        ///     The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of
        ///     cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either
        ///     be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation,
        ///     the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the
        ///     shipment.
        /// </value>
        [DataMember(Name = "QuantityInCase", EmitDefaultValue = false)]
        public int? QuantityInCase { get; set; }

        /// <summary>
        ///     Gets or Sets PrepDetailsList
        /// </summary>
        [DataMember(Name = "PrepDetailsList", EmitDefaultValue = false)]
        public PrepDetailsList PrepDetailsList { get; set; }

        /// <summary>
        ///     Returns true if InboundShipmentPlanRequestItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentPlanRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentPlanRequestItem input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerSKU == input.SellerSKU ||
                    (SellerSKU != null &&
                     SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    ASIN == input.ASIN ||
                    (ASIN != null &&
                     ASIN.Equals(input.ASIN))
                ) &&
                (
                    Condition == input.Condition ||
                    (Condition != null &&
                     Condition.Equals(input.Condition))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    QuantityInCase == input.QuantityInCase ||
                    (QuantityInCase != null &&
                     QuantityInCase.Equals(input.QuantityInCase))
                ) &&
                (
                    PrepDetailsList == input.PrepDetailsList ||
                    (PrepDetailsList != null &&
                     PrepDetailsList.Equals(input.PrepDetailsList))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentPlanRequestItem {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityInCase: ").Append(QuantityInCase).Append("\n");
            sb.Append("  PrepDetailsList: ").Append(PrepDetailsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InboundShipmentPlanRequestItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerSKU != null)
                    hashCode = hashCode * 59 + SellerSKU.GetHashCode();
                if (ASIN != null)
                    hashCode = hashCode * 59 + ASIN.GetHashCode();
                if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (QuantityInCase != null)
                    hashCode = hashCode * 59 + QuantityInCase.GetHashCode();
                if (PrepDetailsList != null)
                    hashCode = hashCode * 59 + PrepDetailsList.GetHashCode();
                return hashCode;
            }
        }
    }
}