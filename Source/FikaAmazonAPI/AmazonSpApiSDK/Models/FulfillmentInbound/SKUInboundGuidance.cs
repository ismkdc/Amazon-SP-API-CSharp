/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     Reasons why a given seller SKU is not recommended for shipment to Amazon&#39;s fulfillment network.
    /// </summary>
    [DataContract]
    public class SKUInboundGuidance : IEquatable<SKUInboundGuidance>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SKUInboundGuidance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SKUInboundGuidance()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SKUInboundGuidance" /> class.
        /// </summary>
        /// <param name="sellerSKU">The seller SKU of the item. (required).</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item. (required).</param>
        /// <param name="inboundGuidance">Specific inbound guidance for an item. (required).</param>
        /// <param name="guidanceReasonList">A list of reasons for the current inbound guidance for this item..</param>
        public SKUInboundGuidance(string sellerSKU = default, string aSIN = default,
            InboundGuidance inboundGuidance = default, GuidanceReasonList guidanceReasonList = default)
        {
            // to ensure "sellerSKU" is required (not null)
            if (sellerSKU == null)
                throw new InvalidDataException(
                    "sellerSKU is a required property for SKUInboundGuidance and cannot be null");
            SellerSKU = sellerSKU;
            // to ensure "aSIN" is required (not null)
            if (aSIN == null)
                throw new InvalidDataException("aSIN is a required property for SKUInboundGuidance and cannot be null");
            ASIN = aSIN;
            // to ensure "inboundGuidance" is required (not null)
            if (inboundGuidance == null)
                throw new InvalidDataException(
                    "inboundGuidance is a required property for SKUInboundGuidance and cannot be null");
            InboundGuidance = inboundGuidance;
            GuidanceReasonList = guidanceReasonList;
        }

        /// <summary>
        ///     Specific inbound guidance for an item.
        /// </summary>
        /// <value>Specific inbound guidance for an item.</value>
        [DataMember(Name = "InboundGuidance", EmitDefaultValue = false)]
        public InboundGuidance InboundGuidance { get; set; }

        /// <summary>
        ///     The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        ///     The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }


        /// <summary>
        ///     A list of reasons for the current inbound guidance for this item.
        /// </summary>
        /// <value>A list of reasons for the current inbound guidance for this item.</value>
        [DataMember(Name = "GuidanceReasonList", EmitDefaultValue = false)]
        public GuidanceReasonList GuidanceReasonList { get; set; }

        /// <summary>
        ///     Returns true if SKUInboundGuidance instances are equal
        /// </summary>
        /// <param name="input">Instance of SKUInboundGuidance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SKUInboundGuidance input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerSKU == input.SellerSKU ||
                    (SellerSKU != null &&
                     SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    ASIN == input.ASIN ||
                    (ASIN != null &&
                     ASIN.Equals(input.ASIN))
                ) &&
                (
                    InboundGuidance == input.InboundGuidance ||
                    (InboundGuidance != null &&
                     InboundGuidance.Equals(input.InboundGuidance))
                ) &&
                (
                    GuidanceReasonList == input.GuidanceReasonList ||
                    (GuidanceReasonList != null &&
                     GuidanceReasonList.Equals(input.GuidanceReasonList))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SKUInboundGuidance {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  InboundGuidance: ").Append(InboundGuidance).Append("\n");
            sb.Append("  GuidanceReasonList: ").Append(GuidanceReasonList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SKUInboundGuidance);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerSKU != null)
                    hashCode = hashCode * 59 + SellerSKU.GetHashCode();
                if (ASIN != null)
                    hashCode = hashCode * 59 + ASIN.GetHashCode();
                if (InboundGuidance != null)
                    hashCode = hashCode * 59 + InboundGuidance.GetHashCode();
                if (GuidanceReasonList != null)
                    hashCode = hashCode * 59 + GuidanceReasonList.GetHashCode();
                return hashCode;
            }
        }
    }
}