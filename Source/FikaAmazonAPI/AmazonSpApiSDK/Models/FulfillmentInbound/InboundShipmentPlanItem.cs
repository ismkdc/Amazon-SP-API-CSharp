/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     Item information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
    /// </summary>
    [DataContract]
    public class InboundShipmentPlanItem : IEquatable<InboundShipmentPlanItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentPlanItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentPlanItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentPlanItem" /> class.
        /// </summary>
        /// <param name="sellerSKU">The seller SKU of the item. (required).</param>
        /// <param name="fulfillmentNetworkSKU">Amazon&#39;s fulfillment network SKU of the item. (required).</param>
        /// <param name="quantity">The item quantity that you are shipping. (required).</param>
        /// <param name="prepDetailsList">prepDetailsList.</param>
        public InboundShipmentPlanItem(string sellerSKU = default, string fulfillmentNetworkSKU = default,
            int? quantity = default, PrepDetailsList prepDetailsList = default)
        {
            // to ensure "sellerSKU" is required (not null)
            if (sellerSKU == null)
                throw new InvalidDataException(
                    "sellerSKU is a required property for InboundShipmentPlanItem and cannot be null");
            SellerSKU = sellerSKU;
            // to ensure "fulfillmentNetworkSKU" is required (not null)
            if (fulfillmentNetworkSKU == null)
                throw new InvalidDataException(
                    "fulfillmentNetworkSKU is a required property for InboundShipmentPlanItem and cannot be null");
            FulfillmentNetworkSKU = fulfillmentNetworkSKU;
            // to ensure "quantity" is required (not null)
            if (quantity == null)
                throw new InvalidDataException(
                    "quantity is a required property for InboundShipmentPlanItem and cannot be null");
            Quantity = quantity;
            PrepDetailsList = prepDetailsList;
        }

        /// <summary>
        ///     The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        ///     Amazon&#39;s fulfillment network SKU of the item.
        /// </summary>
        /// <value>Amazon&#39;s fulfillment network SKU of the item.</value>
        [DataMember(Name = "FulfillmentNetworkSKU", EmitDefaultValue = false)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        ///     The item quantity that you are shipping.
        /// </summary>
        /// <value>The item quantity that you are shipping.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     Gets or Sets PrepDetailsList
        /// </summary>
        [DataMember(Name = "PrepDetailsList", EmitDefaultValue = false)]
        public PrepDetailsList PrepDetailsList { get; set; }

        /// <summary>
        ///     Returns true if InboundShipmentPlanItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentPlanItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentPlanItem input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerSKU == input.SellerSKU ||
                    (SellerSKU != null &&
                     SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    FulfillmentNetworkSKU == input.FulfillmentNetworkSKU ||
                    (FulfillmentNetworkSKU != null &&
                     FulfillmentNetworkSKU.Equals(input.FulfillmentNetworkSKU))
                ) &&
                (
                    Quantity == input.Quantity ||
                    (Quantity != null &&
                     Quantity.Equals(input.Quantity))
                ) &&
                (
                    PrepDetailsList == input.PrepDetailsList ||
                    (PrepDetailsList != null &&
                     PrepDetailsList.Equals(input.PrepDetailsList))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentPlanItem {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  FulfillmentNetworkSKU: ").Append(FulfillmentNetworkSKU).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PrepDetailsList: ").Append(PrepDetailsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InboundShipmentPlanItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerSKU != null)
                    hashCode = hashCode * 59 + SellerSKU.GetHashCode();
                if (FulfillmentNetworkSKU != null)
                    hashCode = hashCode * 59 + FulfillmentNetworkSKU.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (PrepDetailsList != null)
                    hashCode = hashCode * 59 + PrepDetailsList.GetHashCode();
                return hashCode;
            }
        }
    }
}