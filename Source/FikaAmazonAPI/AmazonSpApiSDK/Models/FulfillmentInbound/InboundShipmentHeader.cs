/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     Inbound shipment information used to create and update inbound shipments.
    /// </summary>
    [DataContract]
    public class InboundShipmentHeader : IEquatable<InboundShipmentHeader>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentHeader()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InboundShipmentHeader" /> class.
        /// </summary>
        /// <param name="shipmentName">
        ///     The name for the shipment. Use a naming convention that helps distinguish between shipments
        ///     over time, such as the date the shipment was created. (required).
        /// </param>
        /// <param name="shipFromAddress">The return address. (required).</param>
        /// <param name="destinationFulfillmentCenterId">
        ///     The identifier for the fulfillment center to which the shipment will be
        ///     shipped. Get this value from the InboundShipmentPlan object in the response returned by the
        ///     createInboundShipmentPlan operation. (required).
        /// </param>
        /// <param name="areCasesRequired">
        ///     Indicates whether or not an inbound shipment contains case-packed boxes. Note: A
        ///     shipment must contain either all case-packed boxes or all individually packed boxes.  Possible values:  true - All
        ///     boxes in the shipment must be case packed.  false - All boxes in the shipment must be individually packed.  Note:
        ///     If AreCasesRequired &#x3D; true for an inbound shipment, then the value of QuantityInCase must be greater than zero
        ///     for every item in the shipment. Otherwise the service returns an error..
        /// </param>
        /// <param name="shipmentStatus">shipmentStatus (required).</param>
        /// <param name="labelPrepPreference">The preference for label preparation for an inbound shipment. (required).</param>
        /// <param name="intendedBoxContentsSource">intendedBoxContentsSource.</param>
        public InboundShipmentHeader(string shipmentName = default, Address shipFromAddress = default,
            string destinationFulfillmentCenterId = default, bool? areCasesRequired = default,
            ShipmentStatus shipmentStatus = default, LabelPrepPreference labelPrepPreference = default,
            IntendedBoxContentsSource? intendedBoxContentsSource = default)
        {
            // to ensure "shipmentName" is required (not null)
            if (shipmentName == null)
                throw new InvalidDataException(
                    "shipmentName is a required property for InboundShipmentHeader and cannot be null");
            ShipmentName = shipmentName;
            // to ensure "shipFromAddress" is required (not null)
            if (shipFromAddress == null)
                throw new InvalidDataException(
                    "shipFromAddress is a required property for InboundShipmentHeader and cannot be null");
            ShipFromAddress = shipFromAddress;
            // to ensure "destinationFulfillmentCenterId" is required (not null)
            if (destinationFulfillmentCenterId == null)
                throw new InvalidDataException(
                    "destinationFulfillmentCenterId is a required property for InboundShipmentHeader and cannot be null");
            DestinationFulfillmentCenterId = destinationFulfillmentCenterId;
            // to ensure "shipmentStatus" is required (not null)
            if (shipmentStatus == null)
                throw new InvalidDataException(
                    "shipmentStatus is a required property for InboundShipmentHeader and cannot be null");
            ShipmentStatus = shipmentStatus;
            // to ensure "labelPrepPreference" is required (not null)
            if (labelPrepPreference == null)
                throw new InvalidDataException(
                    "labelPrepPreference is a required property for InboundShipmentHeader and cannot be null");
            LabelPrepPreference = labelPrepPreference;
            AreCasesRequired = areCasesRequired;
            IntendedBoxContentsSource = intendedBoxContentsSource;
        }

        /// <summary>
        ///     Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "ShipmentStatus", EmitDefaultValue = false)]
        public ShipmentStatus ShipmentStatus { get; set; }

        /// <summary>
        ///     The preference for label preparation for an inbound shipment.
        /// </summary>
        /// <value>The preference for label preparation for an inbound shipment.</value>
        [DataMember(Name = "LabelPrepPreference", EmitDefaultValue = false)]
        public LabelPrepPreference LabelPrepPreference { get; set; }

        /// <summary>
        ///     Gets or Sets IntendedBoxContentsSource
        /// </summary>
        [DataMember(Name = "IntendedBoxContentsSource", EmitDefaultValue = false)]
        public IntendedBoxContentsSource? IntendedBoxContentsSource { get; set; }

        /// <summary>
        ///     The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the
        ///     date the shipment was created.
        /// </summary>
        /// <value>
        ///     The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as
        ///     the date the shipment was created.
        /// </value>
        [DataMember(Name = "ShipmentName", EmitDefaultValue = false)]
        public string ShipmentName { get; set; }

        /// <summary>
        ///     The return address.
        /// </summary>
        /// <value>The return address.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        ///     The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the
        ///     InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
        /// </summary>
        /// <value>
        ///     The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the
        ///     InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
        /// </value>
        [DataMember(Name = "DestinationFulfillmentCenterId", EmitDefaultValue = false)]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        ///     Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all
        ///     case-packed boxes or all individually packed boxes.  Possible values:  true - All boxes in the shipment must be
        ///     case packed.  false - All boxes in the shipment must be individually packed.  Note: If AreCasesRequired &#x3D; true
        ///     for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment.
        ///     Otherwise the service returns an error.
        /// </summary>
        /// <value>
        ///     Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either
        ///     all case-packed boxes or all individually packed boxes.  Possible values:  true - All boxes in the shipment must be
        ///     case packed.  false - All boxes in the shipment must be individually packed.  Note: If AreCasesRequired &#x3D; true
        ///     for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment.
        ///     Otherwise the service returns an error.
        /// </value>
        [DataMember(Name = "AreCasesRequired", EmitDefaultValue = false)]
        public bool? AreCasesRequired { get; set; }

        /// <summary>
        ///     Returns true if InboundShipmentHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentHeader input)
        {
            if (input == null)
                return false;

            return
                (
                    ShipmentName == input.ShipmentName ||
                    (ShipmentName != null &&
                     ShipmentName.Equals(input.ShipmentName))
                ) &&
                (
                    ShipFromAddress == input.ShipFromAddress ||
                    (ShipFromAddress != null &&
                     ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    DestinationFulfillmentCenterId == input.DestinationFulfillmentCenterId ||
                    (DestinationFulfillmentCenterId != null &&
                     DestinationFulfillmentCenterId.Equals(input.DestinationFulfillmentCenterId))
                ) &&
                (
                    AreCasesRequired == input.AreCasesRequired ||
                    (AreCasesRequired != null &&
                     AreCasesRequired.Equals(input.AreCasesRequired))
                ) &&
                (
                    ShipmentStatus == input.ShipmentStatus ||
                    (ShipmentStatus != null &&
                     ShipmentStatus.Equals(input.ShipmentStatus))
                ) &&
                (
                    LabelPrepPreference == input.LabelPrepPreference ||
                    (LabelPrepPreference != null &&
                     LabelPrepPreference.Equals(input.LabelPrepPreference))
                ) &&
                (
                    IntendedBoxContentsSource == input.IntendedBoxContentsSource ||
                    (IntendedBoxContentsSource != null &&
                     IntendedBoxContentsSource.Equals(input.IntendedBoxContentsSource))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentHeader {\n");
            sb.Append("  ShipmentName: ").Append(ShipmentName).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  DestinationFulfillmentCenterId: ").Append(DestinationFulfillmentCenterId).Append("\n");
            sb.Append("  AreCasesRequired: ").Append(AreCasesRequired).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  LabelPrepPreference: ").Append(LabelPrepPreference).Append("\n");
            sb.Append("  IntendedBoxContentsSource: ").Append(IntendedBoxContentsSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InboundShipmentHeader);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ShipmentName != null)
                    hashCode = hashCode * 59 + ShipmentName.GetHashCode();
                if (ShipFromAddress != null)
                    hashCode = hashCode * 59 + ShipFromAddress.GetHashCode();
                if (DestinationFulfillmentCenterId != null)
                    hashCode = hashCode * 59 + DestinationFulfillmentCenterId.GetHashCode();
                if (AreCasesRequired != null)
                    hashCode = hashCode * 59 + AreCasesRequired.GetHashCode();
                if (ShipmentStatus != null)
                    hashCode = hashCode * 59 + ShipmentStatus.GetHashCode();
                if (LabelPrepPreference != null)
                    hashCode = hashCode * 59 + LabelPrepPreference.GetHashCode();
                if (IntendedBoxContentsSource != null)
                    hashCode = hashCode * 59 + IntendedBoxContentsSource.GetHashCode();
                return hashCode;
            }
        }
    }
}