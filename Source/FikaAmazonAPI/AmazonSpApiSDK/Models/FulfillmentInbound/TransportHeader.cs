/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     The shipping identifier, information about whether the shipment is by an Amazon-partnered carrier, and information
    ///     about whether the shipment is Small Parcel or Less Than Truckload/Full Truckload (LTL/FTL).
    /// </summary>
    [DataContract]
    public class TransportHeader : IEquatable<TransportHeader>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TransportHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TransportHeader()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TransportHeader" /> class.
        /// </summary>
        /// <param name="sellerId">The Amazon seller identifier. (required).</param>
        /// <param name="shipmentId">
        ///     A shipment identifier originally returned by the createInboundShipmentPlan operation.
        ///     (required).
        /// </param>
        /// <param name="isPartnered">
        ///     Indicates whether a putTransportDetails request is for a partnered carrier.  Possible values:
        ///     * true – Request is for an Amazon-partnered carrier.  * false – Request is for a non-Amazon-partnered carrier.
        ///     (required).
        /// </param>
        /// <param name="shipmentType">shipmentType (required).</param>
        public TransportHeader(string sellerId = default, string shipmentId = default, bool? isPartnered = default,
            ShipmentType shipmentType = default)
        {
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
                throw new InvalidDataException(
                    "sellerId is a required property for TransportHeader and cannot be null");
            SellerId = sellerId;
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
                throw new InvalidDataException(
                    "shipmentId is a required property for TransportHeader and cannot be null");
            ShipmentId = shipmentId;
            // to ensure "isPartnered" is required (not null)
            if (isPartnered == null)
                throw new InvalidDataException(
                    "isPartnered is a required property for TransportHeader and cannot be null");
            IsPartnered = isPartnered;
            // to ensure "shipmentType" is required (not null)
            if (shipmentType == null)
                throw new InvalidDataException(
                    "shipmentType is a required property for TransportHeader and cannot be null");
            ShipmentType = shipmentType;
        }

        /// <summary>
        ///     Gets or Sets ShipmentType
        /// </summary>
        [DataMember(Name = "ShipmentType", EmitDefaultValue = false)]
        public ShipmentType ShipmentType { get; set; }

        /// <summary>
        ///     The Amazon seller identifier.
        /// </summary>
        /// <value>The Amazon seller identifier.</value>
        [DataMember(Name = "SellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        ///     A shipment identifier originally returned by the createInboundShipmentPlan operation.
        /// </summary>
        /// <value>A shipment identifier originally returned by the createInboundShipmentPlan operation.</value>
        [DataMember(Name = "ShipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        ///     Indicates whether a putTransportDetails request is for a partnered carrier.  Possible values:  * true – Request is
        ///     for an Amazon-partnered carrier.  * false – Request is for a non-Amazon-partnered carrier.
        /// </summary>
        /// <value>
        ///     Indicates whether a putTransportDetails request is for a partnered carrier.  Possible values:  * true – Request
        ///     is for an Amazon-partnered carrier.  * false – Request is for a non-Amazon-partnered carrier.
        /// </value>
        [DataMember(Name = "IsPartnered", EmitDefaultValue = false)]
        public bool? IsPartnered { get; set; }

        /// <summary>
        ///     Returns true if TransportHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportHeader input)
        {
            if (input == null)
                return false;

            return
                (
                    SellerId == input.SellerId ||
                    (SellerId != null &&
                     SellerId.Equals(input.SellerId))
                ) &&
                (
                    ShipmentId == input.ShipmentId ||
                    (ShipmentId != null &&
                     ShipmentId.Equals(input.ShipmentId))
                ) &&
                (
                    IsPartnered == input.IsPartnered ||
                    (IsPartnered != null &&
                     IsPartnered.Equals(input.IsPartnered))
                ) &&
                (
                    ShipmentType == input.ShipmentType ||
                    (ShipmentType != null &&
                     ShipmentType.Equals(input.ShipmentType))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportHeader {\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  IsPartnered: ").Append(IsPartnered).Append("\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TransportHeader);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SellerId != null)
                    hashCode = hashCode * 59 + SellerId.GetHashCode();
                if (ShipmentId != null)
                    hashCode = hashCode * 59 + ShipmentId.GetHashCode();
                if (IsPartnered != null)
                    hashCode = hashCode * 59 + IsPartnered.GetHashCode();
                if (ShipmentType != null)
                    hashCode = hashCode * 59 + ShipmentType.GetHashCode();
                return hashCode;
            }
        }
    }
}