/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    ///     Contact information for the person in the seller&#39;s organization who is responsible for a Less Than
    ///     Truckload/Full Truckload (LTL/FTL) shipment.
    /// </summary>
    [DataContract]
    public class Contact : IEquatable<Contact>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Contact()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="name">The name of the contact person. (required).</param>
        /// <param name="phone">The phone number of the contact person. (required).</param>
        /// <param name="email">The email address of the contact person. (required).</param>
        /// <param name="fax">The fax number of the contact person..</param>
        public Contact(string name = default, string phone = default, string email = default, string fax = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
                throw new InvalidDataException("name is a required property for Contact and cannot be null");
            Name = name;
            // to ensure "phone" is required (not null)
            if (phone == null)
                throw new InvalidDataException("phone is a required property for Contact and cannot be null");
            Phone = phone;
            // to ensure "email" is required (not null)
            if (email == null)
                throw new InvalidDataException("email is a required property for Contact and cannot be null");
            Email = email;
            Fax = fax;
        }

        /// <summary>
        ///     The name of the contact person.
        /// </summary>
        /// <value>The name of the contact person.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     The phone number of the contact person.
        /// </summary>
        /// <value>The phone number of the contact person.</value>
        [DataMember(Name = "Phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        ///     The email address of the contact person.
        /// </summary>
        /// <value>The email address of the contact person.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        ///     The fax number of the contact person.
        /// </summary>
        /// <value>The fax number of the contact person.</value>
        [DataMember(Name = "Fax", EmitDefaultValue = false)]
        public string Fax { get; set; }

        /// <summary>
        ///     Returns true if Contact instances are equal
        /// </summary>
        /// <param name="input">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Phone == input.Phone ||
                    (Phone != null &&
                     Phone.Equals(input.Phone))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    Fax == input.Fax ||
                    (Fax != null &&
                     Fax.Equals(input.Fax))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (Name != null && Name.Length > 50)
                yield return new ValidationResult("Invalid value for Name, length must be less than 50.",
                    new[] { "Name" });

            // Phone (string) maxLength
            if (Phone != null && Phone.Length > 20)
                yield return new ValidationResult("Invalid value for Phone, length must be less than 20.",
                    new[] { "Phone" });

            // Email (string) maxLength
            if (Email != null && Email.Length > 50)
                yield return new ValidationResult("Invalid value for Email, length must be less than 50.",
                    new[] { "Email" });

            // Fax (string) maxLength
            if (Fax != null && Fax.Length > 20)
                yield return new ValidationResult("Invalid value for Fax, length must be less than 20.",
                    new[] { "Fax" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Contact);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (Fax != null)
                    hashCode = hashCode * 59 + Fax.GetHashCode();
                return hashCode;
            }
        }
    }
}